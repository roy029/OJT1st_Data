,func
1845,"    public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException {
        HttpRequest req = transport.buildGetRequest();
        req.setUrl(targetUrl);
        NotifyFeed feed = req.execute().parseAs(NotifyFeed.class);
        if (feed.entry == null) {
            return Collections.emptyList();
        }
        List<T_new> results = new ArrayList<T_new>();
        for (NotifyEntry e : feed.entry) {
            StringBuilder buffer = new StringBuilder();
            if (e.id != null) {
                buffer.append(e.id);
            }
            buffer.append(""@"");
            if (e.updated != null) {
                buffer.append(e.updated.toStringRfc3339().substring(0, 19) + ""Z"");
            }
            Key key = Datastore.createKey(T_new.class, buffer.toString());
            T_new news = new T_new();
            news.setTitle(e.title);
            if (e.content != null) {
                news.setNewText(e.content.substring(0, Math.min(e.content.length(), 500)));
            }
            if (e.status != null && e.content == null) {
                news.setNewText(e.status);
            }
            if (e.updated != null) {
                news.setCreatedAt(new Date(e.updated.value));
            }
            news.setContentUrl(e.getAlternate());
            if (e.author != null) {
                news.setAuthor(e.author.name);
            }
            news.setKey(key);
            results.add(news);
        }
        return results;
    }
"
6966,"    public String hash(String clearPassword) {
        if (osalt == 0) return null;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(""Can't find the SHA1 algorithm in the java.security package"");
        }
        String saltString = String.valueOf(osalt);
        md.update(saltString.getBytes());
        md.update(clearPassword.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString();
        return digestStr;
    }
"
5706,"    protected InputSource loadExternalSdl(String aActualLocation) throws RuntimeException {
        logger.debug(""loadExternalSdl(String) "" + aActualLocation);
        try {
            URL url = new URL(aActualLocation);
            return new InputSource(url.openStream());
        } catch (MalformedURLException e) {
            logger.error(e);
            throw new RuntimeException(aActualLocation + AeMessages.getString(""AeWsdlLocator.ERROR_1""), e);
        } catch (IOException e) {
            logger.error(e);
            throw new RuntimeException(AeMessages.getString(""AeWsdlLocator.ERROR_2"") + aActualLocation, e);
        }
    }
"
6532,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
"
3508,"    public static String encodeString(String encodeType, String str) {
        if (encodeType.equals(""md5of16"")) {
            MD5 m = new MD5();
            return m.getMD5ofStr16(str);
        } else if (encodeType.equals(""md5of32"")) {
            MD5 m = new MD5();
            return m.getMD5ofStr(str);
        } else {
            try {
                MessageDigest gv = MessageDigest.getInstance(encodeType);
                gv.update(str.getBytes());
                return new BASE64Encoder().encode(gv.digest());
            } catch (java.security.NoSuchAlgorithmException e) {
                logger.error(""BASE64加密失败"", e);
                return null;
            }
        }
    }
"
4372,"    public static void copyFile(String fromFilePath, String toFilePath, boolean overwrite) throws IOException {
        File fromFile = new File(fromFilePath);
        File toFile = new File(toFilePath);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFilePath);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFilePath);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFilePath);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!overwrite) {
                throw new IOException(toFilePath + "" already exists!"");
            }
            if (!toFile.canWrite()) {
                throw new IOException(""FileCopy: destination file is unwriteable: "" + toFilePath);
            }
            String parent = toFile.getParent();
            if (parent == null) {
                parent = System.getProperty(""user.dir"");
            }
            File dir = new File(parent);
            if (!dir.exists()) {
                throw new IOException(""FileCopy: destination directory doesn't exist: "" + parent);
            }
            if (dir.isFile()) {
                throw new IOException(""FileCopy: destination is not a directory: "" + parent);
            }
            if (!dir.canWrite()) {
                throw new IOException(""FileCopy: destination directory is unwriteable: "" + parent);
            }
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            long lastModified = fromFile.lastModified();
            toFile.setLastModified(lastModified);
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                }
            }
        }
    }
"
7804,"    private void copyFile(File dir, File fileToAdd) {
        try {
            byte[] readBuffer = new byte[1024];
            File file = new File(dir.getCanonicalPath() + File.separatorChar + fileToAdd.getName());
            if (file.createNewFile()) {
                FileInputStream fis = new FileInputStream(fileToAdd);
                FileOutputStream fos = new FileOutputStream(file);
                int bytesRead;
                do {
                    bytesRead = fis.read(readBuffer);
                    fos.write(readBuffer, 0, bytesRead);
                } while (bytesRead == 0);
                fos.flush();
                fos.close();
                fis.close();
            } else {
                logger.severe(""unable to create file:"" + file.getAbsolutePath());
            }
        } catch (IOException ioe) {
            logger.severe(""unable to create file:"" + ioe);
        }
    }
"
6731,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
1004,"    public String md5(Value request) throws FaultException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(request.strValue().getBytes(""UTF8""));
        } catch (UnsupportedEncodingException e) {
            throw new FaultException(""UnsupportedOperation"", e);
        } catch (NoSuchAlgorithmException e) {
            throw new FaultException(""UnsupportedOperation"", e);
        }
        int radix;
        if ((radix = request.getFirstChild(""radix"").intValue()) < 2) {
            radix = 16;
        }
        return new BigInteger(1, md.digest()).toString(radix);
    }
"
227,"    public void chmod(String remoteFile, String mode) {
        String remotePath = connector.getRemoteDirectory();
        remotePath += PATH_SEPARATOR + remoteFile;
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info(""Connected to "" + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                String parameters = ""chmod "" + mode + "" "" + remotePath;
                ftp.site(parameters);
                ftp.logout();
            }
            ftp.disconnect();
        } catch (SocketException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
"
8422,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
8750,"    String fetch_m3u(String m3u) {
        InputStream pstream = null;
        if (m3u.startsWith(""http://"")) {
            try {
                URL url = null;
                if (running_as_applet) url = new URL(getCodeBase(), m3u); else url = new URL(m3u);
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) break;
            return line;
        }
        return null;
    }
"
9064,"    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }
"
7494,"    public String readURL(URL url) throws JasenException {
        OutputStream out = new ByteArrayOutputStream();
        InputStream in = null;
        String html = null;
        NonBlockingStreamReader reader = null;
        try {
            in = url.openStream();
            reader = new NonBlockingStreamReader();
            reader.read(in, out, readBufferSize, readTimeout, null);
            html = new String(((ByteArrayOutputStream) out).toByteArray());
        } catch (IOException e) {
            throw new JasenException(e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
        return html;
    }
"
6219,"    public static String get(String strUrl) {
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            conn.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""User-Agent:"", ""Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/523.12.2 (KHTML, like Gecko) Version/3.0.4 Safari/523.12.2"");
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += '\n' + s;
            }
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
"
2962,"    public static void unzip(File zipInFile, File outputDir) throws Exception {
        Enumeration<? extends ZipEntry> entries;
        ZipFile zipFile = new ZipFile(zipInFile);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipInFile));
        ZipEntry entry = (ZipEntry) zipInputStream.getNextEntry();
        File curOutDir = outputDir;
        while (entry != null) {
            if (entry.isDirectory()) {
                curOutDir = new File(curOutDir, entry.getName());
                curOutDir.mkdirs();
                continue;
            }
            File outFile = new File(curOutDir, entry.getName());
            File tempDir = outFile.getParentFile();
            if (!tempDir.exists()) tempDir.mkdirs();
            outFile.createNewFile();
            BufferedOutputStream outstream = new BufferedOutputStream(new FileOutputStream(outFile));
            int n;
            byte[] buf = new byte[1024];
            while ((n = zipInputStream.read(buf, 0, 1024)) > -1) outstream.write(buf, 0, n);
            outstream.flush();
            outstream.close();
            zipInputStream.closeEntry();
            entry = zipInputStream.getNextEntry();
        }
        zipInputStream.close();
        zipFile.close();
    }
"
8674,"    public void testManageSources() throws Exception {
        this.getTestTool().manageSources(this.getTestSourcesDirectory());
        this.getTestTool().manageSources(this.getTestTool().getModules().getModule(""Module""), this.getTestSourcesDirectory());
        final File implementationDirectory = this.getTestSourcesDirectory();
        this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
        this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
        final File specificationDirectory = this.getTestSourcesDirectory();
        this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
        this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
        IOUtils.copy(this.getClass().getResourceAsStream(""IllegalImplementationSource.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        IOUtils.copy(this.getClass().getResourceAsStream(""IllegalSpecificationSource.java.txt""), new FileOutputStream(new File(specificationDirectory, ""Specification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e.toString());
        }
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e.toString());
        }
        this.getTestTool().setProfile(""DOES_NOT_EXIST"");
        this.getTestTool().manageSources(this.getTestSourcesDirectory());
        this.getTestTool().manageSources(this.getTestTool().getModules().getModule(""Module""), this.getTestSourcesDirectory());
        this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), this.getTestSourcesDirectory());
        this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), this.getTestSourcesDirectory());
    }
"
2284,"    private static void loadParentProperties(Properties props, ClassLoader cl) throws IOException {
        String pName = props.getProperty(PARENT_PROPERTIES);
        if (pName == null) {
            return;
        }
        URL url = cl.getResource(pName);
        if (url == null) {
            return;
        }
        InputStream is = url.openStream();
        if (is != null) {
            Properties tmpProps = new Properties();
            tmpProps.load(is);
            is.close();
            loadParentProperties(tmpProps, cl);
            Iterator itr = tmpProps.entrySet().iterator();
            while (itr.hasNext()) {
                Map.Entry entry = (Map.Entry) itr.next();
                if (!props.containsKey(entry.getKey())) {
                    props.put(entry.getKey(), entry.getValue());
                }
            }
        }
    }
"
8566,"    public OutputStream getOutputStream() throws IOException {
        try {
            URL url = getURL();
            URLConnection urlc = url.openConnection();
            return urlc.getOutputStream();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
"
6288,"    public AudioFileFormat getAudioFileFormat(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream stream = url.openStream();
        AudioFileFormat format;
        try {
            format = getAudioFileFormat(new BufferedInputStream(stream));
        } finally {
            stream.close();
        }
        return format;
    }
"
2095,"    public static Document tidyHTML(URL url) throws XMLHelperException {
        try {
            URLConnection inConnection = url.openConnection();
            if (inConnection.getContentType().startsWith(""text/xml"") || inConnection.getContentType().startsWith(""text/xhtml"")) {
                return parseXMLFromURL(url);
            } else if (inConnection.getContentType().startsWith(""text/html"")) {
                InputStream is = inConnection.getInputStream();
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                int totalBytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int bytesRead = is.read(buffer, 0, buffer.length);
                    if (bytesRead < 0) break;
                    for (int i = 0; i < bytesRead; i++) {
                        byte b = buffer[i];
                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;
                        buffer[i] = b;
                    }
                    out.write(buffer, 0, bytesRead);
                    totalBytes += bytesRead;
                }
                is.close();
                out.close();
                String outContent = out.toString();
                InputStream in = new ByteArrayInputStream(out.toByteArray());
                Tidy tidy = new Tidy();
                tidy.setShowWarnings(false);
                tidy.setXmlOut(true);
                tidy.setXmlPi(false);
                tidy.setDocType(""omit"");
                tidy.setXHTML(false);
                tidy.setRawOut(true);
                tidy.setNumEntities(true);
                tidy.setQuiet(true);
                tidy.setFixComments(true);
                tidy.setIndentContent(true);
                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);
                String result = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex = result.indexOf(""<!DOCTYPE"")) >= 0) {
                    endIndex = result.indexOf("">"", startIndex);
                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());
                }
                while ((startIndex = result.indexOf(""<script"")) >= 0) {
                    endIndex = result.indexOf(""</script>"");
                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());
                }
                in.close();
                baos.close();
                return parseXMLFromString(result);
            } else {
                throw new XMLHelperException(""Unable to tidy content type: "" + inConnection.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException(""Unable to perform input/output"", ioe);
        }
    }
"
7224,"    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty(""Content-Type"", ""text/xml"");
        urlConn.setRequestProperty(""charset"", ""utf-8"");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = ""<commit/>"";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
"
3636,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
"
4229,"    public static void gunzip(File gzippedFile, File destinationFile) throws IOException {
        int buffer = 2048;
        FileInputStream in = new FileInputStream(gzippedFile);
        GZIPInputStream zipin = new GZIPInputStream(in);
        byte[] data = new byte[buffer];
        FileOutputStream out = new FileOutputStream(destinationFile);
        int length;
        while ((length = zipin.read(data, 0, buffer)) != -1) out.write(data, 0, length);
        out.close();
        zipin.close();
    }
"
4139,"    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.main);
        try {
            URL url = new URL(""http://placekitten.com/g/500/250"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoInput(true);
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            Bitmap kitten = BitmapFactory.decodeStream(conn.getInputStream());
            conn.disconnect();
            Bitmap frame = BitmapFactory.decodeResource(getResources(), R.drawable.frame500);
            Bitmap output = Bitmap.createBitmap(frame.getWidth(), frame.getHeight(), Bitmap.Config.ARGB_8888);
            output.eraseColor(Color.BLACK);
            Canvas canvas = new Canvas(output);
            canvas.drawBitmap(kitten, 125, 125, new Paint());
            canvas.drawBitmap(frame, 0, 0, new Paint());
            Paint textPaint = new Paint();
            textPaint.setColor(Color.WHITE);
            textPaint.setTypeface(Typeface.create(Typeface.SERIF, Typeface.BOLD));
            textPaint.setTextAlign(Align.CENTER);
            textPaint.setAntiAlias(true);
            textPaint.setTextSize(36);
            canvas.drawText(""Cute"", output.getWidth() / 2, (output.getHeight() / 2) + 140, textPaint);
            textPaint.setTextSize(24);
            canvas.drawText(""Some of us just haz it."", output.getWidth() / 2, (output.getHeight() / 2) + 180, textPaint);
            ImageView imageView = (ImageView) this.findViewById(R.id.imageView);
            imageView.setImageBitmap(output);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
"
7510,"    private void createNodes() {
        try {
            URL url = this.getClass().getResource(""NodesFile.txt"");
            InputStreamReader inReader = new InputStreamReader(url.openStream());
            BufferedReader inNodes = new BufferedReader(inReader);

            // BufferedReader inNodes = new BufferedReader(new
            // FileReader(""NodesFile.txt""));
            String s;
            while ((s = inNodes.readLine()) != null) {
                String label = inNodes.readLine();
                String fullText = inNodes.readLine();
                String type = inNodes.readLine();
                Node n = new Node(s, type);
                n.label = label;
                n.fullText = fullText;
                node.add(n);
            }
            inNodes.close();

            url = this.getClass().getResource(""EdgesFile.txt"");
            inReader = new InputStreamReader(url.openStream());
            BufferedReader inEdges = new BufferedReader(inReader);
            // BufferedReader inEdges = new BufferedReader(new
            // FileReader(""EdgesFile.txt""));
            while ((s = inEdges.readLine()) != null)
                edge.add(new Edge(s, inEdges.readLine(), inEdges.readLine(),
                        inEdges.readLine()));
            inEdges.close();
        } catch (FileNotFoundException e) {
            // TODO ?????? catch ??
            e.printStackTrace();
        } catch (IOException e) {
            // TODO ?????? catch ??
            e.printStackTrace();
        }
        /*
         * for(Myparser.Nd x:FreeConnectTest.pNd){ Node n = new Node(x.id,
         * x.type); n.label = x.label; node.add(n); } for(Myparser.Ed
         * x:FreeConnectTest.pEd) edge.add(new Edge(x.id, x.source.id,
         * x.target.id));
         */
    }
"
4978,"    Object onSuccess() {
        this.mErrorExist = true;
        this.mErrorMdp = true;
        if (this.mNewMail.equals(mClient.getEmail()) || !this.mNewMail.equals(mClient.getEmail()) && !mClientManager.exists(this.mNewMail)) {
            this.mErrorExist = false;
            if (mNewMdp != null && mNewMdpConfirm != null) {
                if (this.mNewMdp.equals(this.mNewMdpConfirm)) {
                    this.mErrorMdp = false;
                    MessageDigest sha1Instance;
                    try {
                        sha1Instance = MessageDigest.getInstance(""SHA1"");
                        sha1Instance.reset();
                        sha1Instance.update(this.mNewMdp.getBytes());
                        byte[] digest = sha1Instance.digest();
                        BigInteger bigInt = new BigInteger(1, digest);
                        String vHashPassword = bigInt.toString(16);
                        mClient.setMdp(vHashPassword);
                    } catch (NoSuchAlgorithmException e) {
                        mLogger.error(e.getMessage(), e);
                    }
                }
            } else {
                this.mErrorMdp = false;
            }
            if (!this.mErrorMdp) {
                mClient.setAdresse(this.mNewAdresse);
                mClient.setEmail(this.mNewMail);
                mClient.setNom(this.mNewNom);
                mClient.setPrenom((this.mNewPrenom != null ? this.mNewPrenom : """"));
                Client vClient = new Client(mClient);
                mClientManager.save(vClient);
                mComponentResources.discardPersistentFieldChanges();
                return ""Client/List"";
            }
        }
        return errorZone.getBody();
    }
"
7039,"    public synchronized void run() {
        logger.info(""SEARCH STARTED"");
        JSONObject json = null;
        logger.info(""Opening urlConnection"");
        URLConnection connection = null;
        try {
            connection = url.openConnection();
            connection.addRequestProperty(""Referer"", HTTP_REFERER);
        } catch (IOException e) {
            logger.warn(""PROBLEM CONTACTING GOOGLE"");
            e.printStackTrace();
        }
        String line;
        StringBuilder builder = new StringBuilder();
        BufferedReader reader;
        try {
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
        } catch (IOException e) {
            logger.warn(""PROBLEM RETREIVING DATA FROM GOOGLE"");
            e.printStackTrace();
        }
        logger.info(""Google RET: "" + builder.toString());
        try {
            json = new JSONObject(builder.toString());
            json.append(""query"", q);
        } catch (JSONException e) {
            logger.warn(""PROBLEM RETREIVING DATA FROM GOOGLE"");
            e.printStackTrace();
        }
        sc.onSearchFinished(json);
    }
"
5199,"    public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
"
4924,"    private void copy(String imgPath, String path) {
        try {
            File input = new File(imgPath);
            File output = new File(path, input.getName());
            if (output.exists()) {
                if (!MessageDialog.openQuestion(getShell(), ""Overwrite"", ""There is already an image file "" + input.getName() + "" under the package.\n Do you really want to overwrite it?"")) return;
            }
            byte[] data = new byte[1024];
            FileInputStream fis = new FileInputStream(imgPath);
            BufferedInputStream bis = new BufferedInputStream(fis);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(output));
            int length;
            while ((length = bis.read(data)) > 0) {
                bos.write(data, 0, length);
                bos.flush();
            }
            bos.close();
            fis.close();
            IJavaProject ijp = VisualSwingPlugin.getCurrentProject();
            if (ijp != null) {
                ijp.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);
                view.refresh();
                view.expandAll();
            }
        } catch (Exception e) {
            VisualSwingPlugin.getLogger().error(e);
        }
    }
"
3761,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
"
9082,"    protected static String stringOfUrl(String addr) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        URL url = new URL(addr);
        URLConnection c = url.openConnection();
        c.setConnectTimeout(2000);
        IOUtils.copy(c.getInputStream(), output);
        return output.toString();
    }
"
9046,"    private boolean checkHashBack(Facade facade, HttpServletRequest req) {
        String txtTransactionID = req.getParameter(""txtTransactionID"");
        String txtOrderTotal = req.getParameter(""txtOrderTotal"");
        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String txtHashBack = req.getParameter(""txtHashBack"");
        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(securityValue.getBytes());
            byte[] array = digest.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            String hash = sb.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);
            if (txtHashBack.equals(hash)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
"
6005,"    public void adicionaCliente(ClienteBean cliente) {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        String sql = ""insert into cliente(nome,cpf,telefone,cursoCargo,bloqueado,ativo,tipo) values(?,?,?,?,?,?,?)"";
        try {
            pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, cliente.getNome());
            pstmt.setString(2, cliente.getCPF());
            pstmt.setString(3, cliente.getTelefone());
            pstmt.setString(4, cliente.getCursoCargo());
            pstmt.setString(5, cliente.getBloqueado());
            pstmt.setString(6, cliente.getAtivo());
            pstmt.setString(7, cliente.getTipo());
            pstmt.executeUpdate();
            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                cliente.setIdCliente(rs.getLong(1));
            }
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (SQLException ex1) {
                throw new RuntimeException(""Erro ao inserir cliente."", ex1);
            }
            throw new RuntimeException(""Erro ao inserir cliente."", ex);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
            } catch (SQLException ex) {
                throw new RuntimeException(""Ocorreu um erro no banco de dados."", ex);
            }
        }
    }
"
4911,"    public void filter(File source, File destination, MNamespace mNamespace) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(source));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destination));
        int line = 0;
        int column = 0;
        Stack parseStateStack = new Stack();
        parseStateStack.push(new ParseState(mNamespace));
        for (Iterator i = codePieces.iterator(); i.hasNext(); ) {
            NamedCodePiece cp = (NamedCodePiece) i.next();
            while (line < cp.getStartLine()) {
                line++;
                column = 0;
                writer.write(reader.readLine());
                writer.newLine();
            }
            while (column < cp.getStartPosition()) {
                writer.write(reader.read());
                column++;
            }
            cp.write(writer, parseStateStack, column);
            while (line < cp.getEndLine()) {
                line++;
                column = 0;
                reader.readLine();
            }
            while (column < cp.getEndPosition()) {
                column++;
                reader.read();
            }
        }
        String data;
        while ((data = reader.readLine()) != null) {
            writer.write(data);
            writer.newLine();
        }
        reader.close();
        writer.close();
    }
"
9005,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            from.close();
            to.close();
        }
    }
"
4277,"    public ActionForward dbExecute(ActionMapping pMapping, ActionForm pForm, HttpServletRequest pRequest, HttpServletResponse pResponse) throws DatabaseException {
        String email = pRequest.getParameter(""email"");
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new DatabaseException(""Could not hash password for storage: no such algorithm"");
        }
        md.update(pRequest.getParameter(""password"").getBytes());
        String password = (new BASE64Encoder()).encode(md.digest());
        String remember = pRequest.getParameter(""rememberLogin"");
        User user = database.acquireUserByEmail(email);
        if (user == null || user.equals(User.anonymous()) || !user.getActive()) {
            return pMapping.findForward(""invalid"");
        } else if (user.getPassword().equals(password)) {
            pRequest.getSession().setAttribute(""login"", user);
            if (remember != null) {
                Cookie usercookie = new Cookie(""bib.username"", email);
                Cookie passcookie = new Cookie(""bib.password"", password.toString());
                usercookie.setPath(""/"");
                passcookie.setPath(""/"");
                usercookie.setMaxAge(60 * 60 * 24 * 365);
                passcookie.setMaxAge(60 * 60 * 24 * 365);
                pResponse.addCookie(usercookie);
                pResponse.addCookie(passcookie);
            }
            return pMapping.findForward(""success"");
        } else {
            return pMapping.findForward(""invalid"");
        }
    }
"
4098,"    @Override
    public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException {
        validateUserIsSignedOn(authToken);
        validateUserHasAdminRights(authToken);
        DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>();
        if (record != null) {
            Connection connection = null;
            boolean archived = false;
            try {
                long userId = getSignedOnUser(authToken).getUserId();
                connection = DatabaseConnector.getConnection();
                connection.setAutoCommit(false);
                recordUpdateResult.setMessage(messages.server_record_delete_success(""""));
                recordUpdateResult.setSuccessful(true);
                String sql = ""update tms.records set archivedtimestamp = now() where recordid = ?"";
                PreparedStatement updateRecord = connection.prepareStatement(sql);
                updateRecord.setLong(1, record.getRecordid());
                int recordArchived = 0;
                recordArchived = updateRecord.executeUpdate();
                if (recordArchived > 0) AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession());
                TopicUpdateServiceImpl.archiveRecordTopics(connection, record.getTopics(), record.getRecordid());
                ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes();
                if (recordAttributes != null && recordAttributes.size() > 0) {
                    Iterator<RecordAttribute> rItr = recordAttributes.iterator();
                    while (rItr.hasNext()) {
                        RecordAttribute r = rItr.next();
                        String rAtSql = ""update tms.recordattributes set archivedtimestamp = now() where recordattributeid = ?"";
                        PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql);
                        updateRecordAttribute.setLong(1, r.getRecordattributeid());
                        int recordAttribArchived = 0;
                        recordAttribArchived = updateRecordAttribute.executeUpdate();
                        if (recordAttribArchived > 0) AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession());
                    }
                }
                ArrayList<Term> terms = record.getTerms();
                Iterator<Term> termsItr = terms.iterator();
                while (termsItr.hasNext()) {
                    Term term = termsItr.next();
                    TermUpdater.archiveTerm(connection, term, userId, authToken, getSession());
                }
                connection.commit();
                archived = true;
                if (filter != null) RecordIdTracker.refreshRecordIdsInSessionByFilter(this.getThreadLocalRequest().getSession(), connection, true, filter, sourceField, authToken); else RecordIdTracker.refreshRecordIdsInSession(this.getThreadLocalRequest().getSession(), connection, false, authToken);
                RecordRetrievalServiceImpl retriever = new RecordRetrievalServiceImpl();
                RecordIdTracker.refreshRecordIdsInSession(this.getThreadLocalRequest().getSession(), connection, false, authToken);
                Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), this.getThreadLocalRequest().getSession(), false, inputmodel, authToken);
                recordUpdateResult.setResult(updatedRecord);
            } catch (Exception e) {
                if (!archived && connection != null) {
                    try {
                        connection.rollback();
                    } catch (SQLException e1) {
                        LogUtility.log(Level.SEVERE, getSession(), messages.log_db_rollback(""""), e1, authToken);
                        e1.printStackTrace();
                    }
                }
                recordUpdateResult.setFailed(true);
                if (archived) {
                    recordUpdateResult.setMessage(messages.server_record_delete_retrieve(""""));
                    recordUpdateResult.setException(e);
                    LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_retrieve(""""), e, authToken);
                } else {
                    recordUpdateResult.setMessage(messages.server_record_delete_fail(""""));
                    recordUpdateResult.setException(new PersistenceException(e));
                    LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_fail(""""), e, authToken);
                }
                GWT.log(recordUpdateResult.getMessage(), e);
            } finally {
                try {
                    if (connection != null) {
                        connection.setAutoCommit(true);
                        connection.close();
                    }
                } catch (Exception e) {
                    LogUtility.log(Level.SEVERE, getSession(), messages.log_db_close(""""), e, authToken);
                }
            }
        }
        return recordUpdateResult;
    }
"
5576,"            @Override
            protected String doInBackground(Location... params) {
                if (params == null || params.length == 0 || params[0] == null) {
                    return null;
                }
                Location location = params[0];
                String address = """";
                String cachedAddress = DataService.GetInstance(mContext).getAddressFormLocationCache(location.getLatitude(), location.getLongitude());
                if (!TextUtils.isEmpty(cachedAddress)) {
                    address = cachedAddress;
                } else {
                    StringBuilder jsonText = new StringBuilder();
                    HttpClient client = new DefaultHttpClient();
                    String url = String.format(GoogleMapAPITemplate, location.getLatitude(), location.getLongitude());
                    HttpGet httpGet = new HttpGet(url);
                    try {
                        HttpResponse response = client.execute(httpGet);
                        StatusLine statusLine = response.getStatusLine();
                        int statusCode = statusLine.getStatusCode();
                        if (statusCode == 200) {
                            HttpEntity entity = response.getEntity();
                            InputStream content = entity.getContent();
                            BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                            String line;
                            while ((line = reader.readLine()) != null) {
                                jsonText.append(line);
                            }
                            JSONObject result = new JSONObject(jsonText.toString());
                            String status = result.getString(GoogleMapStatusSchema.status);
                            if (GoogleMapStatusCodes.OK.equals(status)) {
                                JSONArray addresses = result.getJSONArray(GoogleMapStatusSchema.results);
                                if (addresses.length() > 0) {
                                    address = addresses.getJSONObject(0).getString(GoogleMapStatusSchema.formatted_address);
                                    if (!TextUtils.isEmpty(currentBestLocationAddress)) {
                                        DataService.GetInstance(mContext).updateAddressToLocationCache(location.getLatitude(), location.getLongitude(), currentBestLocationAddress);
                                    }
                                }
                            }
                        } else {
                            Log.e(""Error"", ""Failed to get address via google map API."");
                        }
                    } catch (ClientProtocolException e) {
                        e.printStackTrace();
                        Toast.makeText(mContext, ""Failed to get location."", Toast.LENGTH_SHORT).show();
                    } catch (IOException e) {
                        Toast.makeText(mContext, ""Failed to get location."", Toast.LENGTH_SHORT).show();
                    } catch (JSONException e) {
                        Toast.makeText(mContext, ""Failed to get location."", Toast.LENGTH_SHORT).show();
                    }
                }
                return address;
            }
"
4299,"    private void saveCampaign() throws HeadlessException {
        try {
            dbConnection.setAutoCommit(false);
            dbConnection.setSavepoint();
            String sql = ""UPDATE campaigns SET "" + ""queue = ? ,"" + ""adjustRatioPeriod = ?, "" + ""asterisk = ?, "" + ""context = ?,"" + ""extension = ?, "" + ""dialContext = ?, "" + ""dialPrefix = ?,"" + ""dialTimeout = ?, "" + ""dialingMethod = ?,"" + ""dialsPerFreeResourceRatio = ?, "" + ""maxIVRChannels = ?, "" + ""maxDialingThreads = ?,"" + ""maxDialsPerFreeResourceRatio = ?,"" + ""minDialsPerFreeResourceRatio = ?, "" + ""maxTries = ?, "" + ""firstRetryAfterMinutes = ?,"" + ""secondRetryAfterMinutes = ?, "" + ""furtherRetryAfterMinutes = ?, "" + ""startDate = ?, "" + ""endDate = ?,"" + ""popUpURL = ?, "" + ""contactBatchSize = ?, "" + ""retriesBatchPct = ?, "" + ""reschedulesBatchPct = ?, "" + ""allowReschedule = ?, "" + ""rescheduleToOnself = ?, "" + ""script = ?,"" + ""agentsCanUpdateContacts = ?, "" + ""hideContactFields = ?, "" + ""afterCallWork = ?, "" + ""reserveAvailableAgents = ?, "" + ""useDNCList = ?, "" + ""enableAgentDNC = ?, "" + ""contactsFilter = ?, "" + ""DNCTo = ?,"" + ""callRecordingPolicy = ?, "" + ""callRecordingPercent = ?, "" + ""callRecordingMaxAge = ?, "" + ""WHERE name = ?"";
            PreparedStatement statement = dbConnection.prepareStatement(sql);
            int i = 1;
            statement.setString(i++, txtQueue.getText());
            statement.setInt(i++, Integer.valueOf(txtAdjustRatio.getText()));
            statement.setString(i++, """");
            statement.setString(i++, txtContext.getText());
            statement.setString(i++, txtExtension.getText());
            statement.setString(i++, txtDialContext.getText());
            statement.setString(i++, txtDialPrefix.getText());
            statement.setInt(i++, 30000);
            statement.setInt(i++, cboDialingMethod.getSelectedIndex());
            statement.setFloat(i++, Float.valueOf(txtInitialDialingRatio.getText()));
            statement.setInt(i++, Integer.valueOf(txtMaxIVRChannels.getText()));
            statement.setInt(i++, Integer.valueOf(txtDialLimit.getText()));
            statement.setFloat(i++, Float.valueOf(txtMaxDialingRatio.getText()));
            statement.setFloat(i++, Float.valueOf(txtMinDialingRatio.getText()));
            statement.setInt(i++, Integer.valueOf(txtMaxRetries.getText()));
            statement.setInt(i++, Integer.valueOf(txtFirstRetry.getText()));
            statement.setInt(i++, Integer.valueOf(txtSecondRetry.getText()));
            statement.setInt(i++, Integer.valueOf(txtFurtherRetries.getText()));
            statement.setDate(i++, Date.valueOf(txtStartDate.getText()));
            statement.setDate(i++, Date.valueOf(txtEndDate.getText()));
            statement.setString(i++, txtURL.getText());
            statement.setInt(i++, Integer.valueOf(txtContactBatchSize.getText()));
            statement.setInt(i++, Integer.valueOf(txtRetryBatchPct.getText()));
            statement.setInt(i++, Integer.valueOf(txtRescheduleBatchPct.getText()));
            statement.setInt(i++, chkAgentCanReschedule.isSelected() ? 1 : 0);
            statement.setInt(i++, chkAgentCanRescheduleSelf.isSelected() ? 1 : 0);
            statement.setString(i++, txtScript.getText());
            statement.setInt(i++, chkAgentCanUpdateContacts.isSelected() ? 1 : 0);
            statement.setString(i++, """");
            statement.setInt(i++, Integer.valueOf(txtACW.getText()));
            statement.setInt(i++, Integer.valueOf(txtReserveAgents.getText()));
            statement.setInt(i++, cboDNCListPreference.getSelectedIndex());
            statement.setInt(i++, 1);
            statement.setString(i++, """");
            statement.setInt(i++, 0);
            statement.setInt(i++, cboRecordingPolicy.getSelectedIndex());
            statement.setInt(i++, Integer.valueOf(txtRecordingPct.getText()));
            statement.setInt(i++, Integer.valueOf(txtRecordingMaxAge.getText()));
            statement.setString(i++, campaign);
            statement.executeUpdate();
            dbConnection.commit();
        } catch (SQLException ex) {
            try {
                dbConnection.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(this.getRootPane(), ex.getLocalizedMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex);
        }
    }
"
1398,"    private void resourceDirectoryCopy(String resource, IProject project, String target, IProgressMonitor monitor) throws URISyntaxException, IOException, CoreException {
        if (!target.endsWith(""/"")) {
            target += ""/"";
        }
        String res = resource;
        if (!res.endsWith(""/"")) ;
        {
            res += ""/"";
        }
        Enumeration<URL> it = bundle.findEntries(resource, ""*"", false);
        while (it.hasMoreElements()) {
            URL url = it.nextElement();
            File f = new File(FileLocator.toFileURL(url).toURI());
            String fName = f.getName();
            boolean skip = false;
            for (String skiper : skipList) {
                if (fName.equals(skiper)) {
                    skip = true;
                    break;
                }
            }
            if (skip) {
                continue;
            }
            String targetName = target + fName;
            if (f.isDirectory()) {
                IFolder folder = project.getFolder(targetName);
                if (!folder.exists()) {
                    folder.create(true, true, monitor);
                }
                resourceDirectoryCopy(res + f.getName(), project, targetName, monitor);
            } else if (f.isFile()) {
                IFile targetFile = project.getFile(targetName);
                InputStream is = null;
                try {
                    is = url.openStream();
                    if (targetFile.exists()) {
                        targetFile.setContents(is, true, false, monitor);
                    } else {
                        targetFile.create(is, true, monitor);
                    }
                } catch (Exception e) {
                    throw new IOException(e);
                } finally {
                    if (is != null) {
                        is.close();
                    }
                }
            }
        }
    }
"
135,"    private void processHelpFile() {
        InputStream in = null;
        if (line.hasOption(""helpfile"")) {
            OutputStream out = null;
            try {
                String filename = line.getOptionValue(""helpfile"");
                in = new FileInputStream(filename);
                filename = filename.replace('\\', '/');
                filename = filename.substring(filename.lastIndexOf('/') + 1);
                File outFile = new File(outputDir, filename);
                if (LOG.isInfoEnabled()) {
                    LOG.info(""Processing generated file "" + outFile.getAbsolutePath());
                }
                out = new FileOutputStream(outFile);
                baseProperties.setProperty(""helpfile"", filename);
                IOUtils.copy(in, out);
            } catch (FileNotFoundException e) {
                LOG.error(e.getMessage(), e);
            } catch (IOException e) {
                LOG.error(e.getMessage(), e);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e) {
                        LOG.error(e.getMessage(), e);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e) {
                        LOG.error(e.getMessage(), e);
                    }
                }
            }
            return;
        }
        Properties props = new Properties(baseProperties);
        ClassLoader cl = this.getClass().getClassLoader();
        Document doc = null;
        try {
            in = cl.getResourceAsStream(RESOURCE_PKG + ""/help-doc.xml"");
            doc = XmlUtils.parse(in);
        } catch (XmlException e) {
            LOG.error(e.getMessage(), e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                }
            }
        }
        transformResource(doc, ""help-doc.xsl"", props, ""help-doc.html"");
        baseProperties.setProperty(""helpfile"", ""help-doc.html"");
    }
"
4006,"    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
"
6334,"    public static void logout4www() throws NetworkException {
        HttpClient client = HttpUtil.newInstance();
        HttpGet get = new HttpGet(HttpUtil.KAIXIN_WWW_LOGOUT_URL);
        HttpUtil.setHeader(get);
        try {
            HttpResponse response = client.execute(get);
            if (response != null && response.getEntity() != null) {
                HTTPUtil.consume(response.getEntity());
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
"
5319,"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
"
806,"    public static String generateStringSHA256(String content) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ScannerChecksum.class.getName()).log(Level.SEVERE, null, ex);
        }
        md.update(content.getBytes());
        byte byteData[] = md.digest();
        @SuppressWarnings(""StringBufferMayBeStringBuilder"") StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        @SuppressWarnings(""StringBufferMayBeStringBuilder"") StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
"
972,"    public Program updateProgramPath(int id, String sourcePath) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""UPDATE Programs SET "" + ""sourcePath = '"" + sourcePath + ""' "" + ""WHERE id = "" + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * from Programs WHERE id = "" + id;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to update program failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in updateProgramPath"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
"
6015,"    void load(URL url) throws IOException {
        BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()));
        Vector3f scale = new Vector3f(1, 1, 1);
        Group currentGroup = new Group();
        currentGroup.name = ""default"";
        groups.add(currentGroup);
        String line;
        while ((line = r.readLine()) != null) {
            String[] params = line.split("" +"");
            if (params.length == 0) continue;
            String command = params[0];
            if (params[0].equals(""v"")) {
                Vector3f vertex = new Vector3f(Float.parseFloat(params[1]) * scale.x, Float.parseFloat(params[2]) * scale.y, Float.parseFloat(params[3]) * scale.z);
                verticies.add(vertex);
                radius = Math.max(radius, vertex.length());
            }
            if (command.equals(""center"")) {
                epicenter = new Vector3f(Float.parseFloat(params[1]), Float.parseFloat(params[2]), Float.parseFloat(params[3]));
            } else if (command.equals(""f"")) {
                Face f = new Face();
                for (int i = 1; i < params.length; i++) {
                    String parts[] = params[i].split(""/"");
                    Vector3f v = verticies.get(Integer.parseInt(parts[0]) - 1);
                    f.add(v);
                }
                currentGroup.faces.add(f);
            } else if (command.equals(""l"")) {
                Line l = new Line();
                for (int i = 1; i < params.length; i++) {
                    Vector3f v = verticies.get(Integer.parseInt(params[i]) - 1);
                    l.add(v);
                }
                currentGroup.lines.add(l);
            } else if (command.equals(""g"") && params.length > 1) {
                currentGroup = new Group();
                currentGroup.name = params[1];
                groups.add(currentGroup);
            } else if (command.equals(""scale"")) {
                scale = new Vector3f(Float.parseFloat(params[1]), Float.parseFloat(params[2]), Float.parseFloat(params[3]));
            }
        }
        r.close();
    }
"
6843,"    protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {
        HttpPost request = new HttpPost(serviceUri);
        HttpParams params = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());
        HttpConnectionParams.setSoTimeout(params, getSoTimeout());
        HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);
        request.setParams(params);
        request.addHeader(""Authorization"", ""Basic "" + Base64Coder.encodeString(serviceUser + "":"" + servicePass));
        HttpEntity entity;
        try {
            entity = new JSONEntity(jsonRequest);
        } catch (UnsupportedEncodingException e1) {
            throw new JSONRPCException(""Unsupported encoding"", e1);
        }
        request.setEntity(entity);
        try {
            long t = System.currentTimeMillis();
            HttpResponse response = httpClient.execute(request);
            t = System.currentTimeMillis() - t;
            Log.d(""json-rpc"", ""Request time :"" + t);
            String responseString = EntityUtils.toString(response.getEntity());
            responseString = responseString.trim();
            JSONObject jsonResponse = new JSONObject(responseString);
            if (jsonResponse.has(""error"")) {
                Object jsonError = jsonResponse.get(""error"");
                if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get(""error""));
                return jsonResponse;
            } else {
                return jsonResponse;
            }
        } catch (ClientProtocolException e) {
            throw new JSONRPCException(""HTTP error"", e);
        } catch (IOException e) {
            throw new JSONRPCException(""IO error"", e);
        } catch (JSONException e) {
            throw new JSONRPCException(""Invalid JSON response"", e);
        }
    }
"
2660,"    private void copy(File sourceFile, File destinationFile) {
        try {
            FileChannel in = new FileInputStream(sourceFile).getChannel();
            FileChannel out = new FileOutputStream(destinationFile).getChannel();
            try {
                in.transferTo(0, in.size(), out);
                in.close();
                out.close();
            } catch (IOException e) {
                GTLogger.getInstance().error(e);
            }
        } catch (FileNotFoundException e) {
            GTLogger.getInstance().error(e);
        }
    }
"
322,"    private PropertiesLoader(String masterFileLocation, String extraFileLocation) throws IOException {
        List propertiesList = new ArrayList();
        ClassLoader classLoader = this.getClass().getClassLoader();
        try {
            InputStream is = classLoader.getResourceAsStream(masterFileLocation);
            Properties p = new Properties();
            p.load(is);
            is.close();
            propertiesList.add(p);
        } catch (IOException ioex) {
            IOException ex = new IOException(""could not load ROME master plugins file ["" + masterFileLocation + ""], "" + ioex.getMessage());
            ex.setStackTrace(ioex.getStackTrace());
            throw ex;
        }
        Enumeration urls = classLoader.getResources(extraFileLocation);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            Properties p = new Properties();
            try {
                InputStream is = url.openStream();
                p.load(is);
                is.close();
            } catch (IOException ioex) {
                IOException ex = new IOException(""could not load ROME extensions plugins file ["" + url.toString() + ""], "" + ioex.getMessage());
                ex.setStackTrace(ioex.getStackTrace());
                throw ex;
            }
            propertiesList.add(p);
        }
        _properties = new Properties[propertiesList.size()];
        propertiesList.toArray(_properties);
    }
"
2235,"    private void getViolationsReportByProductOfferIdYearMonth() throws IOException {
        String xmlFile8Send = System.getenv(""SLASOI_HOME"") + System.getProperty(""file.separator"") + ""Integration"" + System.getProperty(""file.separator"") + ""soap"" + System.getProperty(""file.separator"") + ""getViolationsReportByProductOfferIdYearMonth.xml"";
        URL url8;
        url8 = new URL(bmReportingWSUrl);
        URLConnection connection8 = url8.openConnection();
        HttpURLConnection httpConn8 = (HttpURLConnection) connection8;
        FileInputStream fin8 = new FileInputStream(xmlFile8Send);
        ByteArrayOutputStream bout8 = new ByteArrayOutputStream();
        SOAPClient4XG.copy(fin8, bout8);
        fin8.close();
        byte[] b8 = bout8.toByteArray();
        httpConn8.setRequestProperty(""Content-Length"", String.valueOf(b8.length));
        httpConn8.setRequestProperty(""Content-Type"", ""application/soap+xml; charset=UTF-8"");
        httpConn8.setRequestProperty(""SOAPAction"", soapAction);
        httpConn8.setRequestMethod(""POST"");
        httpConn8.setDoOutput(true);
        httpConn8.setDoInput(true);
        OutputStream out8 = httpConn8.getOutputStream();
        out8.write(b8);
        out8.close();
        InputStreamReader isr8 = new InputStreamReader(httpConn8.getInputStream());
        BufferedReader in8 = new BufferedReader(isr8);
        String inputLine8;
        StringBuffer response8 = new StringBuffer();
        while ((inputLine8 = in8.readLine()) != null) {
            response8.append(inputLine8);
        }
        in8.close();
        System.out.println(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"" + ""####################################################"" + ""#################################################\n"" + ""####################################################"" + ""#################################################\n"" + ""Component Name: Business Manager\n"" + ""Interface Name: getReport\n"" + ""Operation Name:"" + ""getViolationsReportByProductOfferIdYearMonth\n"" + ""Input"" + ""ProductOfferID-1\n"" + ""PartyID-1\n"" + ""\n"" + ""####################################################"" + ""#################################################\n"" + ""####################################################"" + ""#################################################\n"" + ""######################################## RESPONSE"" + ""############################################\n\n"");
        System.out.println(""--------------------------------"");
        System.out.println(""Response\n"" + response8.toString());
    }
"
4073,"    public static void fileCopy(File sourceFile, File destFile) throws IOException {
        FileChannel source = null;
        FileChannel destination = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(destFile);
            source = fis.getChannel();
            destination = fos.getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            fis.close();
            fos.close();
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
"
4620,"    public static void kopirujSoubor(File vstup, File vystup) throws IOException {
        FileChannel sourceChannel = new FileInputStream(vstup).getChannel();
        FileChannel destinationChannel = new FileOutputStream(vystup).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
"
8492,"        @Override
        protected void copyContent(String filename) throws IOException {
            InputStream in = null;
            try {
                String resourceDir = System.getProperty(""resourceDir"");
                File resource = new File(resourceDir, filename);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                if (resource.exists()) {
                    in = new FileInputStream(resource);
                } else {
                    in = LOADER.getResourceAsStream(RES_PKG + filename);
                }
                IOUtils.copy(in, out);
                setResponseData(out.toByteArray());
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        }
"
8210,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
"
8976,"    public static void parseConfigV2(List rootList, InputStream is, javax.servlet.ServletContext context, List configFileList) throws Exception {
        URL configUrl = CompositePageUtil.class.getResource(""/cuttleConfigurationV2.xml"");
        if (configUrl == null) configUrl = CompositePageUtil.class.getClassLoader().getResource(""/cuttleConfigurationV2.xml"");
        URL dtdUrl = CompositePageUtil.class.getResource(""/dtd/cuttleConfiguration.dtd"");
        if (dtdUrl == null) dtdUrl = CompositePageUtil.class.getClassLoader().getResource(""/dtd/cuttleConfiguration.dtd"");
        Digester digester = DigesterLoader.createDigester(configUrl);
        digester.setValidating(false);
        digester.register(""-//Cuttle MVC Framework//DTD Cuttle Configuration 1.0//EN"", dtdUrl.toString());
        XMLCuttleConfiguration cuttleConfiguration = (XMLCuttleConfiguration) digester.parse(is);
        ConfigureDigester.setXmlCuttleConfiguration(cuttleConfiguration);
        if (configFileList != null) {
            for (int i = 0; i < configFileList.size(); i++) {
                String file = (String) configFileList.get(i);
                URL url2 = CompositePageUtil.class.getResource(file);
                if (url2 == null) url2 = CompositePageUtil.class.getClassLoader().getResource(file);
                if (url2 == null) {
                    logger.error(""file path:"" + file + "" not found!"");
                }
                XMLRoot root = (XMLRoot) ConfigureDigester.parseXMLToObject(url2.openStream());
                rootList.add(root);
            }
        } else {
            for (int i = 0; i < cuttleConfiguration.getActionConfigs().size(); i++) {
                XMLActionConfig config = (XMLActionConfig) cuttleConfiguration.getActionConfigs().get(i);
                URL url2 = context.getResource(config.getResource());
                if (url2 == null) {
                    logger.error(""file path:"" + config.getResource() + "" not found!"");
                }
                XMLRoot root = (XMLRoot) ConfigureDigester.parseXMLToObject(url2.openStream());
                rootList.add(root);
            }
        }
        compositeXMLRoot(rootList);
        XMLCuttleConfiguration config = ConfigureDigester.getXmlCuttleConfiguration();
        if (config != null) {
            List processUnits = config.getProcessUnits();
            if (processUnits != null) {
                for (int i = 0; i < processUnits.size(); i++) {
                    XMLProcessUnit processUnit = (XMLProcessUnit) processUnits.get(i);
                    if (processUnit.getSpringMapping() == null || processUnit.getSpringMapping().equals("""")) {
                        Class businessClass = Class.forName(processUnit.getClazz());
                        Object business = businessClass.newInstance();
                        ConfigureDigester.addObjectToPool(business);
                    }
                }
            }
        }
    }
"
7446,"    public boolean downloadNextTLE() {
        boolean success = true;
        if (!downloadINI) {
            errorText = ""startTLEDownload() must be ran before downloadNextTLE() can begin"";
            return false;
        }
        if (!this.hasMoreToDownload()) {
            errorText = ""There are no more TLEs to download"";
            return false;
        }
        int i = currentTLEindex;
        try {
            URL url = new URL(rootWeb + fileNames[i]);
            URLConnection c = url.openConnection();
            InputStreamReader isr = new InputStreamReader(c.getInputStream());
            BufferedReader br = new BufferedReader(isr);
            File outFile = new File(localPath + fileNames[i]);
            BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));
            String currentLine = """";
            while ((currentLine = br.readLine()) != null) {
                writer.write(currentLine);
                writer.newLine();
            }
            br.close();
            writer.close();
        } catch (Exception e) {
            System.out.println(""Error Reading/Writing TLE - "" + fileNames[i] + ""\n"" + e.toString());
            success = false;
            errorText = e.toString();
            return false;
        }
        currentTLEindex++;
        return success;
    }
"
3314,"    private void prepareUrlFile(ZipEntryRef zer, String nodeDir, String reportDir) throws Exception {
        URL url = new URL(zer.getUri());
        URLConnection conn = url.openConnection();
        String fcopyName = reportDir + File.separator + zer.getFilenameFromHttpHeader(conn.getHeaderFields());
        logger.debug(""download "" + zer.getUri() + "" in "" + fcopyName);
        BufferedOutputStream bw;
        bw = new BufferedOutputStream(new FileOutputStream(fcopyName));
        BufferedInputStream reader = new BufferedInputStream(conn.getInputStream());
        byte[] inputLine = new byte[100000];
        ;
        while (reader.read(inputLine) > 0) {
            bw.write(inputLine);
        }
        bw.close();
        reader.close();
        zer.setUri(fcopyName);
    }
"
986,"    static String getMD5Hash(String str) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(str.getBytes());
        byte[] b = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            int v = (int) b[i];
            v = v < 0 ? 0x100 + v : v;
            String cc = Integer.toHexString(v);
            if (cc.length() == 1) sb.append('0');
            sb.append(cc);
        }
        return sb.toString();
    }
"
3483,"    private void createGraphicalViewer(Composite parent) {
        viewer = new ScrollingGraphicalViewer();
        viewer.createControl(parent);
        viewer.getControl().setBackground(parent.getBackground());
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));
        registerEditPartViewer(viewer);
        configureEditPartViewer(viewer);
        viewer.setEditPartFactory(new GraphicalEditPartsFactory(getSite().getShell()));
        viewer.setContents(getContractEditor().getContract());
        ContextMenuProvider provider = new ContractContextMenuProvider(getGraphicalViewer(), getContractEditor().getActionRegistry());
        getGraphicalViewer().setContextMenu(provider);
        getSite().registerContextMenu(provider, getGraphicalViewer());
    }
"
5793,"    @Override
    protected void copy(InputStream inputs, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (inputs == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(inputs, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (inputs != null) {
                inputs.close();
            }
        }
    }
"
4991,"    private String readHtmlFile(String htmlFileName) {
        StringBuffer buffer = new StringBuffer();
        java.net.URL url = getClass().getClassLoader().getResource(""freestyleLearning/homeCore/help/"" + htmlFileName);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String string = "" "";
            while (string != null) {
                string = reader.readLine();
                if (string != null) buffer.append(string);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
        return new String(buffer);
    }
"
708,"    public String move(Integer param) {
        LOG.debug(""move "" + param);
        StringBuffer ret = new StringBuffer();
        try {
            URL url = new URL(""http://"" + host + ""/decoder_control.cgi?command="" + param + ""&user="" + user + ""&pwd="" + password);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                ret.append(inputLine);
            }
            in.close();
        } catch (Exception e) {
            logException(e);
            connect(host, user, password);
        }
        return ret.toString();
    }
"
2118,"    @Override
    public VocabularyLocation next() {
        try {
            if (!urls.isEmpty()) {
                final URL url = urls.poll();
                return new VocabularyLocation(url.toExternalForm(), VocabularyFormat.RDFXML, 0, url.openStream());
            }
            if (!files.isEmpty()) {
                File file = files.poll();
                return new VocabularyLocation(file.getCanonicalPath(), file.getName().endsWith("".ntriples"") ? VocabularyFormat.NTRIPLES : VocabularyFormat.RDFXML, file.lastModified(), new FileInputStream(file));
            }
            if (nextZipEntry != null) {
                String zipEntryAsString = IOUtils.toString(new CloseShieldInputStream(in), ""UTF-8"");
                VocabularyLocation location = new VocabularyLocation(nextZipEntry.getName(), nextZipEntry.getName().endsWith("".rdf"") ? VocabularyFormat.RDFXML : null, nextZipEntry.getTime(), IOUtils.toInputStream(zipEntryAsString, ""UTF-8""));
                findNextZipEntry();
                return location;
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        throw new NoSuchElementException();
    }
"
7081,"    public Resource get(String serviceUrl, String resourceId, String svcId, boolean appendProfile) throws Exception {
        Resource resource = new Resource();
        String openurl = getURL(serviceUrl, resourceId, svcId, appendProfile);
        logger.debug(""OpenURL Request: "" + openurl);
        URL url;
        try {
            url = new URL(openurl);
            HttpURLConnection huc = (HttpURLConnection) (url.openConnection());
            int code = huc.getResponseCode();
            if (code == 200) {
                InputStream is = huc.getInputStream();
                resource.setBytes(IOUtils.getByteArray(is));
                resource.setContentType(huc.getContentType());
            } else if (code == 404) {
                return null;
            } else {
                logger.error(""An error of type "" + code + "" occurred for "" + url.toString());
                throw new Exception(""Cannot get "" + url.toString());
            }
        } catch (MalformedURLException e) {
            throw new Exception(""A MalformedURLException occurred for "" + openurl);
        } catch (IOException e) {
            throw new Exception(""An IOException occurred attempting to connect to "" + openurl);
        }
        return resource;
    }
"
7833,"    @Override
    public boolean postPage() {
        MySpaceBlogExporterGuiApp.getApplication().getWizContainer().showStatus(myResourceMap.getString(""CheckingBlogUrl.text""));
        URL url;
        try {
            url = new URL(txtBlogUrl.getText());
            URLConnection con = url.openConnection();
            con.getContentType();
            String newLink = con.getURL().toString();
            if (!newLink.equalsIgnoreCase(txtBlogUrl.getText())) {
                JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString(""InvalidBlogUrl.text""), ""Error"", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString(""InvalidUrl.text""), ""Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        } finally {
            MySpaceBlogExporterGuiApp.getApplication().getWizContainer().hideStatus();
        }
        if (txtBlogUrl.getText().toLowerCase().indexOf(""friendid"") > 0) {
            JOptionPane.showMessageDialog(new JFrame(), myResourceMap.getString(""InvalidBlogUrl.text""), ""Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        MySpaceBlogExporterGuiApp.getApplication().getMySpaceBlogExporter().setBlogUrl(txtBlogUrl.getText());
        return true;
    }
"
8686,"    public User getUser(String userlogin) {
        UserDAO userDAO = new UserDAO();
        User user = null;
        try {
            user = userDAO.load(userlogin);
            if (user == null) {
                URL url = Thread.currentThread().getContextClassLoader().getResource(""users.cfg"");
                BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                String linea = br.readLine();
                while (linea != null) {
                    StringTokenizer st = new StringTokenizer(linea, "":"");
                    if (st.countTokens() == 3) {
                        String login = st.nextToken();
                        String password = st.nextToken();
                        String profile = st.nextToken();
                        if (login.equals(userlogin)) {
                            user = new User(login, password, profile);
                            userDAO.save(user);
                        }
                    } else {
                    }
                    linea = br.readLine();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
"
572,"    private void login() throws LoginException {
        log.info(""# iモード.netにログイン"");
        try {
            this.httpClient.getCookieStore().clear();
            HttpPost post = new HttpPost(LoginUrl);
            List<NameValuePair> formparams = new ArrayList<NameValuePair>();
            formparams.add(new BasicNameValuePair(""HIDEURL"", ""?WM_AK=https%3a%2f%2fimode.net%2fag&path=%2fimail%2ftop&query=""));
            formparams.add(new BasicNameValuePair(""LOGIN"", ""WM_LOGIN""));
            formparams.add(new BasicNameValuePair(""WM_KEY"", ""0""));
            formparams.add(new BasicNameValuePair(""MDCM_UID"", this.name));
            formparams.add(new BasicNameValuePair(""MDCM_PWD"", this.pass));
            UrlEncodedFormEntity entity = null;
            try {
                entity = new UrlEncodedFormEntity(formparams, ""UTF-8"");
            } catch (Exception e) {
            }
            post.setHeader(""User-Agent"", ""Mozilla/4.0 (compatible;MSIE 7.0; Windows NT 6.0;)"");
            post.setEntity(entity);
            try {
                HttpResponse res = this.executeHttp(post);
                if (res == null) {
                    this.logined = Boolean.FALSE;
                    throw new IOException(""Redirect Error"");
                }
                if (res.getStatusLine().getStatusCode() != 200) {
                    this.logined = Boolean.FALSE;
                    throw new IOException(""http login response bad status code "" + res.getStatusLine().getStatusCode());
                }
                String body = toStringBody(res);
                if (body.indexOf(""<title>認証エラー"") > 0) {
                    this.logined = Boolean.FALSE;
                    log.info(""認証エラー"");
                    log.debug(body);
                    this.clearCookie();
                    throw new LoginException(""認証エラー"");
                }
            } finally {
                post.abort();
            }
            post = new HttpPost(JsonUrl + ""login"");
            try {
                HttpResponse res = this.requestPost(post, null);
                if (res == null) {
                    this.logined = Boolean.FALSE;
                    throw new IOException(""Login Error"");
                }
                if (res.getStatusLine().getStatusCode() != 200) {
                    this.logined = Boolean.FALSE;
                    throw new IOException(""http login2 response bad status code "" + res.getStatusLine().getStatusCode());
                }
                this.logined = Boolean.TRUE;
            } finally {
                post.abort();
            }
        } catch (Exception e) {
            this.logined = Boolean.FALSE;
            throw new LoginException(""Docomo i mode.net Login Error."", e);
        }
    }
"
2969,"    private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException {
        logger.debug(""Beginning document validation ..."");
        synchronized (ODFValidationSession.class) {
            PropertyMapBuilder builder = new PropertyMapBuilder();
            String[] segments = url.split(""/"");
            CommentatingErrorHandler h = new CommentatingErrorHandler(commentary, segments[segments.length - 1]);
            ValidateProperty.ERROR_HANDLER.put(builder, h);
            ValidationDriver driver = new ValidationDriver(builder.toPropertyMap());
            InputStream candidateStream = null;
            try {
                logger.debug(""Loading schema version "" + ver);
                byte[] schemaBytes = getSchemaForVersion(ver);
                driver.loadSchema(new InputSource(new ByteArrayInputStream(schemaBytes)));
                URLConnection conn = new URL(url).openConnection();
                candidateStream = conn.getInputStream();
                logger.debug(""Calling validate()"");
                commentary.incIndent();
                boolean isValid = driver.validate(new InputSource(candidateStream));
                logger.debug(""Errors in instance:"" + h.getInstanceErrCount());
                if (h.getInstanceErrCount() > CommentatingErrorHandler.THRESHOLD) {
                    commentary.addComment(""(<i>"" + (h.getInstanceErrCount() - CommentatingErrorHandler.THRESHOLD) + "" error(s) omitted for the sake of brevity</i>)"");
                }
                commentary.decIndent();
                if (isValid) {
                    commentary.addComment(""The document is valid"");
                } else {
                    commentary.addComment(""ERROR"", ""The document is invalid"");
                }
            } catch (SAXException e) {
                commentary.addComment(""FATAL"", ""The resource is not conformant XML: "" + e.getMessage());
                logger.error(e.getMessage());
            } finally {
                Utils.streamClose(candidateStream);
            }
        }
    }
"
5017,"    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {
        final URL url = new URL(accessUrl);
        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(url.openStream()));
        String xmlContent = readWithStringBuffer(inputStream);
        if (replace != null) {
            xmlContent = xmlContent.replace(replace, with);
        }
        LOGGER.info(""Calls "" + accessUrl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""\nXml:"" + accessUrl + ""\n"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));
            out.write(xmlContent);
            out.close();
        }
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());
        Source source;
        if (nameSpace != null) {
            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);
        } else {
            source = new StreamSource(byteArrayInputStream);
        }
        return unmarshaller.unmarshal(source);
    }
"
350,"    public static void copyFile(File in, File out) throws EnhancedException {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (Exception e) {
            throw new EnhancedException(""Could not copy file "" + in.getAbsolutePath() + "" to "" + out.getAbsolutePath() + ""."", e);
        }
    }
"
4078,"    public void run() {
        URL url;
        InputSource i;
        Message m = ThemeListActivity.FeaturedThemesProgressHandler.obtainMessage();
        try {
            url = new URL(mUrl);
            i = new InputSource(url.openStream());
            SAXParserFactory spf = SAXParserFactory.newInstance();
            SAXParser sp = spf.newSAXParser();
            XMLReader xr = sp.getXMLReader();
            FeaturedThemesHandler fth = new FeaturedThemesHandler();
            xr.setContentHandler(fth);
            xr.parse(i);
            m.obj = fth.getParsedData();
        } catch (MalformedURLException e) {
            m.obj = e.toString();
            Log.e(TAG, ""Malformed URL!"", e);
        } catch (IOException e) {
            m.obj = e.toString();
            Log.e(TAG, ""Exception on opening Input Stream"", e);
        } catch (ParserConfigurationException e) {
            m.obj = e.toString();
            Log.e(TAG, ""Exception on parsing XML File"", e);
        } catch (SAXException e) {
            m.obj = e.toString();
            Log.e(TAG, ""Exception while creating SAXParser"", e);
        }
        ThemeListActivity.FeaturedThemesProgressHandler.sendMessage(m);
    }
"
8627,"    @Action(value = ""ajaxFileUploads"", results = {  })
    public void ajaxFileUploads() throws IOException {
        String extName = """";
        String newFilename = """";
        String nowTimeStr = """";
        String realpath = """";
        if (Validate.StrNotNull(this.getImgdirpath())) {
            realpath = ""Uploads/"" + this.getImgdirpath() + ""/"";
        } else {
            realpath = this.isexistdir();
        }
        SimpleDateFormat sDateFormat;
        Random r = new Random();
        String savePath = ServletActionContext.getServletContext().getRealPath("""");
        savePath = savePath + realpath;
        HttpServletResponse response = ServletActionContext.getResponse();
        int rannum = (int) (r.nextDouble() * (99999 - 1000 + 1)) + 10000;
        sDateFormat = new SimpleDateFormat(""yyyyMMddHHmmss"");
        nowTimeStr = sDateFormat.format(new Date());
        String filename = request.getHeader(""X-File-Name"");
        if (filename.lastIndexOf(""."") >= 0) {
            extName = filename.substring(filename.lastIndexOf("".""));
        }
        newFilename = nowTimeStr + rannum + extName;
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            log.debug(ImgTAction.class.getName() + ""has thrown an exception:"" + ex.getMessage());
        }
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(savePath + newFilename));
            IOUtils.copy(is, fos);
            response.setStatus(response.SC_OK);
            writer.print(""{success:'"" + realpath + newFilename + ""'}"");
        } catch (FileNotFoundException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log.debug(ImgTAction.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log.debug(ImgTAction.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } finally {
            try {
                this.setImgdirpath(null);
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
"
8895,"    public static HttpURLConnection create(URL url, String id, String action, HTTPRequestInfo info) throws IOException {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""POST"");
        if (id != null) {
            connection.setRequestProperty(""id"", id);
        }
        connection.setRequestProperty(""action"", action);
        connection.setUseCaches(false);
        if (info.getProxyUser() != null && info.getProxyPassword() != null) {
            String pwd = info.getProxyUser() + "":"" + info.getProxyPassword();
            String encoded = new String(Base64.encodeBase64(pwd.getBytes()));
            connection.setRequestProperty(""Proxy-Authorization"", ""Basic "" + encoded);
        }
        return connection;
    }
"
1058,"    public void copyFile(File a_fileSrc, File a_fileDest, boolean a_append) throws IOException {
        a_fileDest.getParentFile().mkdirs();
        FileInputStream in = null;
        FileOutputStream out = null;
        FileChannel fcin = null;
        FileChannel fcout = null;
        try {
            in = new FileInputStream(a_fileSrc);
            out = new FileOutputStream(a_fileDest, a_append);
            fcin = in.getChannel();
            fcout = out.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
            while (true) {
                buffer.clear();
                int r = fcin.read(buffer);
                if (r == -1) {
                    break;
                }
                buffer.flip();
                fcout.write(buffer);
            }
        } catch (IOException ex) {
            throw ex;
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            if (fcin != null) {
                fcin.close();
            }
            if (fcout != null) {
                fcout.close();
            }
        }
    }
"
2661,"    public boolean backup() {
        try {
            File sd = Environment.getExternalStorageDirectory();
            File data = Environment.getDataDirectory();
            if (sd.canWrite()) {
                String currentDBPath = ""/data/android.bluebox/databases/bluebox.db"";
                String backupDBPath = ""/Android/bluebox.bak"";
                File currentDB = new File(data, currentDBPath);
                File backupDB = new File(sd, backupDBPath);
                if (currentDB.exists()) {
                    FileChannel src = new FileInputStream(currentDB).getChannel();
                    FileChannel dst = new FileOutputStream(backupDB).getChannel();
                    dst.transferFrom(src, 0, src.size());
                    src.close();
                    dst.close();
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
"
8963,"    private static String deviceIdFromCombined_Device_ID(Context context) {
        StringBuilder builder = new StringBuilder();
        builder.append(deviceIdFromIMEI(context));
        builder.append(deviceIdFromPseudo_Unique_Id());
        builder.append(deviceIdFromAndroidId(context));
        builder.append(deviceIdFromWLAN_MAC_Address(context));
        builder.append(deviceIdFromBT_MAC_Address(context));
        String m_szLongID = builder.toString();
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        m.update(m_szLongID.getBytes(), 0, m_szLongID.length());
        byte p_md5Data[] = m.digest();
        String m_szUniqueID = new String();
        for (int i = 0; i < p_md5Data.length; i++) {
            int b = (0xFF & p_md5Data[i]);
            if (b <= 0xF) m_szUniqueID += ""0"";
            m_szUniqueID += Integer.toHexString(b);
        }
        return m_szUniqueID;
    }
"
4151,"    public static String encryptPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            int hashLength = hash.length;
            StringBuffer hashStringBuf = new StringBuffer();
            String byteString;
            int byteLength;
            for (int index = 0; index < hashLength; index++) {
                byteString = String.valueOf(hash[index] + 128);
                byteLength = byteString.length();
                switch(byteLength) {
                    case 1:
                        byteString = ""00"" + byteString;
                        break;
                    case 2:
                        byteString = ""0"" + byteString;
                        break;
                }
                hashStringBuf.append(byteString);
            }
            return hashStringBuf.toString();
        } catch (NoSuchAlgorithmException nsae) {
            log.error(""Error getting password hash: "" + nsae.getMessage());
            return null;
        }
    }
"
7453,"    public String getDocumentAt(String urlString) {
        StringBuffer document = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) document.append(line + ""\n"");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println(""Unable to connect to URL: "" + urlString);
        } catch (IOException e) {
            System.out.println(""IOException when connecting to URL: "" + urlString);
        }
        return document.toString();
    }
"
2787,"    private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
"
1558,"    public synchronized long nextValue(final Session session) {
        if (sequence < seqLimit) {
            return ++sequence;
        } else {
            final MetaDatabase db = MetaTable.DATABASE.of(table);
            Connection connection = null;
            ResultSet res = null;
            String sql = null;
            PreparedStatement statement = null;
            StringBuilder out = new StringBuilder(64);
            try {
                connection = session.getSeqConnection(db);
                String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString();
                out.setLength(0);
                out.setLength(0);
                sql = db.getDialect().printSequenceNextValue(this, out).toString();
                if (LOGGER.isLoggable(Level.INFO)) {
                    LOGGER.log(Level.INFO, sql + ""; ["" + tableName + ']');
                }
                statement = connection.prepareStatement(sql);
                statement.setString(1, tableName);
                int i = statement.executeUpdate();
                if (i == 0) {
                    out.setLength(0);
                    sql = db.getDialect().printSequenceInit(this, out).toString();
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.log(Level.INFO, sql + ""; ["" + tableName + ']');
                    }
                    statement = connection.prepareStatement(sql);
                    statement.setString(1, tableName);
                    statement.executeUpdate();
                }
                out.setLength(0);
                sql = db.getDialect().printSequenceCurrentValue(this, out).toString();
                if (LOGGER.isLoggable(Level.INFO)) {
                    LOGGER.log(Level.INFO, sql + ""; ["" + tableName + ']');
                }
                statement = connection.prepareStatement(sql);
                statement.setString(1, tableName);
                res = statement.executeQuery();
                res.next();
                seqLimit = res.getLong(1);
                int step = res.getInt(2);
                maxValue = res.getLong(3);
                sequence = (seqLimit - step) + 1;
                if (maxValue != 0L) {
                    if (seqLimit > maxValue) {
                        seqLimit = maxValue;
                        if (sequence > maxValue) {
                            String msg = ""The sequence '"" + tableName + ""' needs to raise the maximum value: "" + maxValue;
                            throw new IllegalStateException(msg);
                        }
                        statement.close();
                        sql = db.getDialect().printSetMaxSequence(this, out).toString();
                        if (LOGGER.isLoggable(Level.INFO)) {
                            LOGGER.log(Level.INFO, sql + ""; ["" + tableName + ']');
                        }
                        statement = connection.prepareStatement(sql);
                        statement.setString(1, tableName);
                        statement.execute();
                    }
                    if (maxValue > Long.MAX_VALUE - step) {
                        String msg = ""The sequence attribute '"" + tableName + "".maxValue' is too hight,"" + "" the recommended maximal value is: "" + (Long.MAX_VALUE - step) + "" (Long.MAX_VALUE-step)"";
                        LOGGER.log(Level.WARNING, msg);
                    }
                }
                connection.commit();
            } catch (Throwable e) {
                if (connection != null) try {
                    connection.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Rollback fails"");
                }
                IllegalStateException exception = e instanceof IllegalStateException ? (IllegalStateException) e : new IllegalStateException(""ILLEGAL SQL: "" + sql, e);
                throw exception;
            } finally {
                MetaDatabase.close(null, statement, res, true);
            }
            return sequence;
        }
    }
"
9070,"    @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
"
913,"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
"
1608,"    public static void bubble_sort(int[] objects, int len) {
        for (int i = len; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (objects[j + 1] < objects[j]) {
                    int tmp = objects[j];
                    objects[j] = objects[j + 1];
                    objects[j + 1] = tmp;
                    flipped = true;
                }
            }
            if (!flipped) return;
        }
    }
"
6127,"    public static void copyFile(File inputFile, File outputFile) throws IOException {
        BufferedInputStream fr = new BufferedInputStream(new FileInputStream(inputFile));
        BufferedOutputStream fw = new BufferedOutputStream(new FileOutputStream(outputFile));
        byte[] buf = new byte[8192];
        int n;
        while ((n = fr.read(buf)) >= 0) fw.write(buf, 0, n);
        fr.close();
        fw.close();
    }
"
5587,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
"
7928,"    private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
"
8833,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
3258,"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
"
6771,"    @Override
    public synchronized void deletePersistenceEntityStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException {
        final Connection connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
            String queryString = ""DELETE "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "" FROM "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "" INNER JOIN "" + this.getPersistenceEntityElementsSchemaAndTableName() + "" ON "" + this.getPersistenceEntityElementsSchemaAndTableName() + "".element_id =  "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "".element_id WHERE "";
            if (elementId != null) {
                queryString = queryString + "" elementId = ? AND "";
            }
            if (contextName != null) {
                queryString = queryString + "" context_name LIKE ? AND "";
            }
            if ((project != null)) {
                queryString = queryString + "" project LIKE ? AND "";
            }
            if ((name != null)) {
                queryString = queryString + "" name LIKE ? AND "";
            }
            if (dateFrom != null) {
                queryString = queryString + "" start_timestamp >= ? AND "";
            }
            if (dateTo != null) {
                queryString = queryString + "" start_timestamp <= ? AND "";
            }
            queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);
            final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);
            int indexCounter = 1;
            if (elementId != null) {
                preparedStatement.setLong(indexCounter, elementId.longValue());
                indexCounter = indexCounter + 1;
            }
            if (contextName != null) {
                preparedStatement.setString(indexCounter, contextName);
                indexCounter = indexCounter + 1;
            }
            if ((project != null)) {
                preparedStatement.setString(indexCounter, project);
                indexCounter = indexCounter + 1;
            }
            if ((name != null)) {
                preparedStatement.setString(indexCounter, name);
                indexCounter = indexCounter + 1;
            }
            if (dateFrom != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));
                indexCounter = indexCounter + 1;
            }
            if (dateTo != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));
                indexCounter = indexCounter + 1;
            }
            preparedStatement.executeUpdate();
            preparedStatement.close();
            connection.commit();
        } catch (final SQLException e) {
            try {
                connection.rollback();
            } catch (final SQLException ex) {
                JeeObserverServerContext.logger.log(Level.SEVERE, ""Transaction rollback error."", ex);
            }
            JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());
            throw new DatabaseException(""Error deleting persistence entity statistics."", e);
        } finally {
            this.releaseConnection(connection);
        }
    }
"
8585,"    public static IFigure render(IDiagram diagram) {
        Diagram realDiagram;
        try {
            realDiagram = ((Diagram.IDiagramImpl) diagram).getDiagram();
        } catch (ClassCastException x) {
            throw new IllegalArgumentException(""invalid diagram parameter"");
        }
        ScrollingGraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(RMBenchPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getShell());
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new CustomEditPartFactory());
        viewer.setContents(realDiagram);
        AbstractGraphicalEditPart aep = (AbstractGraphicalEditPart) viewer.getRootEditPart();
        refresh(aep);
        IFigure root = ((AbstractGraphicalEditPart) viewer.getRootEditPart()).getFigure();
        setPreferedSize(root);
        return root;
    }
"
5192,"    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        long startTime = System.currentTimeMillis();
        boolean validClient = true;
        boolean validSession = false;
        String sessionKey = req.getParameter(""sid"");
        String storedKey = CLIENT_SESSION_KEYS.get(req.getRemoteAddr());
        if (sessionKey != null && storedKey != null && sessionKey.equals(storedKey)) validSession = true;
        DataStore ds = DataStore.getConnection();
        if (IPV6_DETECTED) {
            boolean doneWarning;
            synchronized (SJQServlet.class) {
                doneWarning = IPV6_WARNED;
                if (!IPV6_WARNED) IPV6_WARNED = true;
            }
            if (!doneWarning) LOG.warn(""IPv6 interface detected; client restriction settings ignored [restrictions do not support IPv6 addresses]"");
        } else {
            String[] clntRestrictions = ds.getSetting(""ValidClients"", """").split("";"");
            List<IPMatcher> matchers = new ArrayList<IPMatcher>();
            if (clntRestrictions.length == 1 && clntRestrictions[0].trim().length() == 0) {
                LOG.warn(""All client connections are being accepted and processed, please consider setting up client restrictions in SJQ settings"");
            } else {
                for (String s : clntRestrictions) {
                    s = s.trim();
                    try {
                        matchers.add(new IPMatcher(s));
                    } catch (IPMatcherException e) {
                        LOG.error(""Invalid client restriction settings; client restrictions ignored!"", e);
                        matchers.clear();
                        break;
                    }
                }
                validClient = matchers.size() > 0 ? false : true;
                for (IPMatcher m : matchers) {
                    try {
                        if (m.match(req.getRemoteAddr())) {
                            validClient = true;
                            break;
                        }
                    } catch (IPMatcherException e) {
                        LOG.error(""IPMatcherException"", e);
                    }
                }
            }
        }
        String clntProto = req.getParameter(""proto"");
        if (clntProto == null || Integer.parseInt(clntProto) != SJQ_PROTO) throw new RuntimeException(""Server is speaking protocol '"" + SJQ_PROTO + ""', but client is speaking protocol '"" + clntProto + ""'; install a client version that matches the server protocol version!"");
        resp.setHeader(""Content-Type"", ""text/plain"");
        resp.setDateHeader(""Expires"", 0);
        resp.setDateHeader(""Last-Modified"", System.currentTimeMillis());
        resp.setHeader(""Cache-Control"", ""no-store, no-cache, must-revalidate"");
        resp.setHeader(""Pragma"", ""no-cache"");
        String cmd = req.getParameter(""cmd"");
        if (cmd == null) {
            DataStore.returnConnection(ds);
            return;
        }
        ActiveClientList list = ActiveClientList.getInstance();
        BufferedWriter bw = new BufferedWriter(resp.getWriter());
        if (cmd.equals(""pop"")) {
            if (!validClient) {
                LOG.warn(""Client IP rejected: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                list.add(req.getRemoteHost());
                ClientParser clnt = new ClientParser(new StringReader(ds.getClientConf(req.getRemoteHost())));
                String offDay = clnt.getGlobalOption(""OFFDAY"");
                String offHour = clnt.getGlobalOption(""OFFHOUR"");
                Calendar now = Calendar.getInstance();
                if (RangeInterpreter.inRange(now.get(Calendar.DAY_OF_WEEK), 1, 7, offDay) || RangeInterpreter.inRange(now.get(Calendar.HOUR_OF_DAY), 0, 23, offHour)) {
                    LOG.warn(""Client '"" + req.getRemoteAddr() + ""' currently disabled via OFFDAY/OFFHOUR settings."");
                    bw.write(""null"");
                } else {
                    Task t = TaskQueue.getInstance().pop(req.getRemoteHost(), getPopCandidates(req.getRemoteHost(), clnt));
                    if (t == null) bw.write(""null""); else {
                        t.setResourcesUsed(Integer.parseInt(clnt.getTask(t.getTaskId()).getOption(""RESOURCES"")));
                        Object obj = null;
                        if (t.getObjType().equals(""media"")) obj = Butler.SageApi.mediaFileAPI.GetMediaFileForID(Integer.parseInt(t.getObjId())); else if (t.getObjType().equals(""sysmsg"")) obj = SystemMessageUtils.getSysMsg(t.getObjId());
                        ClientTask cTask = clnt.getTask(t.getTaskId());
                        JSONObject jobj = cTask.toJSONObject(obj);
                        String objType = null;
                        try {
                            if (jobj != null) objType = jobj.getString(Task.JSON_OBJ_TYPE);
                        } catch (JSONException e) {
                            throw new RuntimeException(""Invalid ClienTask JSON object conversion!"");
                        }
                        if (obj == null || jobj == null) {
                            LOG.error(""Source object has disappeared! ["" + t.getObjType() + ""/"" + t.getObjId() + ""]"");
                            TaskQueue.getInstance().updateTask(t.getObjId(), t.getTaskId(), Task.State.FAILED, t.getObjType());
                            bw.write(""null"");
                        } else if (objType.equals(""media"")) {
                            try {
                                long ratio = calcRatio(jobj.getString(Task.JSON_OBJ_ID), jobj.getString(Task.JSON_NORECORDING));
                                if (ratio > 0 && new FieldTimeUntilNextRecording(null, ""<="", ratio + ""S"").run()) {
                                    LOG.info(""Client '"" + req.getRemoteAddr() + ""' cannot pop task '"" + t.getObjType() + ""/"" + t.getTaskId() + ""/"" + t.getObjId() + ""'; :NORECORDING option prevents running of this task"");
                                    TaskQueue.getInstance().pushBack(t);
                                    bw.write(""null"");
                                } else bw.write(jobj.toString());
                            } catch (JSONException e) {
                                throw new RuntimeException(e);
                            }
                        } else bw.write(jobj.toString());
                    }
                }
            }
        } else if (cmd.equals(""update"")) {
            if (!validClient) {
                LOG.warn(""Client IP rejected: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                list.add(req.getRemoteHost());
                try {
                    Task t = new Task(new JSONObject(req.getParameter(""data"")));
                    TaskQueue.getInstance().updateTask(t);
                } catch (JSONException e) {
                    throw new RuntimeException(""Input error; client '"" + req.getRemoteHost() + ""', CMD: update"", e);
                }
            }
        } else if (cmd.equals(""showQ"")) {
            if (validSession) bw.write(TaskQueue.getInstance().toJSONArray().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""log"")) {
            if (validSession) {
                String mediaId = req.getParameter(""m"");
                String taskId = req.getParameter(""t"");
                String objType = req.getParameter(""o"");
                if ((mediaId != null && !mediaId.equals(""0"")) && (taskId != null && !taskId.equals(""0""))) bw.write(ds.readLog(mediaId, taskId, objType)); else {
                    BufferedReader r = new BufferedReader(new FileReader(""sjq.log""));
                    String line;
                    while ((line = r.readLine()) != null) bw.write(line + ""\n"");
                    r.close();
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""appState"")) {
            if (validSession) bw.write(Butler.dumpAppTrace()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""writeLog"")) {
            if (!validClient) {
                LOG.warn(""Client IP reject: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                String mediaId = req.getParameter(""m"");
                String taskId;
                if (!mediaId.equals(""-1"")) taskId = req.getParameter(""t""); else taskId = req.getRemoteHost();
                String objType = req.getParameter(""o"");
                if (!mediaId.equals(""0"") && Boolean.parseBoolean(ds.getSetting(""IgnoreTaskOutput"", ""false""))) {
                    LOG.info(""Dropping task output as per settings"");
                    DataStore.returnConnection(ds);
                    return;
                }
                String data = req.getParameter(""data"");
                String[] msg = StringUtils.splitByWholeSeparator(data, ""\r\n"");
                if (msg == null || msg.length == 1) msg = StringUtils.split(data, '\r');
                if (msg == null || msg.length == 1) msg = StringUtils.split(data, '\n');
                long now = System.currentTimeMillis();
                for (String line : msg) ds.logForTaskClient(mediaId, taskId, line, now, objType);
                if (msg.length > 0) ds.flushLogs();
            }
        } else if (cmd.equals(""ruleset"")) {
            if (validSession) bw.write(ds.getSetting(""ruleset"", """")); else notAuthorized(resp, bw);
        } else if (cmd.equals(""saveRuleset"")) {
            if (validSession) {
                ds.setSetting(""ruleset"", req.getParameter(""data""));
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getClients"")) {
            if (validSession) bw.write(ActiveClientList.getInstance().toJSONArray().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""loadClnt"")) {
            if (validSession) bw.write(ds.getClientConf(req.getParameter(""id""))); else notAuthorized(resp, bw);
        } else if (cmd.equals(""saveClnt"")) {
            if (validSession) {
                if (ds.saveClientConf(req.getParameter(""id""), req.getParameter(""data""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""history"")) {
            if (validSession) {
                int start, limit;
                try {
                    start = Integer.parseInt(req.getParameter(""start""));
                    limit = Integer.parseInt(req.getParameter(""limit""));
                } catch (NumberFormatException e) {
                    start = 0;
                    limit = -1;
                }
                bw.write(ds.getJobHistory(Integer.parseInt(req.getParameter(""t"")), start, limit, req.getParameter(""sort"")).toString());
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getSrvSetting"")) {
            if (validSession) bw.write(ds.getSetting(req.getParameter(""var""), """")); else notAuthorized(resp, bw);
        } else if (cmd.equals(""setSrvSetting"")) {
            if (validSession) {
                ds.setSetting(req.getParameter(""var""), req.getParameter(""val""));
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""setFileCleaner"")) {
            if (validSession) {
                ds.setSetting(""DelRegex"", req.getParameter(""orphan""));
                ds.setSetting(""IfRegex"", req.getParameter(""parent""));
                ds.setSetting(""IgnoreRegex"", req.getParameter(""ignore""));
                new Thread(new FileCleaner()).start();
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getFileCleanerSettings"")) {
            if (validSession) {
                bw.write(ds.getSetting(""DelRegex"", """") + ""\n"");
                bw.write(ds.getSetting(""IfRegex"", """") + ""\n"");
                bw.write(ds.getSetting(""IgnoreRegex"", """"));
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""writeSrvSettings"")) {
            if (validSession) {
                try {
                    ds.setSettings(new JSONObject(req.getParameter(""data"")));
                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""readSrvSettings"")) {
            if (validSession) bw.write(ds.readSettings().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""login"")) {
            String pwd = ds.getSetting(""password"", """");
            try {
                MessageDigest msg = MessageDigest.getInstance(""MD5"");
                msg.update(req.getParameter(""password"").getBytes());
                String userPwd = new String(msg.digest());
                if (pwd.length() > 0 && pwd.equals(userPwd)) {
                    bw.write(""Success"");
                    int key = new java.util.Random().nextInt();
                    resp.addHeader(""SJQ-Session-Token"", Integer.toString(key));
                    CLIENT_SESSION_KEYS.put(req.getRemoteAddr(), Integer.toString(key));
                } else bw.write(""BadPassword"");
            } catch (NoSuchAlgorithmException e) {
                bw.write(e.getLocalizedMessage());
            }
        } else if (cmd.equals(""editPwd"")) {
            try {
                MessageDigest msg = MessageDigest.getInstance(""MD5"");
                String curPwd = ds.getSetting(""password"", """");
                String oldPwd = req.getParameter(""old"");
                msg.update(oldPwd.getBytes());
                oldPwd = new String(msg.digest());
                msg.reset();
                String newPwd = req.getParameter(""new"");
                String confPwd = req.getParameter(""conf"");
                if (!curPwd.equals(oldPwd)) bw.write(""BadOld""); else if (!newPwd.equals(confPwd) || newPwd.length() == 0) bw.write(""BadNew""); else {
                    msg.update(newPwd.getBytes());
                    newPwd = new String(msg.digest());
                    ds.setSetting(""password"", newPwd);
                    bw.write(""Success"");
                }
            } catch (NoSuchAlgorithmException e) {
                bw.write(e.getLocalizedMessage());
            }
        } else if (cmd.equals(""runStats"")) {
            if (validSession) {
                JSONObject o = new JSONObject();
                try {
                    o.put(""last"", Long.parseLong(ds.getSetting(""LastRun"", ""0"")));
                    o.put(""next"", Long.parseLong(ds.getSetting(""NextRun"", ""0"")));
                    bw.write(o.toString());
                } catch (JSONException e) {
                    bw.write(e.getLocalizedMessage());
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""runQLoader"")) {
            if (validSession) {
                Butler.wakeQueueLoader();
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""delActiveQ"")) {
            if (validSession) {
                if (TaskQueue.getInstance().delete(req.getParameter(""m""), req.getParameter(""t""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""clearActiveQ"")) {
            if (validSession) {
                if (TaskQueue.getInstance().clear()) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""editPri"")) {
            if (validSession) {
                try {
                    int priority = Integer.parseInt(req.getParameter(""p""));
                    if (TaskQueue.getInstance().editPriority(req.getParameter(""m""), req.getParameter(""t""), priority)) bw.write(""Success""); else bw.write(""Failed"");
                } catch (NumberFormatException e) {
                    bw.write(""Failed"");
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""clearHistory"")) {
            if (validSession) {
                if (ds.clear(Integer.parseInt(req.getParameter(""t"")))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""delHistRow"")) {
            if (validSession) {
                if (ds.delTask(req.getParameter(""m""), req.getParameter(""t""), Integer.parseInt(req.getParameter(""y"")), req.getParameter(""o""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""rmLog"")) {
            if (validSession) {
                String mid = req.getParameter(""m"");
                String tid = req.getParameter(""t"");
                String oid = req.getParameter(""o"");
                if (mid.equals(""0"") && tid.equals(""0"") && oid.equals(""null"")) {
                    bw.write(""Failed: Can't delete server log file (sjq.log) while SageTV is running!"");
                } else if (ds.clearLog(mid, tid, oid)) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""qryMediaFile"")) {
            if (validSession) {
                JSONArray jarr = new JSONArray();
                MediaFileAPI.List mediaList = Butler.SageApi.mediaFileAPI.GetMediaFiles(ds.getMediaMask());
                String qry = req.getParameter(""q"");
                int max = Integer.parseInt(req.getParameter(""m""));
                for (MediaFileAPI.MediaFile mf : mediaList) {
                    if ((qry.matches(""\\d+"") && Integer.toString(mf.GetMediaFileID()).startsWith(qry)) || mf.GetMediaTitle().matches("".*"" + Pattern.quote(qry) + "".*"") || fileSegmentMatches(mf, qry)) {
                        JSONObject o = new JSONObject();
                        try {
                            o.put(""value"", mf.GetFileForSegment(0).getAbsolutePath());
                            String subtitle = null;
                            if (mf.GetMediaFileAiring() != null && mf.GetMediaFileAiring().GetShow() != null) subtitle = mf.GetMediaFileAiring().GetShow().GetShowEpisode();
                            String display;
                            if (subtitle != null && subtitle.length() > 0) display = mf.GetMediaTitle() + "": "" + subtitle; else display = mf.GetMediaTitle();
                            o.put(""display"", mf.GetMediaFileID() + "" - "" + display);
                            jarr.put(o);
                            if (jarr.length() >= max) break;
                        } catch (JSONException e) {
                            e.printStackTrace(System.out);
                        }
                    }
                }
                bw.write(jarr.toString());
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""debugMediaFile"")) {
            if (validSession) {
                if (Butler.debugQueueLoader(req.getParameter(""f""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""killTask"")) {
            if (validSession) {
                if (TaskQueue.getInstance().killTask(req.getParameter(""m""), req.getParameter(""t""), req.getParameter(""o""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""keepAlive"")) {
            bw.write(Boolean.toString(!TaskQueue.getInstance().isTaskKilled(req.getParameter(""m""), req.getParameter(""t""), req.getParameter(""o""))));
        }
        bw.close();
        DataStore.returnConnection(ds);
        LOG.info(""Servlet POST request completed ["" + (System.currentTimeMillis() - startTime) + ""ms]"");
        return;
    }
"
7828,"    public static Dimension getJPEGDimension(String urls) throws IOException {
        URL url;
        Dimension d = null;
        try {
            url = new URL(urls);
            InputStream fis = url.openStream();
            if (fis.read() != 255 || fis.read() != 216) throw new RuntimeException(""SOI (Start Of Image) marker 0xff 0xd8 missing"");
            while (fis.read() == 255) {
                int marker = fis.read();
                int len = fis.read() << 8 | fis.read();
                if (marker == 192) {
                    fis.skip(1);
                    int height = fis.read() << 8 | fis.read();
                    int width = fis.read() << 8 | fis.read();
                    d = new Dimension(width, height);
                    break;
                }
                fis.skip(len - 2);
            }
            fis.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        return d;
    }
"
7509,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
"
7503,"    private boolean copyOldSetupClass(File lastVerPath, File destPath) throws java.io.FileNotFoundException, IOException {
        byte[] buf;
        File oldClass = new File(lastVerPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
        if (oldClass.exists()) {
            FileOutputStream out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
            FileInputStream in = new FileInputStream(oldClass);
            buf = new byte[(new Long(oldClass.length())).intValue()];
            int read = in.read(buf, 0, buf.length);
            out.write(buf, 0, read);
            out.close();
            in.close();
            return true;
        }
        return false;
    }
"
5035,"    private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
"
3505,"    public static String SHA1(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
"
6048,"    private static void addFile(File file, TarArchiveOutputStream taos) throws IOException {
        String filename = null;
        filename = file.getName();
        TarArchiveEntry tae = new TarArchiveEntry(filename);
        tae.setSize(file.length());
        taos.putArchiveEntry(tae);
        FileInputStream fis = new FileInputStream(file);
        IOUtils.copy(fis, taos);
        taos.closeArchiveEntry();
    }
"
3586,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
"
2538,"    public ForkJavaProject(String projectName, Class<?> activatorClass) {
        this.activatorClass = activatorClass;
        try {
            IWorkspaceRoot rootWorkspace = ResourcesPlugin.getWorkspace().getRoot();
            this.prj = rootWorkspace.getProject(projectName);
            if (this.prj.exists()) {
                this.prj.delete(true, true, new NullProgressMonitor());
            }
            this.prj.create(new NullProgressMonitor());
            this.prj.open(new NullProgressMonitor());
            IProjectDescription description = this.prj.getDescription();
            description.setNatureIds(new String[] { ""org.eclipse.jdt.core.javanature"" });
            this.prj.setDescription(description, new NullProgressMonitor());
            createProjectDir(Constants.Dirs.DIR_MAIN_JAVA);
            createProjectDir(Constants.Dirs.DIR_CONFIG);
            createProjectDir(Constants.Dirs.DIR_MAIN_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_MODELS);
            createProjectDir(Constants.Dirs.DIR_TESTS_JAVA);
            createProjectDir(Constants.Dirs.DIR_TESTS_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_CLASSES);
            createProjectDir(Constants.Dirs.DIR_LIB);
            this.prj.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
            this.javaProject = JavaCore.create(this.prj);
            if (this.javaProject.exists() && !this.javaProject.isOpen()) {
                this.javaProject.open(new NullProgressMonitor());
            }
            File javaHome = new File(System.getProperty(""java.home""));
            IPath jreLibPath = new Path(javaHome.getPath()).append(""lib"").append(""rt.jar"");
            this.javaProject.setOutputLocation(prj.getFolder(Constants.Dirs.DIR_CLASSES).getFullPath(), new NullProgressMonitor());
            JavaCore.setClasspathVariable(""JRE_LIB"", jreLibPath, new NullProgressMonitor());
            this.javaProject.setRawClasspath(getProjectClassPath(), new NullProgressMonitor());
        } catch (CoreException e) {
            Activator.getDefault().getLog().log(new Status(Status.ERROR, Activator.PLUGIN_ID, ""An exception has been thrown while creating Project"", e));
        }
    }
"
4036,"    public void generateReport(AllTestsResult atr, AllConvsResult acr, File nwbConvGraph) {
        ConvResult[] convs = acr.getConvResults();
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new FileReader(nwbConvGraph));
            writer = new BufferedWriter(new FileWriter(this.annotatedNWBGraph));
            String line = null;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.startsWith(""id*int"")) {
                    writer.write(line + "" isTrusted*int chanceCorrect*float isConverter*int \r\n"");
                } else if (line.matches(NODE_LINE)) {
                    String[] parts = line.split("" "");
                    String rawConvName = parts[1];
                    String convName = rawConvName.replaceAll(""\"""", """");
                    boolean wroteAttributes = false;
                    for (int ii = 0; ii < convs.length; ii++) {
                        ConvResult cr = convs[ii];
                        if (cr.getShortName().equals(convName)) {
                            int trusted;
                            if (cr.isTrusted()) {
                                trusted = 1;
                            } else {
                                trusted = 0;
                            }
                            writer.write(line + "" "" + trusted + "" "" + FormatUtil.formatToPercent(cr.getChanceCorrect()) + "" 1 "" + ""\r\n"");
                            wroteAttributes = true;
                            break;
                        }
                    }
                    if (!wroteAttributes) {
                        writer.write(line + "" 1 100.0 0"" + ""\r\n"");
                    }
                } else {
                    writer.write(line + ""\r\n"");
                }
            }
        } catch (IOException e) {
            this.log.log(LogService.LOG_ERROR, ""Unable to generate Graph Report."", e);
            try {
                if (reader != null) reader.close();
            } catch (IOException e2) {
                this.log.log(LogService.LOG_ERROR, ""Unable to close graph report stream"", e);
            }
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
                this.log.log(LogService.LOG_ERROR, ""Unable to close either graph report reader or "" + ""writer."", e);
                e.printStackTrace();
            }
        }
    }
"
5825,"    private void fetch() throws IOException {
        if (getAttachmentUrl() != null && (!getAttachmentUrl().isEmpty())) {
            InputStream input = null;
            ByteArrayOutputStream output = null;
            try {
                URL url = new URL(getAttachmentUrl());
                input = url.openStream();
                output = new ByteArrayOutputStream();
                int i;
                while ((i = input.read()) != -1) {
                    output.write(i);
                }
                this.data = output.toByteArray();
            } finally {
                if (input != null) {
                    input.close();
                }
                if (output != null) {
                    output.close();
                }
            }
        }
    }
"
5862,"    private void copy(File src, File dest, String name) {
        File srcFile = new File(src, name);
        File destFile = new File(dest, name);
        if (destFile.exists()) {
            if (destFile.lastModified() == srcFile.lastModified()) return;
            destFile.delete();
        }
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(srcFile).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException e) {
            }
            try {
                if (out != null) out.close();
            } catch (IOException e) {
            }
        }
        destFile.setLastModified(srcFile.lastModified());
    }
"
5458,"    public SpreadSheetFrame(FileManager owner, File file, Delimiter delim) {
        super(owner, file.getPath());
        JPanel pane = new JPanel(new BorderLayout());
        super.contentPane.add(pane);
        this.tableModel = new BigTableModel(file, delim);
        this.table = new JTable(tableModel);
        this.table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.tableModel.setTable(this.table);
        pane.add(new JScrollPane(this.table));
        addInternalFrameListener(new InternalFrameAdapter() {

            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                tableModel.close();
            }
        });
        JMenu menu = new JMenu(""Tools"");
        getJMenuBar().add(menu);
        menu.add(new AbstractAction(""NCBI"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile(""[ ]"");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(""/home/lindenb/jeter.txt.gz""))));
                    String line = null;
                    URL url = new URL(""http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(""db=snp&retmode=xml"");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith(""rs"")) continue;
                        wr.write(""&id="" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
        });
    }
"
9033,"    public InetSocketAddress getServerAddress() throws IOException {
        URL url = new URL(ADDRESS_SERVER_URL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod(""GET"");
        con.setDoOutput(true);
        con.setReadTimeout(2000);
        con.connect();
        BufferedReader rd = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String line = rd.readLine();
        if (line == null) throw new IOException(""Cannot read address from address server"");
        String addr[] = line.split("" "", 2);
        return new InetSocketAddress(addr[0], Integer.valueOf(addr[1]));
    }
"
1880,"    private URL resolveRedirects(URL url, int redirectCount) throws IOException {
        URLConnection uc = url.openConnection();
        if (uc instanceof HttpURLConnection) {
            HttpURLConnection huc = (HttpURLConnection) uc;
            huc.setInstanceFollowRedirects(false);
            huc.connect();
            int responseCode = huc.getResponseCode();
            String location = huc.getHeaderField(""location"");
            huc.disconnect();
            if ((responseCode == HttpURLConnection.HTTP_MOVED_TEMP) && (redirectCount < 5)) {
                try {
                    URL newUrl = new URL(location);
                    return resolveRedirects(newUrl, redirectCount + 1);
                } catch (MalformedURLException ex) {
                    return url;
                }
            } else return url;
        } else return url;
    }
"
8714,"    public static InputStream downloadStream(URL url) {
        InputStream inputStream = null;
        try {
            URLConnection urlConnection = url.openConnection();
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                if (responseCode != HttpURLConnection.HTTP_OK) return null;
            }
            return urlConnection.getInputStream();
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            return null;
        }
    }
"
2881,"    public static boolean insert(final Departamento ObjDepartamento) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = ""insert into departamento "" + ""(nome, sala, telefone, id_orgao)"" + "" values (?, ?, ?, ?)"";
            pst = c.prepareStatement(sql);
            pst.setString(1, ObjDepartamento.getNome());
            pst.setString(2, ObjDepartamento.getSala());
            pst.setString(3, ObjDepartamento.getTelefone());
            pst.setInt(4, (ObjDepartamento.getOrgao()).getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[DepartamentoDAO.insert] Erro ao inserir -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
"
6524,"    public static void copyFile(File destFile, File src) throws IOException {
        File destDir = destFile.getParentFile();
        File tempFile = new File(destFile + ""_tmp"");
        destDir.mkdirs();
        InputStream is = new FileInputStream(src);
        try {
            FileOutputStream os = new FileOutputStream(tempFile);
            try {
                byte[] buf = new byte[8192];
                int len;
                while ((len = is.read(buf)) > 0) os.write(buf, 0, len);
            } finally {
                os.close();
            }
        } finally {
            is.close();
        }
        destFile.delete();
        if (!tempFile.renameTo(destFile)) throw new IOException(""Unable to rename "" + tempFile + "" to "" + destFile);
    }
"
7531,"    public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
"
3771,"    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");
            messageDiegest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        }
    }
"
339,"    public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
"
6139,"    public InputStream getDaoConfig(String connectionType) throws IOException {
        URL url = null;
        if (connectionType.equals(SQL.ORACLE)) {
            url = DTSWFDBConfig.class.getResource(""oracle.xml"");
        } else if (connectionType.equals(SQL.SQL2K)) {
            url = DTSWFDBConfig.class.getResource(""sql2k.xml"");
        } else if (connectionType.equals(SQL.CACHE)) {
            url = DTSWFDBConfig.class.getResource(""cache.xml"");
        }
        return url.openStream();
    }
"
6666,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
"
5248,"    public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
"
5992,"    private String clientLogin(AuthInfo authInfo) throws AuthoricationRequiredException {
        logger.fine(""clientLogin."");
        try {
            String url = ""https://www.google.com/accounts/ClientLogin"";
            HttpPost httpPost = new HttpPost(url);
            ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair(""accountType"", ""HOSTED_OR_GOOGLE""));
            params.add(new BasicNameValuePair(""Email"", authInfo.getEmail()));
            params.add(new BasicNameValuePair(""Passwd"", new String(authInfo.getPassword())));
            params.add(new BasicNameValuePair(""service"", ""ah""));
            params.add(new BasicNameValuePair(""source"", ""client.kotan-server.appspot.com""));
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse response = clientManager.httpClient.execute(httpPost);
            HttpEntity entity = response.getEntity();
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                entity.consumeContent();
                throw new AuthoricationRequiredException(EntityUtils.toString(entity));
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));
            while (true) {
                String line = reader.readLine();
                if (line == null) break;
                if (line.startsWith(""Auth="")) {
                    return line.substring(""Auth="".length());
                }
            }
            reader.close();
            throw new AuthoricationRequiredException(""Login failure."");
        } catch (IOException e) {
            throw new AuthoricationRequiredException(e);
        }
    }
"
7600,"        public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException {
            IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor);
            progressMonitor.beginTask("""", 10);
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_GeneratingJETEmitterFor_message"", new Object[] { jetEmitter.templateURI }));
            final IWorkspace workspace = ResourcesPlugin.getWorkspace();
            IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
            try {
                final JETCompiler jetCompiler = jetEmitter.templateURIPath == null ? new MyBaseJETCompiler(jetEmitter.templateURI, jetEmitter.encoding, jetEmitter.classLoader) : new MyBaseJETCompiler(jetEmitter.templateURIPath, jetEmitter.templateURI, jetEmitter.encoding, jetEmitter.classLoader);
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETParsing_message"", new Object[] { jetCompiler.getResolvedTemplateURI() }));
                jetCompiler.parse();
                progressMonitor.worked(1);
                String packageName = jetCompiler.getSkeleton().getPackageName();
                if (jetEmitter.templateURIPath != null) {
                    URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]);
                    URLClassLoader theClassLoader = null;
                    if (templateURI.isPlatformResource()) {
                        IProject project = workspace.getRoot().getProject(templateURI.segment(1));
                        if (JETNature.getRuntime(project) != null) {
                            List<URL> urls = new ArrayList<URL>();
                            IJavaProject javaProject = JavaCore.create(project);
                            urls.add(new File(project.getLocation() + ""/"" + javaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURL());
                            for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) {
                                if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
                                    IPath projectPath = classpathEntry.getPath();
                                    IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0));
                                    IJavaProject otherJavaProject = JavaCore.create(otherProject);
                                    urls.add(new File(otherProject.getLocation() + ""/"" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURL());
                                }
                            }
                            theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) {

                                @Override
                                public Class<?> loadClass(String className) throws ClassNotFoundException {
                                    try {
                                        return super.loadClass(className);
                                    } catch (ClassNotFoundException classNotFoundException) {
                                        return jetEmitter.classLoader.loadClass(className);
                                    }
                                }
                            };
                        }
                    } else if (templateURI.isPlatformPlugin()) {
                        final Bundle bundle = Platform.getBundle(templateURI.segment(1));
                        if (bundle != null) {
                            theClassLoader = new URLClassLoader(new URL[0], jetEmitter.classLoader) {

                                @Override
                                public Class<?> loadClass(String className) throws ClassNotFoundException {
                                    try {
                                        return bundle.loadClass(className);
                                    } catch (ClassNotFoundException classNotFoundException) {
                                        return super.loadClass(className);
                                    }
                                }
                            };
                        }
                    }
                    if (theClassLoader != null) {
                        String className = (packageName.length() == 0 ? """" : packageName + ""."") + jetCompiler.getSkeleton().getClassName();
                        if (className.endsWith(""_"")) {
                            className = className.substring(0, className.length() - 1);
                        }
                        try {
                            Class<?> theClass = theClassLoader.loadClass(className);
                            Class<?> theOtherClass = null;
                            try {
                                theOtherClass = jetEmitter.classLoader.loadClass(className);
                            } catch (ClassNotFoundException exception) {
                            }
                            if (theClass != theOtherClass) {
                                String methodName = jetCompiler.getSkeleton().getMethodName();
                                Method[] methods = theClass.getDeclaredMethods();
                                for (int i = 0; i < methods.length; ++i) {
                                    if (methods[i].getName().equals(methodName)) {
                                        jetEmitter.setMethod(methods[i]);
                                        break;
                                    }
                                }
                                return;
                            }
                        } catch (ClassNotFoundException exception) {
                        }
                    }
                }
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                jetCompiler.generate(outputStream);
                final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray());
                if (!javaModel.isOpen()) {
                    javaModel.open(new SubProgressMonitor(progressMonitor, 1));
                } else {
                    progressMonitor.worked(1);
                }
                final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName());
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETPreparingProject_message"", new Object[] { project.getName() }));
                IJavaProject javaProject;
                if (!project.exists()) {
                    progressMonitor.subTask(""JET creating project "" + project.getName());
                    project.create(new SubProgressMonitor(progressMonitor, 1));
                    progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETCreatingProject_message"", new Object[] { project.getName() }));
                    IProjectDescription description = workspace.newProjectDescription(project.getName());
                    description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                    description.setLocation(null);
                    project.open(new SubProgressMonitor(progressMonitor, 1));
                    project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
                    javaProject = JavaCore.create(project);
                    for (Map.Entry<String, String> option : jetEmitter.getJavaOptions().entrySet()) {
                        javaProject.setOption(option.getKey(), option.getValue());
                    }
                } else {
                    project.open(new SubProgressMonitor(progressMonitor, 5));
                    IProjectDescription description = project.getDescription();
                    description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                    project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
                    javaProject = JavaCore.create(project);
                }
                List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath()));
                for (int i = 0, len = classpath.size(); i < len; i++) {
                    IClasspathEntry entry = classpath.get(i);
                    if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && (""/"" + project.getName()).equals(entry.getPath().toString())) {
                        classpath.remove(i);
                    }
                }
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETInitializingProject_message"", new Object[] { project.getName() }));
                IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path(""/"" + project.getName() + ""/src""));
                IClasspathEntry jreClasspathEntry = JavaCore.newContainerEntry(new Path(""org.eclipse.jdt.launching.JRE_CONTAINER""));
                classpath.add(classpathEntry);
                classpath.add(jreClasspathEntry);
                classpath.addAll(jetEmitter.classpathEntries);
                IFolder sourceFolder = project.getFolder(new Path(""src""));
                if (!sourceFolder.exists()) {
                    sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
                }
                IFolder runtimeFolder = project.getFolder(new Path(""bin""));
                if (!runtimeFolder.exists()) {
                    runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
                }
                javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1));
                javaProject.setOutputLocation(new Path(""/"" + project.getName() + ""/bin""), new SubProgressMonitor(progressMonitor, 1));
                javaProject.close();
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETOpeningJavaProject_message"", new Object[] { project.getName() }));
                javaProject.open(new SubProgressMonitor(progressMonitor, 1));
                IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots();
                IPackageFragmentRoot sourcePackageFragmentRoot = null;
                for (int j = 0; j < packageFragmentRoots.length; ++j) {
                    IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j];
                    if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) {
                        sourcePackageFragmentRoot = packageFragmentRoot;
                        break;
                    }
                }
                StringTokenizer stringTokenizer = new StringTokenizer(packageName, ""."");
                IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);
                subProgressMonitor.beginTask("""", stringTokenizer.countTokens() + 4);
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_CreateTargetFile_message""));
                IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource();
                while (stringTokenizer.hasMoreElements()) {
                    String folderName = stringTokenizer.nextToken();
                    sourceContainer = sourceContainer.getFolder(new Path(folderName));
                    if (!sourceContainer.exists()) {
                        ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1));
                    }
                }
                IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + "".java""));
                if (!targetFile.exists()) {
                    subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETCreating_message"", new Object[] { targetFile.getFullPath() }));
                    targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1));
                } else {
                    subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETUpdating_message"", new Object[] { targetFile.getFullPath() }));
                    targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1));
                }
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETBuilding_message"", new Object[] { project.getName() }));
                project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1));
                IMarker[] markers = targetFile.findMarkers(IMarker.PROBLEM, true, IResource.DEPTH_INFINITE);
                boolean errors = false;
                for (int i = 0; i < markers.length; ++i) {
                    IMarker marker = markers[i];
                    if (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO) == IMarker.SEVERITY_ERROR) {
                        errors = true;
                        subProgressMonitor.subTask(marker.getAttribute(IMarker.MESSAGE) + "" : "" + (CodeGenPlugin.getPlugin().getString(""jet.mark.file.line"", new Object[] { targetFile.getLocation(), marker.getAttribute(IMarker.LINE_NUMBER) })));
                    }
                }
                if (!errors) {
                    subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETLoadingClass_message"", new Object[] { jetCompiler.getSkeleton().getClassName() + "".class"" }));
                    List<URL> urls = new ArrayList<URL>();
                    urls.add(new File(project.getLocation() + ""/"" + javaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURL());
                    final Set<Bundle> bundles = new HashSet<Bundle>();
                    LOOP: for (IClasspathEntry jetEmitterClasspathEntry : jetEmitter.getClasspathEntries()) {
                        IClasspathAttribute[] classpathAttributes = jetEmitterClasspathEntry.getExtraAttributes();
                        if (classpathAttributes != null) {
                            for (IClasspathAttribute classpathAttribute : classpathAttributes) {
                                if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) {
                                    Bundle bundle = Platform.getBundle(classpathAttribute.getValue());
                                    if (bundle != null) {
                                        bundles.add(bundle);
                                        continue LOOP;
                                    }
                                }
                            }
                        }
                        urls.add(new URL(""platform:/resource"" + jetEmitterClasspathEntry.getPath() + ""/""));
                    }
                    URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), jetEmitter.classLoader) {

                        @Override
                        public Class<?> loadClass(String className) throws ClassNotFoundException {
                            try {
                                return super.loadClass(className);
                            } catch (ClassNotFoundException exception) {
                                for (Bundle bundle : bundles) {
                                    try {
                                        return bundle.loadClass(className);
                                    } catch (ClassNotFoundException exception2) {
                                    }
                                }
                                throw exception;
                            }
                        }
                    };
                    Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? """" : packageName + ""."") + jetCompiler.getSkeleton().getClassName());
                    String methodName = jetCompiler.getSkeleton().getMethodName();
                    Method[] methods = theClass.getDeclaredMethods();
                    for (int i = 0; i < methods.length; ++i) {
                        if (methods[i].getName().equals(methodName)) {
                            jetEmitter.setMethod(methods[i]);
                            break;
                        }
                    }
                }
                subProgressMonitor.done();
            } catch (CoreException exception) {
                throw new JETException(exception);
            } catch (Exception exception) {
                throw new JETException(exception);
            } finally {
                progressMonitor.done();
            }
        }
"
14,"    public void googleImageSearch() {
        if (artist.compareToIgnoreCase(previousArtist) != 0) {
            MusicBoxView.googleImageLocation = 0;
            try {
                String u = ""http://images.google.com/images?q="" + currentTrack.getArtist() + "" - "" + currentTrack.getAlbum() + ""&sa=N&start=0&ndsp=21"";
                if (u.contains("" "")) {
                    u = u.replace("" "", ""+"");
                }
                URL url = new URL(u);
                HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
                httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
                BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
                String text = """";
                String lin = """";
                while ((lin = readIn.readLine()) != null) {
                    text += lin;
                }
                readIn.close();
                if (text.contains(""\n"")) {
                    text = text.replace(""\n"", """");
                }
                String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
                for (String s : array) {
                    if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                        String s1 = s.substring(0, s.indexOf(""&amp;""));
                        googleImages.add(s1);
                    }
                }
            } catch (Exception ex4) {
                MusicBoxView.showErrorDialog(ex4);
            }
        }
    }
"
1026,"    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
"
7009,"    public static String getRefCatastral(String pURL) {
        String result = new String();
        String iniPC1 = ""<pc1>"";
        String iniPC2 = ""<pc2>"";
        String finPC1 = ""</pc1>"";
        String finPC2 = ""</pc2>"";
        String iniCuerr = ""<cuerr>"";
        String finCuerr = ""</cuerr>"";
        String iniDesErr = ""<des>"";
        String finDesErr = ""</des>"";
        boolean error = false;
        int ini, fin;
        try {
            URL url = new URL(pURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                if (str.contains(iniCuerr)) {
                    ini = str.indexOf(iniCuerr) + iniCuerr.length();
                    fin = str.indexOf(finCuerr);
                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;
                }
                if (error) {
                    if (str.contains(iniDesErr)) {
                        ini = str.indexOf(iniDesErr) + iniDesErr.length();
                        fin = str.indexOf(finDesErr);
                        throw (new Exception(str.substring(ini, fin)));
                    }
                } else {
                    if (str.contains(iniPC1)) {
                        ini = str.indexOf(iniPC1) + iniPC1.length();
                        fin = str.indexOf(finPC1);
                        result = str.substring(ini, fin);
                    }
                    if (str.contains(iniPC2)) {
                        ini = str.indexOf(iniPC2) + iniPC2.length();
                        fin = str.indexOf(finPC2);
                        result = result.concat(str.substring(ini, fin));
                    }
                }
            }
            in.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
"
7976,"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
"
3960,"    private String fetchCompareContent() throws IOException {
        URL url = new URL(compareTo);
        StringWriter sw = new StringWriter();
        IOUtils.copy(url.openStream(), sw);
        return sw.getBuffer().toString();
    }
"
2686,"    public static void compress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new BufferedInputStream(new FileInputStream(srcFile));
            output = new GZIPOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }
"
5262,"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
"
6230,"    private static void init(String url) throws Exception {
        XMLReader reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
        reader.setContentHandler(new ConfigurationHandler());
        InputSource isource = new InputSource((new URL(url)).openStream());
        isource.setSystemId(url);
        reader.parse(isource);
    }
"
2028,"    private static void identify(ContentNetwork cn, String str) {
        try {
            URL url = new URL(str);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            UrlUtils.setBrowserHeaders(con, null);
            String key = ""cn."" + cn.getID() + "".identify.cookie"";
            String cookie = COConfigurationManager.getStringParameter(key, null);
            if (cookie != null) {
                con.setRequestProperty(""Cookie"", cookie + "";"");
            }
            con.setRequestProperty(""Connection"", ""close"");
            con.getResponseCode();
            cookie = con.getHeaderField(""Set-Cookie"");
            if (cookie != null) {
                String[] bits = cookie.split("";"");
                if (bits.length > 0 && bits[0].length() > 0) {
                    COConfigurationManager.setParameter(key, bits[0]);
                }
            }
        } catch (Throwable e) {
        }
    }
"
8738,"    public static String hash(String value) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(value.getBytes(""iso-8859-1""), 0, value.length());
            md5hash = md.digest();
            return Hex.encodeHexString(md5hash);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
"
630,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
"
1437,"    private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
"
338,"    protected void configure() {
        Enumeration<URL> resources = null;
        try {
            resources = classLoader.getResources(resourceName);
        } catch (IOException e) {
            binder().addError(e.getMessage(), e);
            return;
        }
        int resourceCount = 0;
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            log.debug(url + "" ..."");
            try {
                InputStream stream = url.openStream();
                Properties props = new Properties();
                props.load(stream);
                resourceCount++;
                addComponentsFromProperties(props, classLoader);
            } catch (IOException e) {
                binder().addError(e.getMessage(), e);
            }
        }
        log.info(""Added components from "" + resourceCount + "" resources."");
    }
"
3496,"    public static void moveOutputAsmFile(File inputLocation, File outputLocation) throws Exception {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            inputStream = new FileInputStream(inputLocation);
            outputStream = new FileOutputStream(outputLocation);
            byte buffer[] = new byte[1024];
            while (inputStream.available() > 0) {
                int read = inputStream.read(buffer);
                outputStream.write(buffer, 0, read);
            }
            inputLocation.delete();
        } finally {
            IOUtil.closeAndIgnoreErrors(inputStream);
            IOUtil.closeAndIgnoreErrors(outputStream);
        }
    }
"
4016,"    public boolean retrieveByPMID(String pmid) {
        try {
            URL url = new URL(baseURL + ""&id="" + pmid.trim());
            BufferedReader xml = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuffer title_sb = new StringBuffer();
            while ((line = xml.readLine()) != null) {
                if (line.indexOf(""<ArticleTitle>"") != -1) {
                    title_sb.delete(0, title_sb.length());
                    title_sb.append(line.substring(line.indexOf(""<ArticleTitle>"") + 14, line.length() - 15));
                } else if (line.indexOf(""<AbstractText>"") != -1) {
                    PrintWriter article = new PrintWriter(new FileWriter(new File(outputDir.getPath() + File.separatorChar + pmid + "".txt"")));
                    article.println(title_sb);
                    article.println(line.substring(line.indexOf(""<AbstractText>"") + 14, line.length() - 15));
                    article.close();
                    break;
                }
            }
            xml.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
"
1365,"    public boolean validateLogin(String username, String password) {
        boolean user_exists = false;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            String password_hash = hash.toString(16);
            statement = connect.prepareStatement(""SELECT id from toepen.users WHERE username = ? AND password = ?"");
            statement.setString(1, username);
            statement.setString(2, password_hash);
            resultSet = statement.executeQuery();
            while (resultSet.next()) {
                user_exists = true;
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            close();
            return user_exists;
        }
    }
"
3384,"            @Override
            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {
                expected = new StringBuilder();
                System.out.println(""uri: "" + httpServletRequest.getRequestURI());
                System.out.println(""queryString: "" + (queryString = httpServletRequest.getQueryString()));
                System.out.println(""method: "" + httpServletRequest.getMethod());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(httpServletRequest.getInputStream(), baos);
                System.out.println(""body: "" + (body = baos.toString()));
                PrintWriter writer = httpServletResponse.getWriter();
                writer.append(""testsvar"");
                expected.append(""testsvar"");
                Random r = new Random();
                for (int j = 0; j < 10; j++) {
                    int value = r.nextInt(Integer.MAX_VALUE);
                    writer.append(value + """");
                    expected.append(value);
                }
                System.out.println();
                writer.close();
                httpServletResponse.setStatus(HttpServletResponse.SC_OK);
            }
"
3561,"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
"
4389,"    private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {
        if (increasePkBy < 1) increasePkBy = 1;
        String where = ""where eoentity_name = '"" + entityName + ""'"";
        if (false) {
            EOEditingContext ec = ERXEC.newEditingContext();
            ec.lock();
            try {
                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);
                dbc.lock();
                try {
                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);
                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();
                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);
                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();
                } finally {
                    dbc.unlock();
                }
            } finally {
                ec.unlock();
            }
        } else {
            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);
            Connection con = broker.getConnection();
            try {
                try {
                    con.setAutoCommit(false);
                    con.setReadOnly(false);
                } catch (SQLException e) {
                    log.error(e, e);
                }
                for (int tries = 0; tries < count; tries++) {
                    try {
                        ResultSet resultSet = con.createStatement().executeQuery(""select pk_value from pk_table "" + where);
                        con.commit();
                        boolean hasNext = resultSet.next();
                        long pk = 1;
                        if (hasNext) {
                            pk = resultSet.getLong(""pk_value"");
                            con.createStatement().executeUpdate(""update pk_table set pk_value = "" + (pk + increasePkBy) + "" "" + where);
                        } else {
                            pk = maxIdFromTable(entityName);
                            con.createStatement().executeUpdate(""insert into pk_table (eoentity_name, pk_value) values ('"" + entityName + ""', "" + (pk + increasePkBy) + "")"");
                        }
                        con.commit();
                        return new Long(pk);
                    } catch (SQLException ex) {
                        String s = ex.getMessage().toLowerCase();
                        boolean creationError = (s.indexOf(""error code 116"") != -1);
                        creationError |= (s.indexOf(""pk_table"") != -1 && s.indexOf(""does not exist"") != -1);
                        creationError |= s.indexOf(""ora-00942"") != -1;
                        if (creationError) {
                            try {
                                con.rollback();
                                log.info(""creating pk table"");
                                con.createStatement().executeUpdate(""create table pk_table (eoentity_name varchar(100) not null, pk_value integer)"");
                                con.createStatement().executeUpdate(""alter table pk_table add primary key (eoentity_name)"");
                                con.commit();
                            } catch (SQLException ee) {
                                throw new NSForwardException(ee, ""could not create pk table"");
                            }
                        } else {
                            throw new NSForwardException(ex, ""Error fetching PK"");
                        }
                    }
                }
            } finally {
                broker.freeConnection(con);
            }
        }
        throw new IllegalStateException(""Couldn't get PK"");
    }
"
6381,"    static String fetchURLComposeExternPackageList(String urlpath, String pkglisturlpath) {
        String link = pkglisturlpath + ""package-list"";
        try {
            boolean relative = isRelativePath(urlpath);
            readPackageList((new URL(link)).openStream(), urlpath, relative);
        } catch (MalformedURLException exc) {
            return getText(""doclet.MalformedURL"", link);
        } catch (IOException exc) {
            return getText(""doclet.URL_error"", link);
        }
        return null;
    }
"
7810,"    public void putFile(CompoundName file, FileInputStream fileInput) throws IOException {
        File fullDir = new File(REMOTE_BASE_DIR.getCanonicalPath());
        for (int i = 0; i < file.size() - 1; i++) fullDir = new File(fullDir, file.get(i));
        fullDir.mkdirs();
        File outputFile = new File(fullDir, file.get(file.size() - 1));
        FileOutputStream outStream = new FileOutputStream(outputFile);
        for (int byteIn = fileInput.read(); byteIn != -1; byteIn = fileInput.read()) outStream.write(byteIn);
        fileInput.close();
        outStream.close();
    }
"
5772,"    public String downloadFromUrl(URL url) {
        BufferedReader dis;
        String content = """";
        HttpURLConnection urlConn = null;
        try {
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setDoInput(true);
            urlConn.setUseCaches(false);
            urlConn.setAllowUserInteraction(false);
            dis = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String line;
            while ((line = dis.readLine()) != null) {
                content = content.concat(line);
                content = content.concat(""\n"");
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex + "" (downloadFromUrl)"");
        } catch (java.io.IOException iox) {
            System.out.println(iox + "" (downloadFromUrl)"");
        } catch (Exception generic) {
            System.out.println(generic.toString() + "" (downloadFromUrl)"");
        } finally {
        }
        return content;
    }
"
7520,"    public Properties load() {
        Properties lvProperties = new Properties();
        try {
            InputStream lvInputStream = url.openStream();
            lvProperties.load(lvInputStream);
        } catch (Exception e) {
            throw new PropertiesLoadException(""Error in load-method:"", e);
        }
        return lvProperties;
    }
"
1082,"    final void importSelectedEntity() {
        TreePath path = projectsTree.getSelectionPath();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
        Object userObject = selectedNode.getUserObject();
        if (userObject instanceof ProjectSet) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileFilter(new FileNameExtensionFilter(""JFPSM Projects"", ""jfpsm.zip""));
            int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());
            if (result == JFileChooser.APPROVE_OPTION) {
                String fullname = fileChooser.getSelectedFile().getName();
                String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());
                ProjectSet workspace = (ProjectSet) userObject;
                boolean confirmLoad = true;
                if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {
                    confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), ""Overwrite project \"""" + projectName + ""\"""" + ""?"", ""Overwrite project"", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;
                    if (confirmLoad) {
                        final int count = selectedNode.getChildCount();
                        DefaultMutableTreeNode projectNode = null;
                        for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {
                            projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);
                            break;
                        }
                        Project project = (Project) projectNode.getUserObject();
                        for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);
                        for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);
                        workspace.removeProject(project);
                        ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);
                    }
                }
                if (confirmLoad) {
                    File projectFile = new File(workspace.createProjectPath(projectName));
                    boolean success = true;
                    try {
                        success = projectFile.createNewFile();
                        if (success) {
                            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));
                            byte[] buf = new byte[1024];
                            int len;
                            while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);
                            bis.close();
                            bos.close();
                        }
                    } catch (Throwable throwable) {
                        displayErrorMessage(throwable, false);
                        success = false;
                    }
                    if (success) addProject(projectName);
                }
            }
        } else if (userObject instanceof Map) {
            Map map = (Map) userObject;
            Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();
            importImageForSelectedMap(floor, map);
        }
    }
"
7936,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
"
6010,"    private static String connect(String apiURL, boolean secure) throws IOException {
        String baseUrl;
        if (secure) baseUrl = ""https://todoist.com/API/""; else baseUrl = ""http://todoist.com/API/"";
        URL url = new URL(baseUrl + apiURL);
        URLConnection c = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(c.getInputStream()));
        StringBuilder toReturn = new StringBuilder("""");
        String toAppend;
        while ((toAppend = in.readLine()) != null) toReturn.append(toAppend);
        return toReturn.toString();
    }
"
608,"    private void loadHtmlHeader() {
        String skinUrl = getClass().getResource(""/"" + Properties.defaultSkinFileName).toString();
        if (Properties.headerSkin != null && !Properties.headerSkin.equals("""")) {
            try {
                URL url = new URL(Properties.headerSkin);
                if (url.getProtocol().equalsIgnoreCase(""http"")) {
                    isHttpUrl = true;
                    HttpURLConnection.setFollowRedirects(false);
                    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
                    httpConn.setRequestMethod(""HEAD"");
                    boolean urlExists = (httpConn.getResponseCode() == HttpURLConnection.HTTP_OK);
                    if (urlExists) skinUrl = Properties.headerSkin;
                } else if (url.getProtocol().equalsIgnoreCase(""jar"")) {
                    String jarFile = Properties.headerSkin.substring(9).split(""!"")[0];
                    File skinFile = new File(jarFile);
                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;
                } else if (url.getProtocol().equalsIgnoreCase(""file"")) {
                    File skinFile = new File(Properties.headerSkin.substring(5));
                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;
                } else {
                    File skinFile = new File(Properties.headerSkin);
                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;
                }
            } catch (Exception ex) {
                XohmLogger.debugPrintln(""Header skin url not valid. "" + ex.getMessage());
                XohmLogger.debugPrintln(""Loading the default skin."");
                ex.printStackTrace();
            }
        }
        XohmLogger.debugPrintln(""Header skin file = "" + skinUrl);
        try {
            LocalHtmlRendererContext rendererContext = new LocalHtmlRendererContext(htmlHeaderPanel, new SimpleUserAgentContext());
            rendererContext.navigate(skinUrl);
            headerLoaded = true;
        } catch (IOException urlEx) {
            XohmLogger.debugPrintln(""Exception occured while loading the skin. "" + urlEx.getMessage());
        }
    }
"
777,"    public static String[] bubbleSort(String[] unsortedString, boolean ascending) {
        if (unsortedString.length < 2) return unsortedString;
        String[] sortedString = new String[unsortedString.length];
        for (int i = 0; i < unsortedString.length; i++) {
            sortedString[i] = unsortedString[i];
        }
        if (ascending) {
            for (int i = 0; i < sortedString.length - 1; i++) {
                for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        } else {
            for (int i = sortedString.length - 2; i >= 0; i--) {
                for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        }
        return sortedString;
    }
"
7875,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
"
1615,"    public static boolean filecopy(final File source, final File target) {
        boolean out = false;
        if (source.isDirectory() || !source.exists() || target.isDirectory() || source.equals(target)) return false;
        try {
            target.getParentFile().mkdirs();
            target.createNewFile();
            FileChannel sourceChannel = new FileInputStream(source).getChannel();
            try {
                FileChannel targetChannel = new FileOutputStream(target).getChannel();
                try {
                    targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
                    out = true;
                } finally {
                    targetChannel.close();
                }
            } finally {
                sourceChannel.close();
            }
        } catch (IOException e) {
            out = false;
        }
        return out;
    }
"
6397,"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
"
544,"    @PostConstruct
    public void init() {
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() start ++++++++"");
        try {
            tracSectionAll = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();
            URL url = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);
            tracCriteriaCheckList = new LinkedProperties();
            tracCriteriaCheckList.load(url.openStream());
            Set<String> tmpKeys = tracCriteriaCheckList.stringPropertyNames();
            List<String> sortWrkList = new ArrayList<String>();
            sortWrkList.addAll(tmpKeys);
            sortList(sortWrkList);
            for (String key : sortWrkList) {
                String aspectCode = key.substring(aspectCodeOffsetValue);
                logger.info(""aspectCode="" + aspectCode);
                if (aspectCode.startsWith(""A"")) {
                    if (aspectCode.equals(""A"")) {
                        sectionAcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""B"")) {
                    if (aspectCode.equals(""B"")) {
                        sectionBcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""C"")) {
                    if (aspectCode.equals(""C"")) {
                        sectionCcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else {
                    logger.warning(""offset value is wrong: 16th character must be A or B or C"");
                }
            }
        } catch (FileNotFoundException ex) {
            logger.log(Level.WARNING, ""specified properties file was not found"", ex);
        } catch (IOException ex) {
            logger.log(Level.WARNING, ""IO error occurred"", ex);
        } finally {
        }
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() end   ++++++++"");
    }
"
7511,"    private boolean postLogin() {
        URL url = null;
        URLConnection urlConn = null;
        OutputStream out = null;
        int code = 0;
        boolean gotPhpsessid = false;
        try {
            url = new URL(""http://"" + m_host + ""/forums/index.php?action=login2"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return false;
        }
        try {
            urlConn = url.openConnection();
            ((HttpURLConnection) urlConn).setRequestMethod(""POST"");
            ((HttpURLConnection) urlConn).setInstanceFollowRedirects(false);
            urlConn.setDoOutput(true);
            urlConn.setDoInput(true);
            urlConn.setRequestProperty(""Host"", m_host);
            urlConn.setRequestProperty(""Accept"", ""*/*"");
            urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            urlConn.setRequestProperty(""Connection"", ""Keep-Alive"");
            urlConn.setRequestProperty(""Cache-Control"", ""no-cache"");
            out = urlConn.getOutputStream();
            out.write(new String(""user="" + m_username + ""&passwrd="" + m_password + ""&cookielength=60"").getBytes());
            out.flush();
            out.close();
            do {
                readCookies(urlConn);
                m_referer = url.toString();
                code = ((HttpURLConnection) urlConn).getResponseCode();
                if (code == 301 || code == 302) {
                    url = new URL(urlConn.getHeaderField(""Location""));
                    urlConn = url.openConnection();
                    ((HttpURLConnection) urlConn).setRequestMethod(""GET"");
                    ((HttpURLConnection) urlConn).setInstanceFollowRedirects(false);
                    urlConn.setDoOutput(true);
                    urlConn.setDoInput(true);
                    urlConn.setRequestProperty(""Host"", m_host);
                    urlConn.setRequestProperty(""Accept"", ""*/*"");
                    urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    urlConn.setRequestProperty(""Connection"", ""Keep-Alive"");
                    urlConn.setRequestProperty(""Cache-Control"", ""no-cache"");
                    if (m_referer != null) urlConn.setRequestProperty(""Referer"", m_referer);
                    if (m_cookies != null) urlConn.setRequestProperty(""Cookie"", m_cookies);
                    continue;
                }
                if (code == 200) {
                    String refreshHdr = urlConn.getHeaderField(""Refresh"");
                    Pattern p_phpsessid = Pattern.compile("".*?\\?PHPSESSID=(\\w+).*"");
                    Matcher match_phpsessid = p_phpsessid.matcher(refreshHdr);
                    if (match_phpsessid.matches()) {
                        gotPhpsessid = true;
                    }
                    urlConn = null;
                    continue;
                }
                String msg = ((HttpURLConnection) urlConn).getResponseMessage();
                m_turnSummaryRef = String.valueOf(code) + "": "" + msg;
                return false;
            } while (urlConn != null);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        if (!gotPhpsessid) {
            m_turnSummaryRef = ""Error: PHPSESSID not found after login. "";
            return false;
        }
        if (m_cookies == null) {
            m_turnSummaryRef = ""Error: cookies not found after login. "";
            return false;
        }
        try {
            Thread.sleep(m_loginDelayInSeconds * 1000);
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
        return true;
    }
"
3134,"    public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) {
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                    final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                    final HttpClient httpClient = new DefaultHttpClient();
                    final HttpPost request = new HttpPost(UPLOADSCRIPT_URL);
                    final MultipartEntity requestEntity = new MultipartEntity();
                    requestEntity.addPart(""gpxfile"", new InputStreamBody(gpxInputStream, """" + System.currentTimeMillis() + "".gpx""));
                    httpClient.getParams().setBooleanParameter(""http.protocol.expect-continue"", false);
                    request.setEntity(requestEntity);
                    final HttpResponse response = httpClient.execute(request);
                    final int status = response.getStatusLine().getStatusCode();
                    if (status != HttpStatus.SC_OK) {
                        logger.error(""GPXUploader"", ""status != HttpStatus.SC_OK"");
                    } else {
                        final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()));
                        final char[] buf = new char[8 * 1024];
                        int read;
                        final StringBuilder sb = new StringBuilder();
                        while ((read = r.read(buf)) != -1) sb.append(buf, 0, read);
                        logger.debug(""GPXUploader"", ""Response: "" + sb.toString());
                    }
                } catch (final Exception e) {
                }
            }
        }).start();
    }
"
8195,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
7808,"    private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
"
2703,"    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        final EditText eText = (EditText) findViewById(R.id.address);
        final Button button = (Button) findViewById(R.id.ButtonGo);
        button.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                try {
                    HttpClient httpclient = new DefaultHttpClient();
                    HttpPost httppost = new HttpPost(""https://mt0-app.cloud.cm/rpc/json"");
                    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                    nameValuePairs.add(new BasicNameValuePair(""m"", ""login""));
                    nameValuePairs.add(new BasicNameValuePair(""c"", ""User""));
                    nameValuePairs.add(new BasicNameValuePair(""password"", ""cloudisgreat""));
                    nameValuePairs.add(new BasicNameValuePair(""alias"", ""cs588""));
                    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                    String result = """";
                    try {
                        HttpResponse response = httpclient.execute(httppost);
                        result = EntityUtils.toString(response.getEntity());
                    } catch (Exception e) {
                        result = e.getMessage();
                    }
                    LayoutInflater inflater = (LayoutInflater) WebTest.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    final View layout = inflater.inflate(R.layout.window1, null);
                    final PopupWindow popup = new PopupWindowTest(layout, 100, 100);
                    Button b = (Button) layout.findViewById(R.id.test_button);
                    b.setOnTouchListener(new OnTouchListener() {

                        @Override
                        public boolean onTouch(View v, MotionEvent event) {
                            Log.d(""Debug"", ""Button activate"");
                            popup.dismiss();
                            return false;
                        }
                    });
                    popup.showAtLocation(layout, Gravity.CENTER, 0, 0);
                    View layout2 = inflater.inflate(R.layout.window1, null);
                    final PopupWindow popup2 = new PopupWindowTest(layout2, 100, 100);
                    TextView tview = (TextView) layout2.findViewById(R.id.pagetext);
                    tview.setText(result);
                    popup2.showAtLocation(layout, Gravity.CENTER, 50, -90);
                } catch (Exception e) {
                    Log.d(""Debug"", e.toString());
                }
            }
        });
    }
"
5911,"    public static String get(String strUrl) {
        try {
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += s;
            }
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
"
2695,"    @SuppressWarnings(""static-access"")
    @RequestMapping(value = ""/upload/upload.html"", method = RequestMethod.POST)
    protected void save(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        UPLOAD_DIRECTORY = uploadDiretory();
        File diretorioUsuario = new File(UPLOAD_DIRECTORY);
        boolean diretorioCriado = false;
        if (!diretorioUsuario.exists()) {
            diretorioCriado = diretorioUsuario.mkdir();
            if (!diretorioCriado) throw new RuntimeException(""Não foi possível criar o diretório do usuário"");
        }
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            System.err.println(FileUploadController.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        }
        String filename = request.getHeader(""X-File-Name"");
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(UPLOAD_DIRECTORY + filename));
            IOUtils.copy(is, fos);
            response.setStatus(response.SC_OK);
            writer.print(""{success: true}"");
        } catch (FileNotFoundException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            System.err.println(FileUploadController.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            System.err.println(FileUploadController.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } finally {
            try {
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
"
6713,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
4481,"    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/net/ftp.xml"");
        getProject().executeTarget(""setup"");
        tmpDir = getProject().getProperty(""tmp.dir"");
        ftp = new FTPClient();
        ftpFileSep = getProject().getProperty(""ftp.filesep"");
        myFTPTask.setSeparator(ftpFileSep);
        myFTPTask.setProject(getProject());
        remoteTmpDir = myFTPTask.resolveFile(tmpDir);
        String remoteHost = getProject().getProperty(""ftp.host"");
        int port = Integer.parseInt(getProject().getProperty(""ftp.port""));
        String remoteUser = getProject().getProperty(""ftp.user"");
        String password = getProject().getProperty(""ftp.password"");
        try {
            ftp.connect(remoteHost, port);
        } catch (Exception ex) {
            connectionSucceeded = false;
            loginSuceeded = false;
            System.out.println(""could not connect to host "" + remoteHost + "" on port "" + port);
        }
        if (connectionSucceeded) {
            try {
                ftp.login(remoteUser, password);
            } catch (IOException ioe) {
                loginSuceeded = false;
                System.out.println(""could not log on to "" + remoteHost + "" as user "" + remoteUser);
            }
        }
    }
"
6923,"    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }
"
4923,"    @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(""PUT"");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("""");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
"
3955,"    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            String packageName = getClass().getName();
            packageName = packageName.substring(0, packageName.lastIndexOf("".""));
            String src = ""src"";
            if (mavenBuild) {
                src = src + File.separator + ""test"" + File.separator + ""resources"";
            }
            packageName = src + File.separator + packageName.replace('.', File.separatorChar);
            packageName += File.separator;
            packageName += fileName;
            URL url0 = new File(packageName).toURI().toURL();
            final InputStream input = url0.openStream();
            prop.load(input);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
"
1691,"    public static boolean getFile(String s, String name) {
        try {
            File f = new File(""D:\\buttons\\data\\sounds\\"" + name);
            URL url = new URL(s);
            URLConnection conn = url.openConnection();
            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
            int ch;
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(f));
            while ((ch = bis.read()) != -1) {
                bos.write(ch);
            }
            System.out.println(""wrote audio url: "" + s + "" \nto file "" + f);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
"
8403,"    void IconmenuItem5_actionPerformed(ActionEvent e) {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (getPath() != null && !getPath().equals("""")) {
            jFileChooser1.setCurrentDirectory(new File(getPath()));
            jFileChooser1.setSelectedFile(new File(getPath()));
        }
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), """", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            if (getDefaultPath() == null || getDefaultPath().equals("""")) {
                String msgString = ""E' stata selezionata un'immagine da associare all'IconShape, ma non e' "" + ""stata selezionata ancora nessun'immagine di default. Imposto quella scelta anche come "" + ""immagine di default?"";
                if (JOptionPane.showConfirmDialog(null, msgString.substring(0, Math.min(msgString.length(), getFatherPanel().MAX_DIALOG_MSG_SZ)), ""choose one"", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    setDefaultPath(newPath);
                    createDefaultImage();
                }
            }
            createImage();
        }
    }
"
702,"    private void getImage(String filename) throws MalformedURLException, IOException, SAXException, FileNotFoundException {
        String url = Constants.STRATEGICDOMINATION_URL + ""/images/gameimages/"" + filename;
        WebRequest req = new GetMethodWebRequest(url);
        SiteResponse response = getSiteResponse(req);
        File file = new File(""etc/images/"" + filename);
        FileOutputStream outputStream = new FileOutputStream(file);
        IOUtils.copy(response.getInputStream(), outputStream);
    }
"
8960,"    private boolean copy_to_file_io(File src, File dst) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(src);
            is = new BufferedInputStream(is);
            os = new FileOutputStream(dst);
            os = new BufferedOutputStream(os);
            byte buffer[] = new byte[1024 * 64];
            int read;
            while ((read = is.read(buffer)) > 0) {
                os.write(buffer, 0, read);
            }
            return true;
        } finally {
            try {
                if (is != null) is.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
            try {
                if (os != null) os.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
        }
    }
"
1594,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            log.error(e.getMessage());
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }
"
5325,"    public JGroundStationBrowser(Frame parent) {
        this.parent = parent;
        initComponents();
        topTreeNode = new DefaultMutableTreeNode(""Ground Stations"");
        treeModel = new DefaultTreeModel(topTreeNode);
        groundStationTree.setModel(treeModel);
        String currentSecondaryNodeName = null;
        DefaultMutableTreeNode currentSecondaryNode = null;
        try {
            BufferedReader gsReader = null;
            if (new File(groundStationDB).exists()) {
                File gsFile = new File(groundStationDB);
                FileReader gsFileReader = new FileReader(gsFile);
                gsReader = new BufferedReader(gsFileReader);
            } else {
                URL url = new URL(""http://www.gano.name/shawn/JSatTrak/"" + groundStationDB);
                URLConnection c = url.openConnection();
                InputStreamReader isr = new InputStreamReader(c.getInputStream());
                gsReader = new BufferedReader(isr);
            }
            String nextLine = null;
            int gsCount = 0;
            while ((nextLine = gsReader.readLine()) != null) {
                String[] elements = nextLine.split("","");
                if (elements.length == 5) {
                    String network = elements[0];
                    String stationName = elements[1];
                    double stationLat = Double.parseDouble(elements[2]);
                    double stationLon = Double.parseDouble(elements[3]);
                    double stationAlt = Double.parseDouble(elements[4]);
                    gsHash.put(stationName, new double[] { stationLat, stationLon, stationAlt });
                    if (!network.equalsIgnoreCase(currentSecondaryNodeName)) {
                        currentSecondaryNode = new DefaultMutableTreeNode(network);
                        topTreeNode.add(currentSecondaryNode);
                        currentSecondaryNodeName = network;
                    }
                    currentSecondaryNode.add(new DefaultMutableTreeNode(stationName));
                    gsCount++;
                }
            }
            gsReader.close();
            if (new File(groundStationCustomDB).exists()) {
                File gsFile = new File(groundStationCustomDB);
                FileReader gsFileReader = new FileReader(gsFile);
                gsReader = new BufferedReader(gsFileReader);
                customSecondaryNode = new DefaultMutableTreeNode(""Custom"");
                topTreeNode.add(customSecondaryNode);
                while ((nextLine = gsReader.readLine()) != null) {
                    String[] elements = nextLine.split("","");
                    if (elements.length == 5) {
                        String network = elements[0];
                        String stationName = elements[1];
                        double stationLat = Double.parseDouble(elements[2]);
                        double stationLon = Double.parseDouble(elements[3]);
                        double stationAlt = Double.parseDouble(elements[4]);
                        gsHash.put(stationName, new double[] { stationLat, stationLon, stationAlt });
                        customSecondaryNode.add(new DefaultMutableTreeNode(stationName));
                        gsCount++;
                    }
                }
                gsReader.close();
            } else {
                customSecondaryNode = new DefaultMutableTreeNode(""Custom"");
                topTreeNode.add(customSecondaryNode);
            }
            statusTextField.setText(""Total Ground Stations loaded: "" + gsCount);
            groundStationTree.expandRow(0);
        } catch (Exception e) {
            System.out.println(""ERROR IN GROUND STATION READING POSSIBLE FILE FORMAT OR MISSING FILES:"");
            e.printStackTrace();
            JOptionPane.showMessageDialog(parent, ""Error Loading Ground Station Data. Check data.\n"" + e.toString(), ""Data LOADING ERROR"", JOptionPane.ERROR_MESSAGE);
        }
        groundStationTree.setTransferHandler(new TreeGroundStationTransferHandler(gsHash));
        groundStationTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
    }
"
6570,"    private void processar() {
        boolean bOK = false;
        String sSQL = ""DELETE FROM FNSALDOLANCA WHERE CODEMP=? AND CODFILIAL=?"";
        try {
            state(""Excluindo base atual de saldos..."");
            PreparedStatement ps = con.prepareStatement(sSQL);
            ps.setInt(1, Aplicativo.iCodEmp);
            ps.setInt(2, ListaCampos.getMasterFilial(""FNSALDOLANCA""));
            ps.executeUpdate();
            ps.close();
            state(""Base excluida..."");
            bOK = true;
        } catch (SQLException err) {
            Funcoes.mensagemErro(this, ""Erro ao excluir os saldos!\n"" + err.getMessage(), true, con, err);
            err.printStackTrace();
        }
        if (bOK) {
            bOK = false;
            sSQL = ""SELECT CODPLAN,DATASUBLANCA,SUM(VLRSUBLANCA) VLRSUBLANCA FROM "" + ""FNSUBLANCA WHERE CODEMP=? AND CODFILIAL=? GROUP BY CODPLAN,DATASUBLANCA "" + ""ORDER BY CODPLAN,DATASUBLANCA"";
            try {
                state(""Iniciando reconstru��o..."");
                PreparedStatement ps = con.prepareStatement(sSQL);
                ps.setInt(1, Aplicativo.iCodEmp);
                ps.setInt(2, ListaCampos.getMasterFilial(""FNLANCA""));
                ResultSet rs = ps.executeQuery();
                String sPlanAnt = """";
                double dSaldo = 0;
                bOK = true;
                int iFilialPlan = ListaCampos.getMasterFilial(""FNPLANEJAMENTO"");
                int iFilialSaldo = ListaCampos.getMasterFilial(""FNSALDOLANCA"");
                while (rs.next() && bOK) {
                    if (""1010100000004"".equals(rs.getString(""CodPlan""))) {
                        System.out.println(""Debug"");
                    }
                    if (sPlanAnt.equals(rs.getString(""CodPlan""))) {
                        dSaldo += rs.getDouble(""VLRSUBLANCA"");
                    } else dSaldo = rs.getDouble(""VLRSUBLANCA"");
                    bOK = insereSaldo(iFilialSaldo, iFilialPlan, rs.getString(""CodPlan""), rs.getDate(""DataSubLanca""), dSaldo);
                    sPlanAnt = rs.getString(""CodPlan"");
                    if (""1010100000004"".equals(sPlanAnt)) {
                        System.out.println(""Debug"");
                    }
                }
                ps.close();
                state(""Aguardando grava��o final..."");
            } catch (SQLException err) {
                bOK = false;
                Funcoes.mensagemErro(this, ""Erro ao excluir os lan�amentos!\n"" + err.getMessage(), true, con, err);
                err.printStackTrace();
            }
        }
        try {
            if (bOK) {
                con.commit();
                state(""Registros processados com sucesso!"");
            } else {
                state(""Registros antigos restaurados!"");
                con.rollback();
            }
        } catch (SQLException err) {
            Funcoes.mensagemErro(this, ""Erro ao relizar precedimento!\n"" + err.getMessage(), true, con, err);
            err.printStackTrace();
        }
        bRunProcesso = false;
        btProcessar.setEnabled(true);
    }
"
7113,"    private static void checkClients() {
        try {
            sendMultiListEntry('l');
        } catch (Exception e) {
            if (Util.getDebugLevel() > 90) e.printStackTrace();
        }
        try {
            if (CANT_CHECK_CLIENTS != null) KeyboardHero.removeStatus(CANT_CHECK_CLIENTS);
            URL url = new URL(URL_STR + ""?req=clients"" + (server != null ? ""&port="" + server.getLocalPort() : """"));
            URLConnection connection = url.openConnection(getProxy());
            connection.setRequestProperty(""User-Agent"", USER_AGENT);
            BufferedReader bufferedRdr = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String ln;
            if (Util.getDebugLevel() > 30) Util.debug(""URL: "" + url);
            while ((ln = bufferedRdr.readLine()) != null) {
                String[] parts = ln.split("":"", 2);
                if (parts.length < 2) {
                    Util.debug(12, ""Line read in checkClients: "" + ln);
                    continue;
                }
                try {
                    InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]));
                    boolean notFound = true;
                    if (Util.getDebugLevel() > 25) Util.debug(""NEW Address: "" + address.toString());
                    synchronized (clients) {
                        Iterator<Client> iterator = clients.iterator();
                        while (iterator.hasNext()) {
                            final Client client = iterator.next();
                            if (client.socket.isClosed()) {
                                iterator.remove();
                                continue;
                            }
                            if (Util.getDebugLevel() > 26 && client.address != null) Util.debug(""Address: "" + client.address.toString());
                            if (address.equals(client.address)) {
                                notFound = false;
                                break;
                            }
                        }
                    }
                    if (notFound) {
                        connectClient(address);
                    }
                } catch (NumberFormatException e) {
                }
            }
            bufferedRdr.close();
        } catch (MalformedURLException e) {
            Util.conditionalError(PORT_IN_USE, ""Err_PortInUse"");
            Util.error(Util.getMsg(""Err_CantCheckClients""));
        } catch (FileNotFoundException e) {
            Util.error(Util.getMsg(""Err_CantCheckClients_Proxy""), Util.getMsg(""Err_FileNotFound""));
        } catch (SocketException e) {
            Util.error(Util.getMsg(""Err_CantCheckClients_Proxy""), e.getLocalizedMessage());
        } catch (Exception e) {
            CANT_CHECK_CLIENTS.setException(e.toString());
            KeyboardHero.addStatus(CANT_CHECK_CLIENTS);
        }
    }
"
7403,"    public static Image loadImage(URL url) throws IOException {
        BufferedInputStream in = new BufferedInputStream(url.openStream());
        try {
            return getLoader(url.getFile()).loadImage(in);
        } finally {
            in.close();
        }
    }
"
3279,"    public static String hash(String str) {
        MessageDigest summer;
        try {
            summer = MessageDigest.getInstance(""md5"");
            summer.update(str.getBytes());
        } catch (NoSuchAlgorithmException ex) {
            return null;
        }
        BigInteger hash = new BigInteger(1, summer.digest());
        String hashword = hash.toString(16);
        return hashword;
    }
"
5388,"    public Epg unmarshallFromUrl(URL url) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String tmp = null;
        StringBuilder buffer = new StringBuilder();
        while ((tmp = reader.readLine()) != null) {
            buffer.append(tmp);
        }
        return unmarshall(buffer.toString().getBytes());
    }
"
4150,"    public void putFullDirectory(final String ftpURL, final String remoteDir, final String userId, final String pwd, final String localDir) throws Exception {
        if (!Strings.isPopulated(ftpURL)) {
            Util.dspmsg(""Need an FTP url."");
            return;
        }
        if (!Strings.isPopulated(remoteDir)) {
            Util.dspmsg(""Need a remote directory."");
            return;
        }
        if (!Strings.isPopulated(userId)) {
            Util.dspmsg(""Need a user ID."");
            return;
        }
        if (!Strings.isPopulated(pwd)) {
            Util.dspmsg(""Need a password."");
            return;
        }
        if (!Strings.isPopulated(localDir)) {
            Util.dspmsg(""Need a local directory."");
            return;
        }
        FTPClient c = new FTPClient();
        c.connect(ftpURL);
        int replyCode = c.getReplyCode();
        if (!FTPReply.isPositiveCompletion(replyCode)) {
            Util.dspmsg(""Could not connect, code: "" + replyCode);
            c.disconnect();
            return;
        }
        if (!c.login(userId, pwd)) {
            Util.dspmsg(""Could not log on, userId: "" + userId + "" pwd: "" + pwd);
            return;
        }
        StringTokenizer st = new StringTokenizer(remoteDir, ""/"");
        while (st.hasMoreElements()) {
            if (!chgDir(c, st.nextToken())) {
                return;
            }
        }
        c.setFileType(FTP.BINARY_FILE_TYPE);
        File file = new File(localDir);
        if (file.isDirectory()) {
            FOR: for (File f : file.listFiles()) {
                if (!put(c, f)) {
                    break FOR;
                }
            }
        } else {
            put(c, file);
        }
        c.logout();
        c.disconnect();
    }
"
7991,"    public void save(UploadedFile file, Long student, Long activity) {
        File destiny = new File(fileFolder, student + ""_"" + activity + ""_"" + file.getFileName());
        try {
            IOUtils.copy(file.getFile(), new FileOutputStream(destiny));
        } catch (IOException e) {
            throw new RuntimeException(""Erro ao copiar o arquivo."", e);
        }
    }
"
7130,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
367,"    @Override
    public final boolean save() throws RecordException, RecordValidationException, RecordValidationSyntax {
        if (frozen) {
            throw new RecordException(""The object is frozen."");
        }
        boolean toReturn = false;
        Class<? extends Record> actualClass = this.getClass();
        HashMap<String, Integer> columns = getColumns(TableNameResolver.getTableName(actualClass));
        Connection conn = ConnectionManager.getConnection();
        LoggableStatement pStat = null;
        try {
            if (exists()) {
                doValidations(true);
                StatementBuilder builder = new StatementBuilder(""update "" + TableNameResolver.getTableName(actualClass) + "" set"");
                String updates = """";
                for (String key : columns.keySet()) {
                    if (!key.equals(""id"")) {
                        Field f = null;
                        try {
                            f = FieldHandler.findField(actualClass, key);
                        } catch (FieldOrMethodNotFoundException e) {
                            throw new RecordException(""Database column name >"" + key + ""< not found in class "" + actualClass.getCanonicalName());
                        }
                        updates += key + "" = :"" + key + "", "";
                        builder.set(key, FieldHandler.getValue(f, this));
                    }
                }
                builder.append(updates.substring(0, updates.length() - 2));
                builder.append(""where id = :id"");
                builder.set("":id"", FieldHandler.getValue(FieldHandler.findField(actualClass, ""id""), this));
                pStat = builder.getPreparedStatement(conn);
                log.log(pStat.getQueryString());
                int i = pStat.executeUpdate();
                toReturn = i == 1;
            } else {
                doValidations(false);
                StatementBuilder builder = new StatementBuilder(""insert into "" + TableNameResolver.getTableName(actualClass) + "" "");
                String names = """";
                String values = """";
                for (String key : columns.keySet()) {
                    Field f = null;
                    try {
                        f = FieldHandler.findField(actualClass, key);
                    } catch (FieldOrMethodNotFoundException e) {
                        throw new RecordException(""Database column name >"" + key + ""< not found in class "" + actualClass.getCanonicalName());
                    }
                    if (key.equals(""id"") && (Integer) FieldHandler.getValue(f, this) == 0) {
                        continue;
                    }
                    names += key + "", "";
                    values += "":"" + key + "", "";
                    builder.set(key, f.get(this));
                }
                names = names.substring(0, names.length() - 2);
                values = values.substring(0, values.length() - 2);
                builder.append(""("" + names + "")"");
                builder.append(""values"");
                builder.append(""("" + values + "")"");
                pStat = builder.getPreparedStatement(conn);
                log.log(pStat.getQueryString());
                int i = pStat.executeUpdate();
                toReturn = i == 1;
            }
            if (childList != null) {
                if (childObjects == null) {
                    childObjects = new HashMap<Class<? extends Record>, Record>();
                }
                for (Class<? extends Record> c : childList.keySet()) {
                    if (childObjects.get(c) != null) {
                        childObjects.get(c).save();
                    }
                }
            }
            if (childrenList != null) {
                if (childrenObjects == null) {
                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();
                }
                for (Class<? extends Record> c : childrenList.keySet()) {
                    if (childrenObjects.get(c) != null) {
                        for (Record r : childrenObjects.get(c)) {
                            r.save();
                        }
                    }
                }
            }
            if (relatedList != null) {
                if (childrenObjects == null) {
                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();
                }
                for (Class<? extends Record> c : relatedList.keySet()) {
                    if (childrenObjects.get(c) != null) {
                        for (Record r : childrenObjects.get(c)) {
                            r.save();
                        }
                    }
                }
            }
            return toReturn;
        } catch (Exception e) {
            if (e instanceof RecordValidationException) {
                throw (RecordValidationException) e;
            }
            if (e instanceof RecordValidationSyntax) {
                throw (RecordValidationSyntax) e;
            }
            try {
                conn.rollback();
            } catch (SQLException e1) {
                throw new RecordException(""Error executing rollback"");
            }
            throw new RecordException(e);
        } finally {
            try {
                if (pStat != null) {
                    pStat.close();
                }
                conn.commit();
                conn.close();
            } catch (SQLException e) {
                throw new RecordException(""Error closing connection"");
            }
        }
    }
"
7758,"    public boolean doUpload(int count) {
        String objFileName = Long.toString(new java.util.Date().getTime()) + Integer.toString(count);
        try {
            this.objectFileName[count] = objFileName + ""_bak."" + this.sourceFileExt[count];
            File objFile = new File(this.contextPath + ""/"" + this.savePath, this.objectFileName[count]);
            if (objFile.exists()) {
                this.doUpload(count);
            } else {
                objFile.createNewFile();
            }
            FileOutputStream fos = new FileOutputStream(objFile);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            int readLength = 0;
            int offset = 0;
            String str = """";
            long readSize = 0L;
            while ((readLength = this.inStream.readLine(this.b, 0, this.b.length)) != -1) {
                str = new String(this.b, 0, readLength);
                if (str.indexOf(""Content-Type:"") != -1) {
                    break;
                }
            }
            this.inStream.readLine(this.b, 0, this.b.length);
            while ((readLength = this.inStream.readLine(this.b, 0, b.length)) != -1) {
                str = new String(this.b, 0, readLength);
                if (this.b[0] == 45 && this.b[1] == 45 && this.b[2] == 45 && this.b[3] == 45 && this.b[4] == 45) {
                    break;
                }
                bos.write(this.b, 0, readLength);
                readSize += readLength;
                if (readSize > this.size) {
                    this.fileMessage[count] = ""�ϴ��ļ������ļ���С�������ƣ�"";
                    this.ok = false;
                    break;
                }
            }
            if (this.ok) {
                bos.flush();
                bos.close();
                int fileLength = (int) (objFile.length());
                byte[] bb = new byte[fileLength - 2];
                FileInputStream fis = new FileInputStream(objFile);
                BufferedInputStream bis = new BufferedInputStream(fis);
                bis.read(bb, 0, (fileLength - 2));
                fis.close();
                bis.close();
                this.objectFileName[count] = objFileName + ""."" + this.sourceFileExt[count];
                File ok_file = new File(this.contextPath + ""/"" + this.savePath, this.objectFileName[count]);
                ok_file.createNewFile();
                BufferedOutputStream bos_ok = new BufferedOutputStream(new FileOutputStream(ok_file));
                bos_ok.write(bb);
                bos_ok.close();
                objFile.delete();
                this.fileMessage[count] = ""OK"";
                return true;
            } else {
                bos.flush();
                bos.close();
                File delFile = new File(this.contextPath + ""/"" + this.savePath, this.objectFileName[count]);
                delFile.delete();
                this.objectFileName[count] = ""none"";
                return false;
            }
        } catch (Exception e) {
            this.objectFileName[count] = ""none"";
            this.fileMessage[count] = e.toString();
            return false;
        }
    }
"
6696,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
"
2474,"    public static void main(String[] args) throws IOException {
        String uri = ""hdfs://localhost:8020/user/leeing/maxtemp/sample.txt"";
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        FSDataInputStream in = null;
        try {
            in = fs.open(new Path(uri));
            IOUtils.copyBytes(in, System.out, 8192, false);
            System.out.println(""\n"");
            in.seek(0);
            IOUtils.copyBytes(in, System.out, 8192, false);
        } finally {
            IOUtils.closeStream(in);
        }
    }
"
5344,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
"
5168,"    public String generateKey(String className, String methodName, String text, String meaning) {
        if (text == null) {
            return null;
        }
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Error initializing MD5"", e);
        }
        try {
            md5.update(text.getBytes(""UTF-8""));
            if (meaning != null) {
                md5.update(meaning.getBytes(""UTF-8""));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""UTF-8 unsupported"", e);
        }
        return StringUtils.toHexString(md5.digest());
    }
"
8499,"    public static String httpGetJson(final List<NameValuePair> nameValuePairs) {
        HttpClient httpclient = null;
        String data = """";
        URI uri = null;
        try {
            final String paramString = URLEncodedUtils.format(nameValuePairs, ""utf-8"");
            if (HTTPS) {
                final SchemeRegistry schemeRegistry = new SchemeRegistry();
                schemeRegistry.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));
                final HttpParams params = new BasicHttpParams();
                final SingleClientConnManager mgr = new SingleClientConnManager(params, schemeRegistry);
                httpclient = new DefaultHttpClient(mgr, params);
                uri = new URI(DEADDROPS_SERVER_URL_HTTPS + ""?"" + paramString);
            } else {
                httpclient = new DefaultHttpClient();
                uri = new URI(DEADDROPS_SERVER_URL + ""?"" + paramString);
            }
            final HttpGet request = new HttpGet();
            request.setURI(uri);
            final HttpResponse response = httpclient.execute(request);
            final BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) data += inputLine;
            in.close();
        } catch (final URISyntaxException e) {
            e.printStackTrace();
            return null;
        } catch (final ClientProtocolException e) {
            e.printStackTrace();
            return null;
        } catch (final IOException e) {
            e.printStackTrace();
            return null;
        }
        return data;
    }
"
4570,"    private boolean tryGet(String url, Hashtable<String, String> req) throws Exception {
        boolean result = false;
        Enumeration<String> keys = req.keys();
        String key;
        String value;
        String data = """";
        while (keys.hasMoreElements()) {
            key = keys.nextElement();
            value = req.get(key);
            data += URLEncoder.encode(key, ""UTF-8"") + ""="" + URLEncoder.encode(value, ""UTF-8"") + ""&"";
        }
        URLConnection conn = new URL(url).openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(data);
        wr.flush();
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String line;
        while ((line = rd.readLine()) != null) {
            if (line != null) result = true;
        }
        wr.close();
        rd.close();
        result = true;
        return result;
    }
"
5670,"    private void handleURL() throws JspException, IOException {
        Map in_map = prepareInputMap();
        String in_str = JSONTransformer.serialize(in_map);
        byte[] input = in_str.getBytes(""UTF-8"");
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setUseCaches(false);
        conn.connect();
        OutputStream os = conn.getOutputStream();
        os.write(input);
        os.close();
        InputStream is = conn.getInputStream();
        InputStreamReader reader = new InputStreamReader(is, ""UTF-8"");
        StringBuffer s_buf = new StringBuffer();
        char[] tmp_buf = new char[1024];
        int count;
        while ((count = reader.read(tmp_buf)) != -1) {
            if (count == 0) continue;
            s_buf.append(tmp_buf, 0, count);
        }
        reader.close();
        Map out_map = null;
        try {
            out_map = JSONTransformer.parseObject(s_buf.toString());
        } catch (ParseException e) {
            returnErrorResult(e.getMessage());
        }
        handleResultMap(out_map);
    }
"
2460,"    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println(""opening socket to "" + address + "" on "" + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println(""header: "" + header);
                List<String> parts = header.getFilename().getSegments();
                String filename;
                if (parts.size() > 0) filename = ""dl-"" + parts.get(parts.size() - 1); else filename = ""dl-"" + session.getScreenname();
                System.out.println(""writing to file "" + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println(""sending header: "" + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println(""transferred "" + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println(""finished transfer!"");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
"
1080,"    public static final String MD5(String value) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            String newValue = hash.toString(16);
            return newValue;
        } catch (NoSuchAlgorithmException ns) {
            ns.printStackTrace();
            return null;
        }
    }
"
2004,"    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
"
4907,"    public synchronized String encrypt(final String pPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(pPassword.getBytes(""UTF-8""));
        final byte raw[] = md.digest();
        return BASE64Encoder.encodeBuffer(raw);
    }
"
7787,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
4955,"    private static String getTemplatePluginsXML(CommandLine commandLine) {
        String urlString = commandLine.getOptionValue(CMD_LINE_PLUGINSXMLTEMPLATE_OPTION);
        URL url = null;
        try {
            url = new URL(urlString);
        } catch (MalformedURLException ex) {
            throw new RuntimeException(""Could not convert to URL: '"" + urlString + ""'"", ex);
        }
        String templatePluginsXML = null;
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                templatePluginsXML = IOUtils.toString(in);
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (IOException ex) {
            throw new RuntimeException(""Could not load plugins metadata from: "" + url.toExternalForm(), ex);
        }
        if (templatePluginsXML == null || templatePluginsXML.trim().length() == 0) {
            throw new RuntimeException(""Template plugins.xml has no content: "" + url.toExternalForm());
        }
        System.out.println(""Template plugins XML:\t"" + url.toExternalForm());
        return templatePluginsXML;
    }
"
5363,"    public void read(final URL url) throws IOException, DataFormatException {
        final URLConnection connection = url.openConnection();
        final int fileSize = connection.getContentLength();
        if (fileSize < 0) {
            throw new FileNotFoundException(url.getFile());
        }
        final String mimeType = connection.getContentType();
        decoder = FontRegistry.getFontProvider(mimeType);
        if (decoder == null) {
            throw new DataFormatException(""Unsupported format"");
        }
        decoder.read(url);
    }
"
7321,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
7572,"    public static void main(String[] args) throws Exception {
        String codecClassname = args[0];
        Class<?> codecClass = Class.forName(codecClassname);
        Configuration conf = new Configuration();
        CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);
        CompressionOutputStream out = codec.createOutputStream(System.out);
        IOUtils.copyBytes(System.in, out, 4096, false);
        out.finish();
    }
"
5532,"    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md4result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD4"", new BouncyCastleProvider());
            md.reset();
            md.update(input.getBytes(""UnicodeLittleUnmarked""));
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md4result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (UnsupportedEncodingException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        }
        return (md4result.toString());
    }
"
5676,"    protected void migrateOnDemand() {
        try {
            if (fso.fileExists(prefix + "".fat"") && !fso.fileExists(prefix + EXTENSIONS[UBM_FILE])) {
                RandomAccessFile ubm, meta, ctr, rbm;
                InputStream inputStream;
                OutputStream outputStream;
                fso.renameFile(prefix + "".fat"", prefix + EXTENSIONS[UBM_FILE]);
                ubm = fso.openFile(prefix + EXTENSIONS[UBM_FILE], ""rw"");
                meta = fso.openFile(prefix + EXTENSIONS[MTD_FILE], ""rw"");
                ctr = fso.openFile(prefix + EXTENSIONS[CTR_FILE], ""rw"");
                ubm.seek(ubm.length() - 16);
                meta.writeInt(blockSize = ubm.readInt());
                meta.writeInt(size = ubm.readInt());
                ctr.setLength(ubm.readLong() + blockSize);
                ctr.close();
                meta.close();
                ubm.setLength(ubm.length() - 16);
                ubm.seek(0);
                rbm = fso.openFile(prefix + EXTENSIONS[UBM_FILE], ""rw"");
                inputStream = new BufferedInputStream(new RandomAccessFileInputStream(ubm));
                outputStream = new BufferedOutputStream(new RandomAccessFileOutputStream(rbm));
                for (int b; (b = inputStream.read()) != -1; ) outputStream.write(b);
                outputStream.close();
                inputStream.close();
                rbm.close();
                ubm.close();
            }
        } catch (IOException ie) {
            throw new WrappingRuntimeException(ie);
        }
    }
"
8442,"    private ZipOutputStream copyOOXMLContent(String signatureZipEntryName, OutputStream signedOOXMLOutputStream) throws IOException, ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException {
        ZipOutputStream zipOutputStream = new ZipOutputStream(signedOOXMLOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(this.getOfficeOpenXMLDocumentURL().openStream());
        ZipEntry zipEntry;
        boolean hasOriginSigsRels = false;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            LOG.debug(""copy ZIP entry: "" + zipEntry.getName());
            ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
            zipOutputStream.putNextEntry(newZipEntry);
            if (""[Content_Types].xml"".equals(zipEntry.getName())) {
                Document contentTypesDocument = loadDocumentNoClose(zipInputStream);
                Element typesElement = contentTypesDocument.getDocumentElement();
                Element overrideElement = contentTypesDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/content-types"", ""Override"");
                overrideElement.setAttribute(""PartName"", ""/"" + signatureZipEntryName);
                overrideElement.setAttribute(""ContentType"", ""application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml"");
                typesElement.appendChild(overrideElement);
                Element nsElement = contentTypesDocument.createElement(""ns"");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, ""xmlns:tns"", ""http://schemas.openxmlformats.org/package/2006/content-types"");
                NodeList nodeList = XPathAPI.selectNodeList(contentTypesDocument, ""/tns:Types/tns:Default[@Extension='sigs']"", nsElement);
                if (0 == nodeList.getLength()) {
                    Element defaultElement = contentTypesDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/content-types"", ""Default"");
                    defaultElement.setAttribute(""Extension"", ""sigs"");
                    defaultElement.setAttribute(""ContentType"", ""application/vnd.openxmlformats-package.digital-signature-origin"");
                    typesElement.appendChild(defaultElement);
                }
                writeDocumentNoClosing(contentTypesDocument, zipOutputStream, false);
            } else if (""_rels/.rels"".equals(zipEntry.getName())) {
                Document relsDocument = loadDocumentNoClose(zipInputStream);
                Element nsElement = relsDocument.createElement(""ns"");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, ""xmlns:tns"", ""http://schemas.openxmlformats.org/package/2006/relationships"");
                NodeList nodeList = XPathAPI.selectNodeList(relsDocument, ""/tns:Relationships/tns:Relationship[@Target='_xmlsignatures/origin.sigs']"", nsElement);
                if (0 == nodeList.getLength()) {
                    Element relationshipElement = relsDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/relationships"", ""Relationship"");
                    relationshipElement.setAttribute(""Id"", ""rel-id-"" + UUID.randomUUID().toString());
                    relationshipElement.setAttribute(""Type"", ""http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin"");
                    relationshipElement.setAttribute(""Target"", ""_xmlsignatures/origin.sigs"");
                    relsDocument.getDocumentElement().appendChild(relationshipElement);
                }
                writeDocumentNoClosing(relsDocument, zipOutputStream, false);
            } else if (""_xmlsignatures/_rels/origin.sigs.rels"".equals(zipEntry.getName())) {
                hasOriginSigsRels = true;
                Document originSignRelsDocument = loadDocumentNoClose(zipInputStream);
                Element relationshipElement = originSignRelsDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/relationships"", ""Relationship"");
                String relationshipId = ""rel-"" + UUID.randomUUID().toString();
                relationshipElement.setAttribute(""Id"", relationshipId);
                relationshipElement.setAttribute(""Type"", ""http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature"");
                String target = FilenameUtils.getName(signatureZipEntryName);
                LOG.debug(""target: "" + target);
                relationshipElement.setAttribute(""Target"", target);
                originSignRelsDocument.getDocumentElement().appendChild(relationshipElement);
                writeDocumentNoClosing(originSignRelsDocument, zipOutputStream, false);
            } else {
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        if (false == hasOriginSigsRels) {
            addOriginSigsRels(signatureZipEntryName, zipOutputStream);
            addOriginSigs(zipOutputStream);
        }
        zipInputStream.close();
        return zipOutputStream;
    }
"
1731,"    private static String sendRPC(String xml) throws MalformedURLException, IOException {
        String str = """";
        String strona = OSdbServer;
        String logowanie = xml;
        URL url = new URL(strona);
        URLConnection connection = url.openConnection();
        connection.setRequestProperty(""Connection"", ""Close"");
        connection.setRequestProperty(""Content-Type"", ""text/xml"");
        connection.setDoOutput(true);
        connection.getOutputStream().write(logowanie.getBytes(""UTF-8""));
        Scanner in;
        in = new Scanner(connection.getInputStream());
        while (in.hasNextLine()) {
            str += in.nextLine();
        }
        ;
        return str;
    }
"
2833,"    protected static InputStream loadResource(String resource) throws MissingResourceException {
        Thread thread = Thread.currentThread();
        ClassLoader cLoader = thread.getContextClassLoader();
        URL url = cLoader.getResource(resource);
        if (url == null) {
            throw new MissingResourceException(""Unable to find resource '"" + resource + ""'."", resource, resource);
        }
        try {
            InputStream is = url.openStream();
            return is;
        } catch (IOException e) {
            throw new MissingResourceException(""Unable to load resource '"" + resource + ""' (IOException)."", resource, resource);
        }
    }
"
5514,"    public ArrayList<Tweet> getTimeLine() {
        try {
            HttpGet get = new HttpGet(""http://api.linkedin.com/v1/people/~/network/updates?scope=self"");
            consumer.sign(get);
            HttpClient client = new DefaultHttpClient();
            HttpResponse response = client.execute(get);
            if (response != null) {
                int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode != 200) {
                    this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
                    return null;
                }
                StringBuffer sBuf = new StringBuffer();
                String linea;
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), ""UTF-8""));
                while ((linea = reader.readLine()) != null) {
                    sBuf.append(linea);
                }
                reader.close();
                response.getEntity().consumeContent();
                get.abort();
                SAXParserFactory spf = SAXParserFactory.newInstance();
                StringReader XMLout = new StringReader(sBuf.toString());
                SAXParser sp = spf.newSAXParser();
                XMLReader xr = sp.getXMLReader();
                xmlParserLinkedin gwh = new xmlParserLinkedin();
                xr.setContentHandler(gwh);
                xr.parse(new InputSource(XMLout));
                return gwh.getParsedData();
            }
        } catch (UnsupportedEncodingException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (IOException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (OAuthMessageSignerException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (OAuthExpectationFailedException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (OAuthCommunicationException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (ParserConfigurationException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        } catch (SAXException e) {
            this.enviarMensaje(""Error: No ha sido posible recoger el timeline de Linkedin"");
        }
        return null;
    }
"
3928,"    private String hashPassword(String password) {
        if (password != null && password.trim().length() > 0) {
            try {
                MessageDigest md5 = MessageDigest.getInstance(""MD5"");
                md5.update(password.trim().getBytes());
                BigInteger hash = new BigInteger(1, md5.digest());
                return hash.toString(16);
            } catch (NoSuchAlgorithmException nsae) {
            }
        }
        return null;
    }
"
7305,"    public void copyContent(long mailId1, long mailId2) throws Exception {
        File file1 = new File(this.getMailDir(mailId1) + ""/"");
        File file2 = new File(this.getMailDir(mailId2) + ""/"");
        this.recursiveDir(file2);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; i++) {
                    if (files[i].isFile()) {
                        File file2s = new File(file2.getAbsolutePath() + ""/"" + files[i].getName());
                        if (!file2s.exists()) {
                            file2s.createNewFile();
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s));
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i]));
                            int read;
                            while ((read = in.read()) != -1) {
                                out.write(read);
                            }
                            out.flush();
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ex1) {
                                    ex1.printStackTrace();
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
"
6124,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
"
224,"    public String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
"
6004,"    @Before
    public void setUp() throws IOException {
        testSbk = File.createTempFile(""songbook"", ""sbk"");
        IOUtils.copy(Thread.currentThread().getContextClassLoader().getResourceAsStream(""test.sbk""), new FileOutputStream(testSbk));
        test1Sbk = File.createTempFile(""songbook"", ""sbk"");
        IOUtils.copy(Thread.currentThread().getContextClassLoader().getResourceAsStream(""test1.sbk""), new FileOutputStream(test1Sbk));
    }
"
3565,"    public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException {
        if (params == null) params = new DjatokaEncodeParam();
        if (params.getLevels() == 0) params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()));
        File in = null;
        File out = null;
        try {
            in = IOUtils.createTempTiff(bi);
            out = File.createTempFile(""tmp"", "".jp2"");
            compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params);
            IOUtils.copyStream(new FileInputStream(out), output);
        } catch (IOException e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        } catch (Exception e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        }
        if (in != null) in.delete();
        if (out != null) out.delete();
    }
"
1979,"                public void run() {
                    try {
                        exists_ = true;
                        URL url = getContentURL();
                        URLConnection cnx = url.openConnection();
                        cnx.connect();
                        lastModified_ = cnx.getLastModified();
                        length_ = cnx.getContentLength();
                        type_ = cnx.getContentType();
                        if (isDirectory()) {
                            InputStream in = cnx.getInputStream();
                            BufferedReader nr = new BufferedReader(new InputStreamReader(in));
                            FuVectorString v = readList(nr);
                            nr.close();
                            v.sort();
                            v.uniq();
                            list_ = v.toArray();
                        }
                    } catch (Exception ex) {
                        exists_ = false;
                    }
                    done[0] = true;
                }
"
2005,"    public List<String> generate(String geronimoVersion, String geronimoHome, String instanceNumber) {
        geronimoRepository = geronimoHome + ""/repository"";
        Debug.logInfo(""The WASCE or Geronimo Repository is "" + geronimoRepository, module);
        Classpath classPath = new Classpath(System.getProperty(""java.class.path""));
        List<File> elements = classPath.getElements();
        List<String> jar_version = new ArrayList<String>();
        String jarPath = null;
        String jarName = null;
        String newJarName = null;
        String jarNameSimple = null;
        String jarVersion = ""1.0"";
        int lastDash = -1;
        for (File f : elements) {
            if (f.exists()) {
                if (f.isFile()) {
                    jarPath = f.getAbsolutePath();
                    jarName = f.getName();
                    String jarNameWithoutExt = (String) jarName.subSequence(0, jarName.length() - 4);
                    lastDash = jarNameWithoutExt.lastIndexOf(""-"");
                    if (lastDash > -1) {
                        jarVersion = jarNameWithoutExt.substring(lastDash + 1, jarNameWithoutExt.length());
                        jarNameSimple = jarNameWithoutExt.substring(0, lastDash);
                        boolean alreadyVersioned = 0 < StringUtil.removeRegex(jarVersion, ""[^.0123456789]"").length();
                        if (!alreadyVersioned) {
                            jarVersion = ""1.0"";
                            jarNameSimple = jarNameWithoutExt;
                            newJarName = jarNameWithoutExt + ""-"" + jarVersion + "".jar"";
                        } else {
                            newJarName = jarName;
                        }
                    } else {
                        jarVersion = ""1.0"";
                        jarNameSimple = jarNameWithoutExt;
                        newJarName = jarNameWithoutExt + ""-"" + jarVersion + "".jar"";
                    }
                    jar_version.add(jarNameSimple + ""#"" + jarVersion);
                    String targetDirectory = geronimoRepository + ""/org/ofbiz/"" + jarNameSimple + ""/"" + jarVersion;
                    File targetDir = new File(targetDirectory);
                    if (!targetDir.exists()) {
                        boolean created = targetDir.mkdirs();
                        if (!created) {
                            Debug.logFatal(""Unable to create target directory - "" + targetDirectory, module);
                            return null;
                        }
                    }
                    if (!targetDirectory.endsWith(""/"")) {
                        targetDirectory = targetDirectory + ""/"";
                    }
                    String newCompleteJarName = targetDirectory + newJarName;
                    File newJarFile = new File(newCompleteJarName);
                    try {
                        FileChannel srcChannel = new FileInputStream(jarPath).getChannel();
                        FileChannel dstChannel = new FileOutputStream(newCompleteJarName).getChannel();
                        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                        Debug.log(""Created jar file : "" + newJarName + "" in WASCE or Geronimo repository"", module);
                        srcChannel.close();
                        dstChannel.close();
                    } catch (IOException e) {
                        Debug.logFatal(""Unable to create jar file - "" + newJarName + "" in WASCE or Geronimo repository (certainly already exists)"", module);
                        return null;
                    }
                }
            }
        }
        List<ComponentConfig.WebappInfo> webApps = ComponentConfig.getAllWebappResourceInfos();
        File geronimoWebXml = new File(System.getProperty(""ofbiz.home"") + ""/framework/appserver/templates/"" + geronimoVersion + ""/geronimo-web.xml"");
        for (ComponentConfig.WebappInfo webApp : webApps) {
            if (null != webApp) {
                parseTemplate(geronimoWebXml, webApp);
            }
        }
        return jar_version;
    }
"
4575,"    public static final InputStream openStream(Bundle bundle, IPath file, boolean localized) throws IOException {
        URL url = null;
        if (!localized) {
            url = findInPlugin(bundle, file);
            if (url == null) url = findInFragments(bundle, file);
        } else {
            url = FindSupport.find(bundle, file);
        }
        if (url != null) return url.openStream();
        throw new IOException(""Cannot find "" + file.toString());
    }
"
8294,"    private void handleSSI(HttpData data) throws HttpError, IOException {
        File tempFile = TempFileHandler.getTempFile();
        FileOutputStream out = new FileOutputStream(tempFile);
        BufferedReader in = new BufferedReader(new FileReader(data.realPath));
        String[] env = getEnvironmentVariables(data);
        if (ssi == null) {
            ssi = new BSssi();
        }
        ssi.addEnvironment(env);
        if (data.resp == null) {
            SimpleResponse resp = new SimpleResponse();
            resp.setHeader(""Content-Type"", ""text/html"");
            moreHeaders(resp);
            resp.setHeader(""Connection"", ""close"");
            data.resp = resp;
            resp.write(data.out);
        }
        String t;
        int start;
        Enumeration en;
        boolean anIfCondition = true;
        while ((t = in.readLine()) != null) {
            if ((start = t.indexOf(""<!--#"")) > -1) {
                if (anIfCondition) out.write(t.substring(0, start).getBytes());
                try {
                    en = ssi.parse(t.substring(start)).elements();
                    SSICommand command;
                    while (en.hasMoreElements()) {
                        command = (SSICommand) en.nextElement();
                        logger.fine(""Command="" + command);
                        switch(command.getCommand()) {
                            case BSssi.CMD_IF_TRUE:
                                anIfCondition = true;
                                break;
                            case BSssi.CMD_IF_FALSE:
                                anIfCondition = false;
                                break;
                            case BSssi.CMD_CGI:
                                out.flush();
                                if (command.getFileType() != null && command.getFileType().startsWith(""shtm"")) {
                                    HttpData d = newHttpData(data);
                                    d.out = out;
                                    d.realPath = HttpThread.getMappedFilename(command.getMessage(), data.req.getUrl());
                                    new SsiHandler(d, ssi).perform();
                                } else {
                                    String application = getExtension(command.getFileType());
                                    if (application == null) {
                                        writePaused(new FileInputStream(HttpThread.getMappedFilename(command.getMessage(), data.req.getUrl())), out, pause);
                                    } else {
                                        String parameter = """";
                                        if (command.getMessage().indexOf(""php"") >= 0) {
                                            parameter = ""-f "";
                                        }
                                        Process p = Runtime.getRuntime().exec(application + "" "" + parameter + HttpThread.getMappedFilename(command.getMessage(), data.req.getUrl()));
                                        BufferedReader pIn = new BufferedReader(new InputStreamReader(p.getInputStream()));
                                        String aLine;
                                        while ((aLine = pIn.readLine()) != null) out.write((aLine + ""\n"").getBytes());
                                        pIn.close();
                                    }
                                }
                                break;
                            case BSssi.CMD_EXEC:
                                Process p = Runtime.getRuntime().exec(command.getMessage());
                                BufferedReader pIn = new BufferedReader(new InputStreamReader(p.getInputStream()));
                                String aLine;
                                while ((aLine = pIn.readLine()) != null) out.write((aLine + ""\n"").getBytes());
                                BufferedReader pErr = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                                while ((aLine = pErr.readLine()) != null) out.write((aLine + ""\n"").getBytes());
                                pIn.close();
                                pErr.close();
                                p.destroy();
                                break;
                            case BSssi.CMD_INCLUDE:
                                File incFile = HttpThread.getMappedFilename(command.getMessage());
                                if (incFile.exists() && incFile.canRead()) {
                                    writePaused(new FileInputStream(incFile), out, pause);
                                }
                                break;
                            case BSssi.CMD_FILESIZE:
                                long sizeBytes = HttpThread.getMappedFilename(command.getMessage(), data.req.getUrl()).length();
                                double smartSize;
                                String unit = ""bytes"";
                                if (command.getFileType().trim().equals(""abbrev"")) {
                                    if (sizeBytes > 1000000) {
                                        smartSize = sizeBytes / 1024000.0;
                                        unit = ""M"";
                                    } else if (sizeBytes > 1000) {
                                        smartSize = sizeBytes / 1024.0;
                                        unit = ""K"";
                                    } else {
                                        smartSize = sizeBytes;
                                        unit = ""bytes"";
                                    }
                                    NumberFormat numberFormat = new DecimalFormat(""#,##0"", new DecimalFormatSymbols(Locale.ENGLISH));
                                    out.write((numberFormat.format(smartSize) + """" + unit).getBytes());
                                } else {
                                    NumberFormat numberFormat = new DecimalFormat(""#,###,##0"", new DecimalFormatSymbols(Locale.ENGLISH));
                                    out.write((numberFormat.format(sizeBytes) + "" "" + unit).getBytes());
                                }
                                break;
                            case BSssi.CMD_FLASTMOD:
                                out.write(ssi.format(new Date(HttpThread.getMappedFilename(command.getMessage(), data.req.getUrl()).lastModified()), TimeZone.getTimeZone(""GMT"")).getBytes());
                                break;
                            case BSssi.CMD_NOECHO:
                                break;
                            case BSssi.CMD_ECHO:
                            default:
                                out.write(command.getMessage().getBytes());
                                break;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    out.write((ssi.getErrorMessage() + "" "" + e.getMessage()).getBytes());
                }
                if (anIfCondition) out.write(""\n"".getBytes());
            } else {
                if (anIfCondition) out.write((t + ""\n"").getBytes());
            }
            out.flush();
        }
        in.close();
        out.close();
        data.fileData.setContentType(""text/html"");
        data.fileData.setFile(tempFile);
        writePaused(new FileInputStream(tempFile), data.out, pause);
        logger.fine(""HandleSSI done for "" + data.resp);
    }
"
86,"    @Override
    public void run() {
        File file;
        try {
            file = new File(filePath);
            if (!file.canWrite()) {
                Thread.sleep(5000);
                if (!file.canWrite()) {
                    logger.error(""Filed to gain write access to file:"" + filePath);
                    exitState = false;
                    return;
                }
            }
            fis = new BufferedInputStream(new FileInputStream(filePath));
        } catch (FileNotFoundException e) {
            logger.error(""File not found:"" + filePath);
            exitState = false;
            return;
        } catch (java.lang.InterruptedException ie) {
            logger.error(""Upload thread halted or interrupted on file:"" + filePath);
            exitState = false;
            return;
        }
        ftp = new FTPClient();
        ftp.setDefaultTimeout(20 * 1000);
        boolean uploadSuccessful = false;
        try {
            ftp.enterLocalPassiveMode();
            ftp.connect(ftpHostname);
            ftp.login(username, password);
            logger.trace(""FTP Logged In and connected"");
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                exitState = false;
                return;
            }
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
            logger.trace(""FTP Timeout Set and File Type Set"");
            ftp.changeWorkingDirectory(serverDirectory);
            ftp.storeUniqueFile(file.getName(), fis);
            logger.trace(""File Uploaded"");
            if (FTPReply.isPositiveIntermediate(ftp.getReplyCode())) {
                System.out.println(""Completing pending command"");
                ftp.completePendingCommand();
            }
            uploadSuccessful = true;
        } catch (Exception e) {
            try {
                ftp.disconnect();
            } catch (Exception de) {
                e.printStackTrace();
            }
            logger.error(""Error uploading file:"", e);
        } finally {
            try {
                fis.close();
                logger.trace(""File closed"");
                ftp.logout();
                logger.trace(""FTP Logged Out"");
                ftp.disconnect();
                logger.trace(""FTP Disconnected"");
                if (uploadSuccessful) {
                    logger.info(""Deleting file:"" + new File(filePath).getName());
                    if (!(new File(filePath)).delete()) {
                        logger.error(""Can't delete file for some reason"");
                    }
                    Thread.sleep(1000);
                    exitState = true;
                    return;
                }
            } catch (Exception e) {
                logger.error(""Exception on file upload cleanup:"", e);
                exitState = false;
                return;
            }
        }
        exitState = false;
        return;
    }
"
6945,"    public void generateHtmlPage(String real_filename, String url_filename) {
        String str_content = """";
        URL m_url = null;
        URLConnection m_urlcon = null;
        try {
            m_url = new URL(url_filename);
            m_urlcon = m_url.openConnection();
            InputStream in_stream = m_urlcon.getInputStream();
            byte[] bytes = new byte[1];
            Vector v_bytes = new Vector();
            while (in_stream.read(bytes) != -1) {
                v_bytes.add(bytes);
                bytes = new byte[1];
            }
            byte[] all_bytes = new byte[v_bytes.size()];
            for (int i = 0; i < v_bytes.size(); i++) all_bytes[i] = ((byte[]) v_bytes.get(i))[0];
            str_content = new String(all_bytes, ""GBK"");
        } catch (Exception urle) {
        }
        try {
            oaFileOperation file_control = new oaFileOperation();
            file_control.writeFile(str_content, real_filename, true);
            String strPath = url_filename.substring(0, url_filename.lastIndexOf(""/"") + 1);
            String strUrlFileName = url_filename.substring(url_filename.lastIndexOf(""/"") + 1);
            if (strUrlFileName.indexOf("".jsp"") > 0) {
                strUrlFileName = strUrlFileName.substring(0, strUrlFileName.indexOf("".jsp"")) + ""_1.jsp"";
                m_url = new URL(strPath + strUrlFileName);
                m_url.openConnection();
            }
            intWriteFileCount++;
            intWriteFileCount = (intWriteFileCount > 100000) ? 0 : intWriteFileCount;
        } catch (Exception e) {
        }
        m_urlcon = null;
    }
"
2937,"    private Metadata readMetadataIndexFileFromNetwork(String mediaMetadataURI) throws IOException {
        Metadata tempMetadata = new Metadata();
        URL url = new URL(mediaMetadataURI);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        String tempLine = null;
        while ((tempLine = input.readLine()) != null) {
            Property tempProperty = PropertyList.splitStringIntoKeyAndValue(tempLine);
            if (tempProperty != null) {
                tempMetadata.addIfNotNull(tempProperty.getKey(), tempProperty.getValue());
            }
        }
        input.close();
        return tempMetadata;
    }
"
4178,"    public boolean getFile(String local, String remote) throws IOException {
        boolean result = false;
        GridFTP ftp = new GridFTP();
        ftp.setDefaultPort(port);
        System.out.println(this + "".getFile "" + remote);
        try {
            ftp.connect(host);
            ftp.login(username, password);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println(""FTP server refused connection."");
                return false;
            }
            ftp.get(local, remote);
            ftp.logout();
            result = true;
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(this + "".getFile return "" + result);
        return result;
    }
"
1643,"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
"
2836,"    static Matrix readMatrix(String filename, int nrow, int ncol) {
        Matrix cij = new Matrix(nrow, ncol);
        try {
            URL url = filename.getClass().getResource(filename);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            for (int i = 0; i < nrow; i++) for (int j = 0; j < ncol; j++) cij.set(i, j, Double.parseDouble(lnr.readLine()));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return cij;
    }
"
7142,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
"
1189,"    public String getImageURL(String text) {
        String imgURL = """";
        try {
            URL url = new URL(""http://images.search.yahoo.com/search/images?p="" + URLEncoder.encode(text));
            URLConnection connection = url.openConnection();
            DataInputStream in = new DataInputStream(connection.getInputStream());
            String line;
            Pattern imgPattern = Pattern.compile(""isrc=\""([^\""]*)\"""");
            while ((line = in.readLine()) != null) {
                Matcher match = imgPattern.matcher(line);
                if (match.find()) {
                    imgURL = match.group(1);
                    break;
                }
            }
            in.close();
        } catch (Exception e) {
        }
        return imgURL;
    }
"
2480,"    private boolean downloadBlacklist() {
        boolean blacklist_updated = false;
        try {
            mLogger.debug(""Attempting to download MT blacklist"");
            URL url = new URL(blacklistURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0"");
            if (this.lastModified != null) {
                connection.setRequestProperty(""If-Modified-Since"", DateUtil.formatRfc822(this.lastModified));
            }
            int responseCode = connection.getResponseCode();
            mLogger.debug(""HttpConnection response = "" + responseCode);
            if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {
                mLogger.debug(""MT blacklist site says we are current"");
                return false;
            }
            long lastModifiedLong = connection.getHeaderFieldDate(""Last-Modified"", -1);
            if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) {
                mLogger.debug(""my last modified = "" + this.lastModified.getTime());
                mLogger.debug(""MT last modified = "" + lastModifiedLong);
                InputStream instream = connection.getInputStream();
                String uploadDir = RollerConfig.getProperty(""uploads.dir"");
                String path = uploadDir + File.separator + blacklistFile;
                FileOutputStream outstream = new FileOutputStream(path);
                mLogger.debug(""writing updated MT blacklist to "" + path);
                byte[] buf = new byte[4096];
                int length = 0;
                while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length);
                outstream.close();
                instream.close();
                blacklist_updated = true;
                mLogger.debug(""MT blacklist download completed."");
            } else {
                mLogger.debug(""blacklist *NOT* saved, assuming we are current"");
            }
        } catch (Exception e) {
            mLogger.error(""error downloading blacklist"", e);
        }
        return blacklist_updated;
    }
"
1425,"    protected void handleConnection(Socket server) throws IOException {
        OutputStream out = server.getOutputStream();
        PrintWriter pout = new PrintWriter(out, true);
        BufferedReader in = SocketUtil.getReader(server);
        String failureReason = null;
        int failureCode = 0;
        String httpVersion = ""HTTP/1.0"";
        String uri = null;
        String command = in.readLine();
        URL url = null;
        if (command != null) {
            StringTokenizer tokenizer = new StringTokenizer(command);
            if (tokenizer.countTokens() != 3) {
                failureCode = 400;
                failureReason = ""Illformed Request-Line"";
            } else {
                String method = tokenizer.nextToken();
                if (!method.equalsIgnoreCase(""get"")) {
                    failureCode = 501;
                    failureReason = ""Only supports GET method"";
                } else {
                    uri = tokenizer.nextToken();
                    httpVersion = tokenizer.nextToken();
                    try {
                        url = getURL(uri);
                    } catch (IOException e) {
                        failureCode = 404;
                        failureReason = ""resource not found"";
                    }
                }
            }
        } else {
            failureCode = 400;
            failureReason = ""Null request"";
        }
        if (url != null) {
            InputStream stream = null;
            try {
                URLConnection connection = url.openConnection();
                byte[] chunk = new byte[1024];
                int read = 0;
                pout.println(httpVersion + "" 200 "");
                pout.println(""Content-Type: "" + connection.getContentType());
                pout.println(""Content-Length: "" + connection.getContentLength());
                pout.println(""Content-Encoding: "" + connection.getContentEncoding());
                pout.println();
                stream = connection.getInputStream();
                read = stream.read(chunk);
                while (read != -1) {
                    out.write(chunk, 0, read);
                    read = stream.read(chunk);
                }
            } catch (IOException e) {
                failureCode = 500;
                failureReason = ""problem reading the resource content"";
            } finally {
                if (stream != null) {
                    stream.close();
                }
            }
        } else {
            failureCode = 404;
            failureReason = ""resource not found"";
        }
        if (failureCode != 0) {
            pout.println(httpVersion + "" "" + failureCode + "" "" + failureReason);
            pout.println();
        }
        doDelay();
        server.close();
    }
"
7870,"    public static void main(String[] args) {
        if (args.length <= 0) {
            System.out.println("" *** DML script generator and executor ***"");
            System.out.println("" You must specify name of the file with SQL script data"");
            System.out.println("" Fisrt rows of this file must be:"");
            System.out.println("" 1) JDBC driver class for your DBMS"");
            System.out.println("" 2) URL for your database instance"");
            System.out.println("" 3) user in that database (with sufficient priviliges)"");
            System.out.println("" 4) password of that user"");
            System.out.println("" Next rows can have:"");
            System.out.println(""   '&' before table to insert into,"");
            System.out.println(""   '^' before table delete from,"");
            System.out.println(""   '*' before table update."");
            System.out.println("" Other rows contain parameters of these actions:"");
            System.out.println(""   for & action each parameter is a list of values,"");
            System.out.println(""   for * action -//- pare of values with 1st PK (will be in where clause),"");
            System.out.println(""   for ^ (not obligatory) -//- part of where clause or AND or OR"");
            System.out.println(""    (by depault parts are united with OR)"");
            System.out.println("" Note: despite SQLScript, 1) list (pare) of values can be separated"");
            System.out.println(""   by space or tab, not only comma and 2) string values can be not quoted,"");
            System.out.println(""   but in this (2) case only 2 values allowed (even in insert)"");
            System.out.println("" '!' before row means that it is a comment."");
            System.out.println("" If some exception is occured, all script is rolled back."");
            System.out.println("" If you specify 2nd command line argument - file name too -"");
            System.out.println(""   connection will be established but all statements will"");
            System.out.println(""   be saved in that output file and not transmitted to DB"");
            System.out.println("" If you specify 3nd command line argument - connect_string -"");
            System.out.println(""   connect information will be added to output file"");
            System.out.println(""   in the form 'connect user/password@connect_string'"");
            System.exit(0);
        }
        try {
            String[] info = new String[4];
            BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));
            Writer writer = null;
            try {
                for (int i = 0; i < info.length; i++) info[i] = reader.readLine();
                try {
                    Class.forName(info[0]);
                    Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);
                    SQLScript script = new DMLScript(connection);
                    if (args.length > 1) {
                        writer = new BufferedWriter(new FileWriter(args[1]));
                        if (args.length > 2) writer.write(""connect "" + info[2] + ""/"" + info[3] + ""@"" + args[2] + script.statementTerminator);
                    }
                    try {
                        System.out.println(script.executeScript(reader, writer) + "" updates has been performed during script execution"");
                    } catch (SQLException e4) {
                        reader.close();
                        if (writer != null) writer.close();
                        System.out.println("" Script execution error: "" + e4);
                    }
                    connection.close();
                } catch (Exception e3) {
                    reader.close();
                    if (writer != null) writer.close();
                    System.out.println("" Connection error: "" + e3);
                }
            } catch (IOException e2) {
                System.out.println(""Error in file "" + args[0]);
            }
        } catch (FileNotFoundException e1) {
            System.out.println(""File "" + args[0] + "" not found"");
        }
    }
"
1161,"    public static void copy(FileInputStream in, File destination) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = in.getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            if (srcChannel != null) {
                srcChannel.close();
            }
            if (dstChannel != null) {
                dstChannel.close();
            }
        }
    }
"
258,"        public static void copyFile(File source, File destination) throws IOException {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[4096];
            int read = -1;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            out.flush();
            out.close();
            in.close();
        }
"
3469,"    protected void cboTemplateIndexSelectionChanged() {
        int idx = WizardPage1.this.cboTemplateIndex.getSelectionIndex();
        IPreferenceStore store = Activator.getDefault().getPreferenceStore();
        String prefnamePrefix = PreferenceConstants.TEMPLATE_PREFIX + idx;
        String baseUrl = store.getString(prefnamePrefix + PreferenceConstants.BASEURL_POSTFIX);
        String descfile = store.getString(prefnamePrefix + PreferenceConstants.DESCFILE_POSTFIX);
        try {
            URL url = new URL(baseUrl + descfile);
            URLConnection con = url.openConnection();
            WizardPage1.this.setTemplContainer(new TemplateContainer(con.getInputStream(), baseUrl));
            fillListboxFromTemplateContainer();
        } catch (MalformedURLException e1) {
            getTxaTemplateDescription().setText(e1.getMessage());
            e1.printStackTrace();
        } catch (IOException e2) {
            getTxaTemplateDescription().setText(e2.getMessage());
            e2.printStackTrace();
        } catch (XPathExpressionException e3) {
            getTxaTemplateDescription().setText(e3.getMessage());
            e3.printStackTrace();
        } catch (ParserConfigurationException e4) {
            getTxaTemplateDescription().setText(e4.getMessage());
            e4.printStackTrace();
        } catch (SAXException e5) {
            getTxaTemplateDescription().setText(e5.getMessage());
            e5.printStackTrace();
        }
    }
"
5077,"    protected void doRestoreOrganizeTypeRelation() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strDelQuery = ""DELETE FROM "" + Common.ORGANIZE_TYPE_RELATION_TABLE;
        String strSelQuery = ""SELECT parent_organize_type,child_organize_type "" + ""FROM "" + Common.ORGANIZE_TYPE_RELATION_B_TABLE + "" "" + ""WHERE version_no = ?"";
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_TYPE_RELATION_TABLE + "" "" + ""(parent_organize_type,child_organize_type) "" + ""VALUES (?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strDelQuery);
                ps.executeUpdate();
                ps = con.prepareStatement(strSelQuery);
                ps.setInt(1, this.versionNO);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setString(1, result.getString(""parent_organize_type""));
                    ps.setString(2, result.getString(""child_organize_type""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doRestoreOrganizeTypeRelation(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_TYPE_RELATION INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doRestoreOrganizeTypeRelation(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doRestoreOrganizeTypeRelation(): SQLException while committing or rollback"");
        }
    }
"
7584,"    public void update(String target, String cfgVersion) throws MalformedURLException, FileNotFoundException, IOException {
        Debug.log(""Config Updater"", ""Checking for newer configuration..."");
        URL url = new URL(target);
        String[] urlSplit = target.split(""/"");
        this.fileName = urlSplit[urlSplit.length - 1];
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(Main.getHomeDir() + ""tmp-"" + this.fileName));
        URLConnection urlConnection = url.openConnection();
        InputStream in = urlConnection.getInputStream();
        byte[] buffer = new byte[1024];
        int numRead;
        int fileSize = 0;
        while ((numRead = in.read(buffer)) != -1) {
            out.write(buffer, 0, numRead);
            fileSize += numRead;
        }
        Debug.log(""Config Updater"", ""Read latest configuration: "" + fileSize + "" bytes"");
        in.close();
        out.close();
        XMLController xmlC = new XMLController();
        String newFileVersion = xmlC.readCfgVersion(Main.getHomeDir() + ""tmp-"" + this.fileName);
        if (new File(Main.getHomeDir() + this.fileName).exists()) {
            Debug.log(""Config Updater"", ""Local configfile '"" + Main.getHomeDir() + this.fileName + ""' exists (version "" + cfgVersion + "")"");
            if (Double.parseDouble(newFileVersion) > Double.parseDouble(cfgVersion)) {
                Debug.log(""Config Updater"", ""Removing old config and replacing it with version "" + newFileVersion);
                new File(Main.getHomeDir() + this.fileName).delete();
                new File(Main.getHomeDir() + ""tmp-"" + this.fileName).renameTo(new File(Main.getHomeDir() + this.fileName));
                this.result = ""ConfigFile upgraded to version "" + newFileVersion;
            } else {
                new File(Main.getHomeDir() + ""tmp-"" + this.fileName).delete();
                Debug.log(""Config Updater"", ""I already have the latest version "" + cfgVersion);
            }
        } else {
            Debug.log(""Config Updater"", ""Local config doesn't exist. Loading the new one, version "" + newFileVersion);
            new File(Main.getHomeDir() + ""tmp-"" + this.fileName).renameTo(new File(Main.getHomeDir() + this.fileName));
            this.result = ""ConfigFile upgraded to version "" + newFileVersion;
        }
        Debug.log(""Config Updater"", ""Update of configuration done"");
    }
"
3680,"    protected BufferedImage handleGMUException() {
        if (params.uri.startsWith(""http://mars.gmu.edu:8080"")) try {
            URLConnection connection = new URL(params.uri).openConnection();
            int index = params.uri.lastIndexOf(""?"");
            params.uri = ""<img class=\""itemthumb\"" src=\"""";
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String url = null;
            while ((url = reader.readLine()) != null) {
                index = url.indexOf(params.uri);
                if (index != -1) {
                    url = ""http://mars.gmu.edu:8080"" + url.substring(index + 28);
                    url = url.substring(0, url.indexOf(""\"" alt=\""""));
                    break;
                }
            }
            if (url != null) {
                connection = new URL(url).openConnection();
                return processNewUri(connection);
            }
        } catch (Exception e) {
        }
        return null;
    }
"
8752,"    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GUnzip source"");
            return;
        }
        String zipname, source;
        if (args[0].endsWith("".gz"")) {
            zipname = args[0];
            source = args[0].substring(0, args[0].length() - 3);
        } else {
            zipname = args[0] + "".gz"";
            source = args[0];
        }
        GZIPInputStream zipin;
        try {
            FileInputStream in = new FileInputStream(zipname);
            zipin = new GZIPInputStream(in);
        } catch (IOException e) {
            System.out.println(""Couldn't open "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileOutputStream out = new FileOutputStream(source);
            int length;
            while ((length = zipin.read(buffer, 0, sChunk)) != -1) out.write(buffer, 0, length);
            out.close();
        } catch (IOException e) {
            System.out.println(""Couldn't decompress "" + args[0] + ""."");
        }
        try {
            zipin.close();
        } catch (IOException e) {
        }
    }
"
8791,"    public static void copyFile(File src, File dest) throws IOException {
        if (!src.exists()) throw new IOException(""File not found '"" + src.getAbsolutePath() + ""'"");
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
        BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
        byte[] read = new byte[128];
        int len = 128;
        while ((len = in.read(read)) > 0) out.write(read, 0, len);
        out.flush();
        out.close();
        in.close();
    }
"
1655,"    public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
"
2751,"    private int getPage(StringBuffer ret) throws IOException {
        Properties sysProp;
        int ResponseCode = HttpURLConnection.HTTP_OK;
        BufferedReader br = null;
        try {
            URLConnection con = url.openConnection();
            con.setDefaultUseCaches(false);
            con.setDoInput(true);
            con.setDoOutput(false);
            if (con instanceof HttpURLConnection) {
                HttpURLConnection httpcon = (HttpURLConnection) con;
                ResponseCode = httpcon.getResponseCode();
                if (ResponseCode != httpcon.HTTP_OK) {
                    httpcon.disconnect();
                    return (ResponseCode);
                }
                br = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String line;
                int NumberOfLines = 0;
                while ((line = br.readLine()) != null) {
                    ret.append(line + ""\n"");
                    ++NumberOfLines;
                }
                httpcon.disconnect();
            } else {
                br = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) {
                    ret.append(line + ""\n"");
                }
            }
        } catch (IOException e) {
        } finally {
            if (br != null) br.close();
        }
        return ResponseCode;
    }
"
491,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String senha = """";
        String email = request.getParameter(""EmailLogin"");
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(request.getParameter(""SenhaLogin"").getBytes(), 0, request.getParameter(""SenhaLogin"").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);
        String redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""?&msg=3"";
        if (request.getHeader(""REFERER"").indexOf(""?"") != -1) {
            redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""&msg=3"";
        }
        if (usuario.getNome() != null) {
            HttpSession session = request.getSession();
            session.setAttribute(""usuario"", usuario);
            redirect = ""index.jsp"";
        }
        response.sendRedirect(redirect);
    }
"
4424,"    public static void copyTo(File src, File dest) throws IOException {
        if (src.equals(dest)) throw new IOException(""copyTo src==dest file"");
        FileOutputStream fout = new FileOutputStream(dest);
        InputStream in = new FileInputStream(src);
        IOUtils.copyTo(in, fout);
        fout.flush();
        fout.close();
        in.close();
    }
"
7591,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
"
3840,"    public void loadFromFile() {
        if (filename == null) return;
        try {
            BufferedReader reader;
            try {
                File file = new File(filename);
                if (!file.exists()) return;
                reader = new BufferedReader(new FileReader(file));
            } catch (java.security.AccessControlException e) {
                URL url = new URL(filename);
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            String line;
            while (true) {
                line = reader.readLine();
                if (line == null) break;
                String name = line.substring(0, line.indexOf(""\t""));
                String rest1 = line.substring(line.indexOf(""\t"") + 1);
                String guiname = rest1.substring(0, rest1.indexOf(""\t""));
                String rest2 = rest1.substring(rest1.indexOf(""\t"") + 1);
                String type = rest2.substring(0, rest2.indexOf(""\t""));
                String value = rest2.substring(rest2.indexOf(""\t"") + 1);
                defineField(name, guiname, type);
                setField(name, value, true);
            }
            reader.close();
        } catch (IOException e) {
            throw new JGameError(""Error reading file '"" + filename + ""'."", false);
        }
    }
"
7470,"    boolean copyFileStructure(File oldFile, File newFile) {
        if (oldFile == null || newFile == null) return false;
        File searchFile = newFile;
        do {
            if (oldFile.equals(searchFile)) return false;
            searchFile = searchFile.getParentFile();
        } while (searchFile != null);
        if (oldFile.isDirectory()) {
            if (progressDialog != null) {
                progressDialog.setDetailFile(oldFile, ProgressDialog.COPY);
            }
            if (simulateOnly) {
            } else {
                if (!newFile.mkdirs()) return false;
            }
            File[] subFiles = oldFile.listFiles();
            if (subFiles != null) {
                if (progressDialog != null) {
                    progressDialog.addWorkUnits(subFiles.length);
                }
                for (int i = 0; i < subFiles.length; i++) {
                    File oldSubFile = subFiles[i];
                    File newSubFile = new File(newFile, oldSubFile.getName());
                    if (!copyFileStructure(oldSubFile, newSubFile)) return false;
                    if (progressDialog != null) {
                        progressDialog.addProgress(1);
                        if (progressDialog.isCancelled()) return false;
                    }
                }
            }
        } else {
            if (simulateOnly) {
            } else {
                FileReader in = null;
                FileWriter out = null;
                try {
                    in = new FileReader(oldFile);
                    out = new FileWriter(newFile);
                    int count;
                    while ((count = in.read()) != -1) out.write(count);
                } catch (FileNotFoundException e) {
                    return false;
                } catch (IOException e) {
                    return false;
                } finally {
                    try {
                        if (in != null) in.close();
                        if (out != null) out.close();
                    } catch (IOException e) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
"
7108,"    public static void load(String path) {
        if (path.length() < 1) {
            Log.userinfo(""Cannot open a file whose name has zero length."", Log.ERROR);
        }
        if (!loadtime) {
            if (path.equals(Globals.getStartupFilePath())) {
                Log.userinfo(""Cannot reload startup file."", Log.ERROR);
            }
        }
        BufferedReader buffReader = null;
        if (path.indexOf(""://"") != -1) {
            URL url = null;
            try {
                url = new URL(path);
            } catch (MalformedURLException e) {
                Log.userinfo(""Malformed URL: \"""" + path + ""\"""", Log.ERROR);
            }
            try {
                String encoding = Toolkit.getDeclaredXMLEncoding(url.openStream());
                buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            } catch (IOException e) {
                Log.userinfo(""I/O error trying to read \"""" + path + ""\"""", Log.ERROR);
            }
        } else {
            if (path.indexOf(ASTERISK) != -1) {
                String[] files = null;
                try {
                    files = Toolkit.glob(path, workingDirectory);
                } catch (FileNotFoundException e) {
                    Log.userinfo(e.getMessage(), Log.ERROR);
                }
                if (files != null) {
                    for (int index = 0; index < files.length; index++) {
                        load(files[index]);
                    }
                    return;
                }
            }
            File toRead = new File(path);
            if (toRead.isAbsolute()) {
                workingDirectory = toRead.getParent();
            }
            if (loadedFiles.contains(toRead)) {
                if (loadtime) {
                    return;
                }
            } else {
                loadedFiles.add(toRead);
            }
            if (toRead.exists() && !toRead.isDirectory()) {
                try {
                    String encoding = Toolkit.getDeclaredXMLEncoding(new FileInputStream(path));
                    buffReader = new BufferedReader(new InputStreamReader(new FileInputStream(path), encoding));
                } catch (IOException e) {
                    Log.userinfo(""I/O error trying to read \"""" + path + ""\"""", Log.ERROR);
                    return;
                }
                if (Globals.isWatcherActive()) {
                    AIMLWatcher.addWatchFile(path);
                }
            } else {
                if (!toRead.exists()) {
                    Log.userinfo(""\"""" + path + ""\"" does not exist!"", Log.ERROR);
                }
                if (toRead.isDirectory()) {
                    Log.userinfo(""\"""" + path + ""\"" is a directory!"", Log.ERROR);
                }
            }
        }
        new AIMLReader(path, buffReader, new AIMLLoader(path)).read();
    }
"
5354,"    public Long processAddHolding(Holding holdingBean, AuthSession authSession) {
        if (authSession == null) {
            return null;
        }
        PreparedStatement ps = null;
        DatabaseAdapter dbDyn = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            CustomSequenceType seq = new CustomSequenceType();
            seq.setSequenceName(""seq_WM_LIST_HOLDING"");
            seq.setTableName(""WM_LIST_HOLDING"");
            seq.setColumnName(""ID_HOLDING"");
            Long sequenceValue = dbDyn.getSequenceNextValue(seq);
            ps = dbDyn.prepareStatement(""insert into WM_LIST_HOLDING "" + ""( ID_HOLDING, full_name_HOLDING, NAME_HOLDING )"" + ""values "" + (dbDyn.getIsNeedUpdateBracket() ? ""("" : """") + "" ?, ?, ? "" + (dbDyn.getIsNeedUpdateBracket() ? "")"" : """"));
            int num = 1;
            RsetTools.setLong(ps, num++, sequenceValue);
            ps.setString(num++, holdingBean.getName());
            ps.setString(num++, holdingBean.getShortName());
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of inserted records - "" + i1);
            HoldingBean bean = new HoldingBean(holdingBean);
            bean.setId(sequenceValue);
            processInsertRelatedCompany(dbDyn, bean, authSession);
            dbDyn.commit();
            return sequenceValue;
        } catch (Exception e) {
            try {
                if (dbDyn != null) dbDyn.rollback();
            } catch (Exception e001) {
            }
            String es = ""Error add new holding"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
"
7239,"    public void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
"
2632,"    void openTextFile(String urlString, boolean install) {
        StringBuffer sb = null;
        try {
            URL url = new URL(urlString);
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) sb.append(line + ""\n"");
            in.close();
        } catch (IOException e) {
            if (!(install && urlString.endsWith(""StartupMacros.txt""))) IJ.error(""URL Opener"", """" + e);
            sb = null;
        }
        if (sb != null) {
            if (install) (new MacroInstaller()).install(new String(sb)); else {
                int index = urlString.lastIndexOf(""/"");
                if (index != -1 && index <= urlString.length() - 1) urlString = urlString.substring(index + 1);
                (new Editor()).create(urlString, new String(sb));
            }
        }
    }
"
8538,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
"
5449,"    private void publishCMap(LWMap map) throws IOException {
        try {
            File savedCMap = PublishUtil.createIMSCP(Publisher.resourceVector);
            InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));
            OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile(""IMSCP"", ""zip"")));
            int fileLength = (int) savedCMap.length();
            byte bytes[] = new byte[fileLength];
            while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
            istream.close();
            ostream.close();
        } catch (IOException ex) {
            throw ex;
        } catch (Exception ex) {
            System.out.println(ex);
            VueUtil.alert(VUE.getDialogParent(), VueResources.getString(""dialog.export.message"") + ex.getMessage(), VueResources.getString(""dialog.export.title""), JOptionPane.ERROR_MESSAGE);
        }
    }
"
4382,"    protected void sort(int a) {
        int[] masiv = new int[a + 1];
        Random fff = new Random();
        for (int i = 0; i <= a; i++) {
            masiv[i] = fff.nextInt(9);
        }
        int d;
        for (int j = 0; j < a; j++) {
            for (int i = 0; i < a; i++) {
                if (masiv[i] < masiv[i + 1]) {
                } else {
                    d = masiv[i];
                    masiv[i] = masiv[i + 1];
                    masiv[i + 1] = d;
                }
            }
        }
        while (a != 0) {
            System.out.println(""sort: "" + masiv[a]);
            a--;
        }
    }
"
4443,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {}"", url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
"
490,"    public final synchronized boolean isValidLicenseFile() throws LicenseNotSetupException {
        if (!isSetup()) {
            throw new LicenseNotSetupException();
        }
        boolean returnValue = false;
        Properties properties = getLicenseFile();
        logger.debug(""isValidLicenseFile: License to validate:"");
        logger.debug(properties);
        StringBuffer validationStringBuffer = new StringBuffer();
        validationStringBuffer.append(LICENSE_KEY_KEY + "":"" + properties.getProperty(LICENSE_KEY_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_STATUS_KEY + "":"" + properties.getProperty(LICENSE_FILE_STATUS_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_USERS_KEY + "":"" + properties.getProperty(LICENSE_FILE_USERS_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_MAC_KEY + "":"" + properties.getProperty(LICENSE_FILE_MAC_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_HOST_NAME_KEY + "":"" + properties.getProperty(LICENSE_FILE_HOST_NAME_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_OFFSET_KEY + "":"" + properties.getProperty(LICENSE_FILE_OFFSET_KEY) + "","");
        validationStringBuffer.append(LICENSE_FILE_EXP_DATE_KEY + "":"" + properties.getProperty(LICENSE_FILE_EXP_DATE_KEY) + "","");
        validationStringBuffer.append(LICENSE_EXPIRES_KEY + "":"" + properties.getProperty(LICENSE_EXPIRES_KEY));
        logger.debug(""isValidLicenseFile: Validation String Buffer: "" + validationStringBuffer.toString());
        String validationKey = (String) properties.getProperty(LICENSE_FILE_SHA_KEY);
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""SHA-1"");
            messageDigest.update(validationStringBuffer.toString().getBytes());
            String newValidation = Base64.encode(messageDigest.digest());
            if (newValidation.equals(validationKey)) {
                if (getMACAddress().equals(Settings.getInstance().getMACAddress())) {
                    returnValue = true;
                }
            }
        } catch (Exception exception) {
            System.out.println(""Exception in LicenseInstanceVO.isValidLicenseFile"");
        }
        return returnValue;
    }
"
1900,"    public void copyFile(String oldPathFile, String newPathFile) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPathFile);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPathFile);
                FileOutputStream fs = new FileOutputStream(newPathFile);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            message = (""���Ƶ����ļ���������"");
        }
    }
"
6278,"    public static String encrypt(String plaintext) throws Exception {
        String algorithm = XML.get(""security.algorithm"");
        if (algorithm == null) algorithm = ""SHA-1"";
        MessageDigest md = MessageDigest.getInstance(algorithm);
        md.update(plaintext.getBytes(""UTF-8""));
        return new BASE64Encoder().encode(md.digest());
    }
"
2112,"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
"
1385,"    private FTPClient getClient() throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
        ftp.setDefaultPort(getPort());
        ftp.connect(getIp());
        int reply = ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            log.warn(""FTP server refused connection: {}"", getIp());
            ftp.disconnect();
            return null;
        }
        if (!ftp.login(getUsername(), getPassword())) {
            log.warn(""FTP server refused login: {}, user: {}"", getIp(), getUsername());
            ftp.logout();
            ftp.disconnect();
            return null;
        }
        ftp.setControlEncoding(getEncoding());
        ftp.setFileType(FTP.BINARY_FILE_TYPE);
        ftp.enterLocalPassiveMode();
        return ftp;
    }
"
8581,"    public ImportFromFile() {
        JFrame jf = new JFrame();
        JFileChooser fc = new JFileChooser(KTH.data._path);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(jf);
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            KTH.data._path = file.getParent();
            System.out.println(file.getAbsolutePath() + ""\n"");
        } else {
        }
        if (file != null) {
            File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);
            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));
            if (f.exists() && !IOUtils.isNewerContent(file, f)) {
            } else {
                try {
                    IOUtils.copyFile(file, f, true);
                } catch (Exception e) {
                    KTH.out.err(e);
                }
            }
            KTH.dc2.removeDc(""Import"");
        } else {
        }
    }
"
6264,"    public static String getHtml(DefaultHttpClient httpclient, String url, String encode) throws IOException {
        InputStream input = null;
        HttpGet get = new HttpGet(url);
        HttpResponse res = httpclient.execute(get);
        StatusLine status = res.getStatusLine();
        if (status.getStatusCode() != STATUSCODE_200) {
            throw new RuntimeException(""50001"");
        }
        if (res.getEntity() == null) {
            return """";
        }
        input = res.getEntity().getContent();
        InputStreamReader reader = new InputStreamReader(input, encode);
        BufferedReader bufReader = new BufferedReader(reader);
        String tmp = null, html = """";
        while ((tmp = bufReader.readLine()) != null) {
            html += tmp;
        }
        if (input != null) {
            input.close();
        }
        return html;
    }
"
7622,"    public static final void newRead() {
        HTMLDocument html = new HTMLDocument();
        html.putProperty(""IgnoreCharsetDirective"", new Boolean(true));
        try {
            HTMLEditorKit kit = new HTMLEditorKit();
            URL url = new URL(""http://omega.rtu.lv/en/index.html"");
            kit.read(new BufferedReader(new InputStreamReader(url.openStream())), html, 0);
            Reader reader = new FileReader(html.getText(0, html.getLength()));
            List<String> links = HTMLUtils.extractLinks(reader);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
5920,"    private static String hashWithDigest(String in, String digest) {
        try {
            MessageDigest Digester = MessageDigest.getInstance(digest);
            Digester.update(in.getBytes(""UTF-8""), 0, in.length());
            byte[] sha1Hash = Digester.digest();
            return toSimpleHexString(sha1Hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(""Hashing the password failed"", ex);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""Encoding the string failed"", e);
        }
    }
"
4604,"    public Project deleteProject(int projectID) throws AdaptationException {
        Project project = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""SELECT * FROM Projects WHERE id = "" + projectID;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to delete project failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            project = getProject(resultSet);
            query = ""DELETE FROM Projects WHERE id = "" + projectID;
            statement.executeUpdate(query);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in deleteProject"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return project;
    }
"
6990,"    public static StringBuffer getCachedFile(String url) throws Exception {
        File urlCache = new File(""tmp-cache/"" + url.replace('/', '-'));
        new File(""tmp-cache/"").mkdir();
        if (urlCache.exists()) {
            BufferedReader in = new BufferedReader(new FileReader(urlCache));
            StringBuffer buffer = new StringBuffer();
            String input;
            while ((input = in.readLine()) != null) {
                buffer.append(input + ""\n"");
            }
            in.close();
            return buffer;
        } else {
            URL url2 = new URL(url.replace("" "", ""%20""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url2.openStream()));
            BufferedWriter cacheWriter = new BufferedWriter(new FileWriter(urlCache));
            StringBuffer buffer = new StringBuffer();
            String input;
            while ((input = in.readLine()) != null) {
                buffer.append(input + ""\n"");
                cacheWriter.write(input + ""\n"");
            }
            cacheWriter.close();
            in.close();
            return buffer;
        }
    }
"
6254,"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
"
7467,"    public void run() {
        date = DateUtil.addMonth(-1);
        List list = bo.getDao().getHibernateTemplate().find(""from MailAffixPojo where upload_time <'"" + date + ""' and to_number(sized) >"" + size);
        if (null != list && list.size() > 0) {
            try {
                FTPClient ftp = new FTPClient();
                ftp.connect(config.getHostUrl(), config.getFtpPort());
                ftp.login(config.getUname(), config.getUpass());
                int replyCode = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(replyCode)) {
                    ftp.disconnect();
                    return;
                }
                for (int i = 0; i < list.size(); i++) {
                    MailAffixPojo pojo = (MailAffixPojo) list.get(i);
                    ftp.changeWorkingDirectory(pojo.getUploadTime().substring(0, 7));
                    ftp.deleteFile(pojo.getAffixSaveName());
                    ftp.changeToParentDirectory();
                    bo.delete(MailAffixPojo.class, new Long(pojo.getId()));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
"
4113,"    private void copyEntries() {
        if (zipFile != null) {
            Enumeration<? extends ZipEntry> enumerator = zipFile.entries();
            while (enumerator.hasMoreElements()) {
                ZipEntry entry = enumerator.nextElement();
                if (!entry.isDirectory() && !toIgnore.contains(normalizePath(entry.getName()))) {
                    ZipEntry originalEntry = new ZipEntry(entry.getName());
                    try {
                        zipOutput.putNextEntry(originalEntry);
                        IOUtils.copy(getInputStream(entry.getName()), zipOutput);
                        zipOutput.closeEntry();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
"
2543,"    private void saveFile(InputStream in, String fullPath) {
        try {
            File sysfile = new File(fullPath);
            if (!sysfile.exists()) {
                sysfile.createNewFile();
            }
            java.io.OutputStream out = new FileOutputStream(sysfile);
            org.apache.commons.io.IOUtils.copy(in, out);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
5440,"    public static BufferedReader getUserInfoStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/users/"" + name.toLowerCase() + ""/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }
"
8096,"    public static void createOutputStructure(String templatePath) throws InterruptedException {
        try {
            templatePath = new File(templatePath).getCanonicalPath();
            templatePath = templatePath.replace('\\', '/');
            File file = null;
            Paths paths = (Paths) GragGenerator.getObjectsFromTree(Paths.class).get(0);
            Config config = (Config) GragGenerator.getObjectsFromTree(Config.class).get(0);
            DirectoryIterator iterator = new DirectoryIterator(templatePath, true, true);
            while ((file = iterator.getNext()) != null) {
                boolean copyFile = false;
                String fullFilename = file.getCanonicalPath();
                int lastDirPos = fullFilename.lastIndexOf(System.getProperty(""file.separator""));
                if (CVS_DIR.equals(file.getCanonicalPath().substring(fullFilename.length() - CVS_DIR.length(), fullFilename.length())) || CVS_DIR.equals(fullFilename.substring(lastDirPos - CVS_DIR.length(), lastDirPos))) {
                    continue;
                }
                if (""readme.txt"".equals(file.getName())) {
                    continue;
                }
                String fileOut = outputDir.replace('\\', '/');
                String path = file.getCanonicalPath().replace('\\', '/');
                if (path.indexOf(templatePath) == 0) {
                    path = path.substring(templatePath.length());
                    if (path.startsWith(Paths.CONF_GENERAL_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_GENERAL_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_STRUTS_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_STRUTS_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_TAPESTRY4_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_TAPESTRY4_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_SWING_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_SWING_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.JAVA_WEB_STRUTS_DIR)) {
                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_STRUTS_DIR.length());
                        if (config.matchWebTier(""struts"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_WEB_TAPESTRY4_DIR)) {
                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_TAPESTRY4_DIR.length());
                        if (config.matchWebTier(""tapestry"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_SWING_DIR)) {
                        path = paths.getSwingOutput() + path.substring(Paths.JAVA_SWING_DIR.length());
                        if (config.matchWebTier(""swing"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_STRUTS_DIR)) {
                        path = paths.getWebOutput() + path.substring(Paths.JAVA_STRUTS_DIR.length());
                        if (config.matchWebTier(""struts"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_TAPESTRY4_DIR)) {
                        path = paths.getWebOutput() + path.substring(Paths.JAVA_TAPESTRY4_DIR.length());
                        if (config.matchWebTier(""tapestry"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_EJB2_DIR)) {
                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB2_DIR.length());
                        if (config.matchBusinessTier(""ejb 2"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_EJB3_DIR)) {
                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB3_DIR.length());
                        if (config.matchBusinessTier(""ejb 3"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_HIBERNATE2_DIR)) {
                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE2_DIR.length());
                        if (config.matchBusinessTier(""hibernate 2"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_HIBERNATE3_DIR)) {
                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE3_DIR.length());
                        if (config.matchBusinessTier(""hibernate 3"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_MOCK_DIR)) {
                        path = paths.getMockOutput() + path.substring(Paths.JAVA_MOCK_DIR.length());
                        if (config.useMock().booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_SERVICE_DIR)) {
                        path = paths.getServiceOutput() + path.substring(Paths.JAVA_SERVICE_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.JAVA_TEST_DIR)) {
                        path = paths.getTestOutput() + path.substring(Paths.JAVA_TEST_DIR.length());
                        copyFile = true;
                    } else if ((path.indexOf(""build.bat"") != -1) || ((path.indexOf(""deploy.bat"") != -1))) {
                        copyFile = true;
                    }
                }
                if (!path.startsWith(""/"")) {
                    path = ""/"" + path;
                }
                if (copyFile) {
                    fileOut += path;
                    path = outputDir + path;
                    if (!file.isDirectory()) {
                        String name = file.getName();
                        path = path.substring(0, (path.length() - name.length()));
                    }
                    new File(path).mkdirs();
                    if (!file.isDirectory()) {
                        byte array[] = new byte[1024];
                        int size = 0;
                        try {
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileOut));
                            while ((size = in.read(array)) != -1) out.write(array, 0, size);
                            in.close();
                            out.flush();
                            out.close();
                        } catch (Exception exc) {
                            log(""[Error] Copy output file failed : "" + fileOut);
                            log(exc.getMessage());
                        }
                    }
                }
            }
        } catch (Exception exc) {
            log.error(""Error while copying files: "", exc);
            log(exc.getMessage());
        }
    }
"
206,"    public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) {
        try {
            JuneClass $class = null;
            String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + ""/"" : """") + baseClassName.replace('.', '$') + "".class"";
            URL url = Resolver.class.getClassLoader().getResource(resourceName);
            if (url != null) {
                ClassBuilder builder = new ClassBuilder(globals);
                InputStream stream = url.openStream();
                try {
                    new ClassReader(new BufferedInputStream(stream)).accept(builder, ClassReader.SKIP_CODE);
                } finally {
                    stream.close();
                }
                $class = builder.$class;
                $class.loaded = true;
            }
            return $class;
        } catch (Exception e) {
            throw Helper.throwAny(e);
        }
    }
"
7922,"    public void run() {
        try {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug(""Checking for updates at "" + checkUrl);
            }
            URL url = new URL(checkUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.connect();
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer content = new StringBuffer();
                String s = reader.readLine();
                while (s != null) {
                    content.append(s);
                    s = reader.readLine();
                }
                LOGGER.info(""update-available"", content.toString());
            } else if (LOGGER.isDebugEnabled()) {
                LOGGER.debug(""No update available (Response code "" + connection.getResponseCode() + "")"");
            }
        } catch (Throwable e) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug(""Update check failed"", e);
            }
        }
    }
"
6129,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
1076,"    public void init() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Throwable e) {
        }
        Container c = getContentPane();
        c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));
        String[] lines = getAppletInfo().split(""\n"");
        for (int i = 0; i < lines.length; i++) {
            c.add(new JLabel(lines[i]));
        }
        new Worker() {

            public Object construct() {
                Object result;
                try {
                    if (getParameter(""data"") != null && getParameter(""data"").length() > 0) {
                        NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter(""data"")));
                        result = domi.readObject(0);
                    } else if (getParameter(""datafile"") != null) {
                        InputStream in = null;
                        try {
                            URL url = new URL(getDocumentBase(), getParameter(""datafile""));
                            in = url.openConnection().getInputStream();
                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), in);
                            result = domi.readObject(0);
                        } finally {
                            if (in != null) in.close();
                        }
                    } else {
                        result = null;
                    }
                } catch (Throwable t) {
                    result = t;
                }
                return result;
            }

            public void finished(Object result) {
                Container c = getContentPane();
                c.setLayout(new BorderLayout());
                c.removeAll();
                initComponents();
                if (result != null) {
                    if (result instanceof Drawing) {
                        setDrawing((Drawing) result);
                    } else if (result instanceof Throwable) {
                        getDrawing().add(new TextFigure(result.toString()));
                        ((Throwable) result).printStackTrace();
                    }
                }
                boolean isLiveConnect;
                try {
                    Class.forName(""netscape.javascript.JSObject"");
                    isLiveConnect = true;
                } catch (Throwable t) {
                    isLiveConnect = false;
                }
                loadButton.setEnabled(isLiveConnect && getParameter(""dataread"") != null);
                saveButton.setEnabled(isLiveConnect && getParameter(""datawrite"") != null);
                if (isLiveConnect) {
                    String methodName = getParameter(""dataread"");
                    if (methodName.indexOf('(') > 0) {
                        methodName = methodName.substring(0, methodName.indexOf('(') - 1);
                    }
                    JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this);
                    Object data = win.call(methodName, new Object[0]);
                    if (data instanceof String) {
                        setData((String) data);
                    }
                }
                c.validate();
            }
        }.start();
    }
"
1863,"    public static boolean writeFile(HttpServletResponse resp, File reqFile) {
        boolean retVal = false;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(reqFile));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""File successful written to servlet response: "" + reqFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            logger.error(""Resource not found: "" + reqFile.getAbsolutePath());
        } catch (IOException e) {
            logger.error(String.format(""Error while rendering [%s]: %s"", reqFile.getAbsolutePath(), e.getMessage()), e);
        } finally {
            IOUtils.closeQuietly(in);
        }
        return retVal;
    }
"
8379,"    public static String md5(String text) {
        String encrypted = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            encrypted = hex(md.digest());
        } catch (NoSuchAlgorithmException nsaEx) {
        }
        return encrypted;
    }
"
3705,"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://www.sohu.com"");
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is, Charset.forName(""GB18030""));
        FileOutputStream fos = new FileOutputStream(""gen/sohu2.html"");
        OutputStreamWriter osw = new OutputStreamWriter(fos);
        char[] b = new char[2048];
        int temp;
        while (-1 != (temp = isr.read(b, 0, b.length))) {
            osw.write(b);
        }
        osw.close();
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = null;
    }
"
6432,"    public static void saveDigraph(mainFrame parentFrame, DigraphView digraphView, File tobeSaved) {
        DigraphFile digraphFile = new DigraphFile();
        DigraphTextFile digraphTextFile = new DigraphTextFile();
        try {
            if (!DigraphFile.DIGRAPH_FILE_EXTENSION.equals(getExtension(tobeSaved))) {
                tobeSaved = new File(tobeSaved.getPath() + ""."" + DigraphFile.DIGRAPH_FILE_EXTENSION);
            }
            File dtdFile = new File(tobeSaved.getParent() + ""/"" + DigraphFile.DTD_FILE);
            if (!dtdFile.exists()) {
                File baseDigraphDtdFile = parentFrame.getDigraphDtdFile();
                if (baseDigraphDtdFile != null && baseDigraphDtdFile.exists()) {
                    try {
                        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dtdFile));
                        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(baseDigraphDtdFile));
                        while (bis.available() > 1) {
                            bos.write(bis.read());
                        }
                        bis.close();
                        bos.close();
                    } catch (IOException ex) {
                        System.out.println(""Unable to Write Digraph DTD File: "" + ex.getMessage());
                    }
                } else {
                    System.out.println(""Unable to Find Base Digraph DTD File: "");
                }
            }
            Digraph digraph = digraphView.getDigraph();
            digraphFile.saveDigraph(tobeSaved, digraph);
            String fileName = tobeSaved.getName();
            int extensionIndex = fileName.lastIndexOf(""."");
            if (extensionIndex > 0) {
                fileName = fileName.substring(0, extensionIndex + 1) + ""txt"";
            } else {
                fileName = fileName + "".txt"";
            }
            File textFile = new File(tobeSaved.getParent() + ""/"" + fileName);
            digraphTextFile.saveDigraph(textFile, digraph);
            digraphView.setDigraphDirty(false);
            parentFrame.setFilePath(tobeSaved.getPath());
            parentFrame.setSavedOnce(true);
        } catch (DigraphFileException exep) {
            JOptionPane.showMessageDialog(parentFrame, ""Error Saving File:\n"" + exep.getMessage(), ""Save Error"", JOptionPane.ERROR_MESSAGE);
        } catch (DigraphException exep) {
            JOptionPane.showMessageDialog(parentFrame, ""Error Retrieving Digraph from View:\n"" + exep.getMessage(), ""Save Error"", JOptionPane.ERROR_MESSAGE);
        }
    }
"
8366,"    private SecretKey getSecretKey() {
        try {
            String path = ""/org.dbreplicator/repconsole/secretKey.obj"";
            java.net.URL url1 = getClass().getResource(path);
            ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream(url1.openStream()));
            SecretKey sk = (SecretKey) ois.readObject();
            return sk;
        } catch (IOException ex) {
        } catch (ClassNotFoundException ex) {
        }
        return null;
    }
"
641,"    public void runWeb(String beginURL, String contextRoot, String pageURI) {
        if (bDebug) System.out.println(""WEB Path"");
        List<String> vtURLs = new ArrayList<String>();
        List<String> vtRobots = getRobots(beginURL, contextRoot);
        vtURLs.add(""/"" + contextRoot + ""/"" + pageURI);
        Indexer indexer = null;
        IndexDocument indexDoc = null;
        try {
            indexer = new Indexer(""/tmp/tmp/index"");
            for (String sxURL : vtURLs) {
                if (bDebug) System.out.println(""\n\n*** INDEXING "" + sxURL);
                if (bDebug) System.out.println(""Have - "" + sxURL);
                boolean bIndexPage = true;
                if (vtRobots != null) {
                    for (String sxRobotURL : vtRobots) {
                        if (bDebug) System.out.println(""Comparing to - "" + sxRobotURL);
                        if (sxURL.startsWith(sxRobotURL)) {
                            if (bDebug) System.out.println(""Found URL - "" + sxRobotURL + "" - "" + sxURL);
                            bIndexPage = false;
                            break;
                        }
                    }
                } else {
                    bIndexPage = true;
                }
                sxURL = beginURL + sxURL;
                ParserDelegator pd = new ParserDelegator();
                CallbackHandler cb = new CallbackHandler(vtURLs, bIndexPage, contextRoot);
                try {
                    URLConnection urlConn = new URL(sxURL).openConnection();
                    urlConn.setUseCaches(false);
                    Date modDate = new Date(urlConn.getLastModified());
                    if (bDebug) System.out.println(""\nMatch - "" + sxURL + "" - Modified Date - "" + modDate);
                    BufferedReader bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                    pd.parse(bfReader, cb, true);
                    if (bIndexPage) {
                        if (bDebug) System.out.println(""Adding Index - "" + sxURL + ""\nContent:"" + cb.getText() + ""\nSummary:"" + cb.getSummary() + ""\nTitle:"" + cb.getTitle());
                        indexDoc = new IndexDocument();
                        indexDoc.setUID(sxURL + modDate.toString());
                        indexDoc.setPageURL(sxURL);
                        indexDoc.setModifiedDate(modDate.toString());
                        indexDoc.setContents(cb.getText());
                        indexDoc.setTitle(cb.getTitle());
                        indexDoc.setSummary(cb.getSummary());
                        indexer.addDocument(indexDoc);
                    }
                } catch (Exception ee) {
                    PetstoreUtil.getLogger().log(Level.SEVERE, ""Inner Exception"" + ee);
                }
            }
        } catch (Exception e) {
            PetstoreUtil.getLogger().log(Level.SEVERE, ""Outer Exception"" + e);
        } finally {
            try {
                if (indexer != null) {
                    indexer.close();
                }
            } catch (Exception ee) {
                ee.printStackTrace();
            }
        }
    }
"
1039,"    private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException {
        URLConnection connection = url.openConnection();
        JarFile jarFile;
        if (connection instanceof JarURLConnection) {
            jarFile = ((JarURLConnection) connection).getJarFile();
        } else {
            jarFile = getAlternativeJarFile(url);
        }
        if (jarFile != null) {
            scanJarFile(packagePath, componentClassNames, jarFile);
        } else if (supportsDirStream(url)) {
            Stack<Queued> queue = new Stack<Queued>();
            queue.push(new Queued(url, packagePath));
            while (!queue.isEmpty()) {
                Queued queued = queue.pop();
                scanDirStream(queued.packagePath, queued.packageURL, componentClassNames, queue);
            }
        } else {
            String packageName = packagePath.replace(""/"", ""."");
            if (packageName.endsWith(""."")) {
                packageName = packageName.substring(0, packageName.length() - 1);
            }
            scanDir(packageName, new File(url.getFile()), componentClassNames);
        }
    }
"
7209,"    private final String encryptPassword(String pass) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.log(Level.WARNING, ""Error while obtaining decript algorithm"", e);
            throw new RuntimeException(""AccountData.encryptPassword()"");
        }
        try {
            md.update(pass.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            log.log(Level.WARNING, ""Problem with decript algorithm occured."", e);
            throw new RuntimeException(""AccountData.encryptPassword()"");
        }
        return new BASE64Encoder().encode(md.digest());
    }
"
7699,"    public void create_list() {
        try {
            String data = URLEncoder.encode(""PHPSESSID"", ""UTF-8"") + ""="" + URLEncoder.encode(this.get_session(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_CREATE_LIST);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            line = rd.readLine();
            wr.close();
            rd.close();
            System.out.println(""Gene list saved in LOLA"");
        } catch (Exception e) {
            System.out.println(""error in createList()"");
            e.printStackTrace();
        }
    }
"
2162,"    public int batchTransactionUpdate(List<String> queryStrLisyt, Connection con) throws Exception {
        int ret = 0;
        Statement stmt;
        if (con != null) {
            con.setAutoCommit(false);
            stmt = con.createStatement();
            try {
                stmt.executeUpdate(""START TRANSACTION;"");
                for (int i = 0; i < queryStrLisyt.size(); i++) {
                    stmt.addBatch(queryStrLisyt.get(i));
                }
                int[] updateCounts = stmt.executeBatch();
                for (int i = 0; i < updateCounts.length; i++) {
                    FileLogger.debug(""batch update result:"" + updateCounts[i] + "", Statement.SUCCESS_NO_INFO"" + Statement.SUCCESS_NO_INFO);
                    if (updateCounts[i] == Statement.SUCCESS_NO_INFO || updateCounts[i] > 0) {
                        ret++;
                    } else if (updateCounts[i] == Statement.EXECUTE_FAILED) ;
                    {
                        throw new Exception(""query failed, while process batch update"");
                    }
                }
                con.commit();
            } catch (Exception e) {
                ret = 0;
                FileLogger.debug(e.getMessage());
                con.rollback();
            } finally {
                con.setAutoCommit(true);
                stmt.close();
            }
        }
        return ret;
    }
"
7557,"    private String sendMail() throws IOException {
        String msg = StringEscapeUtils.escapeHtml(message.getText());
        StringBuffer buf = new StringBuffer();
        buf.append(encode(""n"", name.getText()));
        buf.append(""&"").append(encode(""e"", email.getText()));
        buf.append(""&"").append(encode(""r"", recpt.getText()));
        buf.append(""&"").append(encode(""m"", msg));
        buf.append(""&"").append(encode(""s"", score));
        buf.append(""&"").append(encode(""i"", calcScoreImage()));
        buf.append(""&"").append(encode(""c"", digest(recpt.getText() + ""_"" + score)));
        URL url = new URL(""http://www.enerjy.com/share/mailit.php"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter writer = null;
        BufferedReader reader = null;
        boolean haveOk = false;
        try {
            writer = new OutputStreamWriter(conn.getOutputStream());
            writer.write(buf.toString());
            writer.flush();
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            for (String line = reader.readLine(); null != line; line = reader.readLine()) {
                if (line.startsWith(""err:"")) {
                    return line.substring(4);
                } else if (line.equals(""ok"")) {
                    haveOk = true;
                }
            }
        } finally {
            StreamUtils.close(writer);
            StreamUtils.close(reader);
        }
        if (!haveOk) {
            return ""The server did not return a response."";
        }
        return null;
    }
"
5622,"	public static void copyFile4(File srcFile, File destFile) throws IOException {
		InputStream in = new FileInputStream(srcFile);
		OutputStream out = new FileOutputStream(destFile);
		IOUtils.copy(in, out);
		in.close();
		out.close();
	}
"
4328,"    public static String getMD5(String text) {
        if (text == null) {
            return null;
        }
        String result = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(ALG_MD5);
            md5.update(text.getBytes(ENCODING));
            result = """" + new BigInteger(1, md5.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return result;
    }
"
5667,"    public static String getTitleFromURLFast(String p_url) throws Exception {
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        String x_title_line = null;
        String x_lc_line = null;
        int x_title = -1;
        int x_end = -1;
        while ((x_line = x_reader.readLine()) != null) {
            x_lc_line = x_line.toLowerCase();
            x_title = x_lc_line.indexOf(""<title"");
            if (x_title != -1) {
                x_end = x_lc_line.indexOf(""</title>"");
                x_title_line = x_line.substring((x_title + 7), (x_end == -1 ? x_line.length() : x_end));
                break;
            }
        }
        return x_title_line;
    }
"
2248,"    @SuppressWarnings(""unused"")
    private String getMD5(String value) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return """";
        }
        md5.reset();
        md5.update(value.getBytes());
        byte[] messageDigest = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < messageDigest.length; i++) {
            hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
        }
        String hashedPassword = hexString.toString();
        return hashedPassword;
    }
"
6385,"    public static void test(String args[]) {
        int trace;
        int bytes_read = 0;
        int last_contentLenght = 0;
        try {
            BufferedReader reader;
            URL url;
            url = new URL(args[0]);
            URLConnection istream = url.openConnection();
            last_contentLenght = istream.getContentLength();
            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
            System.out.println(url.toString());
            String line;
            trace = t2pNewTrace();
            while ((line = reader.readLine()) != null) {
                bytes_read = bytes_read + line.length() + 1;
                t2pProcessLine(trace, line);
            }
            t2pHandleEventPairs(trace);
            t2pSort(trace, 0);
            t2pExportTrace(trace, new String(""pngtest2.png""), 1000, 700, (float) 0, (float) 33);
            t2pExportTrace(trace, new String(""pngtest3.png""), 1000, 700, (float) 2.3, (float) 2.44);
            System.out.println(""Press any key to contiune read from stream !!!"");
            System.out.println(t2pGetProcessName(trace, 0));
            System.in.read();
            istream = url.openConnection();
            if (last_contentLenght != istream.getContentLength()) {
                istream = url.openConnection();
                istream.setRequestProperty(""Range"", ""bytes="" + Integer.toString(bytes_read) + ""-"");
                System.out.println(Integer.toString(istream.getContentLength()));
                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    t2pProcessLine(trace, line);
                }
            } else System.out.println(""File not changed !"");
            t2pDeleteTrace(trace);
        } catch (MalformedURLException e) {
            System.out.println(""MalformedURLException !!!"");
        } catch (IOException e) {
            System.out.println(""File not found "" + args[0]);
        }
        ;
    }
"
1142,"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
"
4153,"    public MpegPresentation(URL url) throws IOException {
        File file = new File(url.getPath());
        InputStream input = url.openStream();
        DataInputStream ds = new DataInputStream(input);
        try {
            parseFile(ds);
            prepareTracks();
            if (audioTrackBox != null && audioHintTrackBox != null) {
                audioTrack = new AudioTrack(audioTrackBox, audioHintTrackBox, file);
            }
            if (videoTrackBox != null && videoHintTrackBox != null) {
                videoTrack = new VideoTrack(videoTrackBox, videoHintTrackBox, file);
            }
        } finally {
            ds.close();
            input.close();
        }
    }
"
4887,"    public static void copyFileStreams(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) {
            return;
        }
        FileInputStream fis = new FileInputStream(fromFile);
        FileOutputStream fos = new FileOutputStream(toFile);
        int read = 0;
        byte[] buf = new byte[1024];
        while (-1 != read) {
            read = fis.read(buf);
            if (read >= 0) {
                fos.write(buf, 0, read);
            }
        }
        fos.close();
        fis.close();
    }
"
3622,"    public void saveToPackage() {
        boolean inPackage = false;
        String className = IconEditor.className;
        if (!checkPackage()) {
            JOptionPane.showMessageDialog(this, ""No package selected. Aborting."", ""Package not selected!"", JOptionPane.WARNING_MESSAGE);
            return;
        }
        File iconFile = new File(getPackageFile().getParent() + File.separator + classIcon);
        File prevIconFile = new File(prevPackagePath + File.separator + classIcon);
        if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) {
            IconEditor.setClassIcon(""default.gif"");
        } else if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) {
            FileFuncs.copyImageFile(prevIconFile, iconFile);
        }
        ci = new ClassImport(getPackageFile(), packageClassNamesList, packageClassList);
        for (int i = 0; i < packageClassList.size(); i++) {
            if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) {
                inPackage = true;
                classX = 0 - classX;
                classY = 0 - classY;
                shapeList.shift(classX, classY);
                packageClassList.get(i).setBoundingbox(boundingbox);
                packageClassList.get(i).setDescription(IconEditor.classDescription);
                if (IconEditor.getClassIcon() == null) {
                    packageClassList.get(i).setIconName(""default.gif"");
                } else {
                    packageClassList.get(i).setIconName(IconEditor.getClassIcon());
                }
                packageClassList.get(i).setIsRelation(IconEditor.classIsRelation);
                packageClassList.get(i).setName(IconEditor.className);
                packageClassList.get(i).setPorts(ports);
                packageClassList.get(i).shiftPorts(classX, classY);
                packageClassList.get(i).setShapeList(shapeList);
                if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) {
                    fields.clear();
                    for (int j = 0; j < dbrClassFields.getRowCount(); j++) {
                        String fieldName = dbrClassFields.getValueAt(j, iNAME);
                        String fieldType = dbrClassFields.getValueAt(j, iTYPE);
                        String fieldValue = dbrClassFields.getValueAt(j, iVALUE);
                        ClassField field = new ClassField(fieldName, fieldType, fieldValue);
                        fields.add(field);
                    }
                }
                packageClassList.get(i).setFields(fields);
                packageClassList.add(packageClassList.get(i));
                packageClassList.remove(i);
                break;
            }
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(getPackageFile()));
            String str;
            StringBuffer content = new StringBuffer();
            while ((str = in.readLine()) != null) {
                if (inPackage && str.trim().startsWith(""<class"")) {
                    break;
                } else if (!inPackage) {
                    if (str.equalsIgnoreCase(""</package>"")) break;
                    content.append(str + ""\n"");
                } else if (inPackage) content.append(str + ""\n"");
            }
            if (!inPackage) {
                content.append(getShapesInXML(false));
            } else {
                for (int i = 0; i < packageClassList.size(); i++) {
                    classX = 0;
                    classY = 0;
                    makeClass(packageClassList.get(i));
                    content.append(getShapesInXML(false));
                }
            }
            content.append(""</package>"");
            in.close();
            File javaFile = new File(getPackageFile().getParent() + File.separator + className + "".java"");
            File prevJavaFile = new File(prevPackagePath + File.separator + className + "".java"");
            int overwriteFile = JOptionPane.YES_OPTION;
            if (javaFile.exists()) {
                overwriteFile = JOptionPane.showConfirmDialog(null, ""Java class already exists. Overwrite?"");
            }
            if (overwriteFile != JOptionPane.CANCEL_OPTION) {
                FileOutputStream out = new FileOutputStream(new File(getPackageFile().getAbsolutePath()));
                out.write(content.toString().getBytes());
                out.flush();
                out.close();
                if (overwriteFile == JOptionPane.YES_OPTION) {
                    String fileText = null;
                    if (prevJavaFile.exists()) {
                        fileText = FileFuncs.getFileContents(prevJavaFile);
                    } else {
                        fileText = ""class "" + className + "" {"";
                        fileText += ""\n    /*@ specification "" + className + "" {\n"";
                        for (int i = 0; i < dbrClassFields.getRowCount(); i++) {
                            String fieldName = dbrClassFields.getValueAt(i, iNAME);
                            String fieldType = dbrClassFields.getValueAt(i, iTYPE);
                            if (fieldType != null) {
                                fileText += ""    "" + fieldType + "" "" + fieldName + "";\n"";
                            }
                        }
                        fileText += ""    }@*/\n \n}"";
                    }
                    FileFuncs.writeFile(javaFile, fileText);
                }
                JOptionPane.showMessageDialog(null, ""Saved to package: "" + getPackageFile().getName(), ""Saved"", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
"
3797,"    public boolean login() {
        if (super.isAuthenticated()) return true;
        try {
            if (client == null) {
                client = new FTPClient();
                FTPClientConfig config = new FTPClientConfig();
                client.configure(config);
            }
            if (!client.isConnected()) {
                client.connect(super.getStoreConfig().getServerName(), new Integer(super.getStoreConfig().getServerPort()).intValue());
            }
            if (client.login(super.getStoreConfig().getUserName(), super.getStoreConfig().getPassword(), super.getStoreConfig().getServerName())) {
                super.setAuthenticated(true);
                return true;
            }
            log.error(""Login ftp server error"");
        } catch (Exception e) {
            log.info(""FTPStore.login"", e);
        }
        return false;
    }
"
1671,"    public Web(String urlString, String charset) throws java.net.MalformedURLException, java.io.IOException {
        this.charset = charset;
        final java.net.URL url = new java.net.URL(urlString);
        final java.net.URLConnection uconn = url.openConnection();
        if (!(uconn instanceof java.net.HttpURLConnection)) throw new java.lang.IllegalArgumentException(""URL protocol must be HTTP."");
        final java.net.HttpURLConnection conn = (java.net.HttpURLConnection) uconn;
        conn.setConnectTimeout(600000);
        conn.setReadTimeout(600000);
        conn.setInstanceFollowRedirects(true);
        conn.setRequestProperty(""User-agent"", ""spider"");
        conn.connect();
        responseHeader = conn.getHeaderFields();
        responseCode = conn.getResponseCode();
        responseURL = conn.getURL();
        length = conn.getContentLength();
        final java.io.InputStream stream = conn.getErrorStream();
        if (stream != null) {
            content = readStream(length, stream);
        } else if ((inputStream = conn.getContent()) != null && inputStream instanceof java.io.InputStream) {
            content = readStream(length, (java.io.InputStream) inputStream);
        }
        conn.disconnect();
    }
"
1174,"    @HttpAction(name = ""map.saveOrUpdate"", method = { HttpAction.Method.post }, responseType = ""text/plain"")
    @HttpAuthentication(method = { HttpAuthentication.Method.WSSE })
    public String saveOrUpdate(FileItem file, User user, MapOriginal map) throws HttpRpcException {
        File tmpFile;
        GenericDAO<MapOriginal> mapDao = DAOFactory.createDAO(MapOriginal.class);
        try {
            assert (file != null);
            String jobid = null;
            if (file.getContentType().startsWith(""image/"")) {
                tmpFile = File.createTempFile(""gmap"", ""img"");
                OutputStream out = new FileOutputStream(tmpFile);
                IOUtils.copy(file.getInputStream(), out);
                out.flush();
                out.close();
                map.setState(MapOriginal.MapState.UPLOAD);
                map.setUser(user);
                map.setMapPath(tmpFile.getPath());
                map.setThumbnailUrl(""/map/inproc.gif"");
                map.setMimeType(file.getContentType());
                mapDao.saveOrUpdate(map);
                jobid = PoolFactory.getClientPool().put(map, TaskState.STATE_MO_FINISH, MapOverrideStrategy.class);
            }
            return jobid;
        } catch (IOException e) {
            logger.error(e);
            throw ERROR_INTERNAL;
        } catch (DAOException e) {
            logger.error(e);
            throw ERROR_INTERNAL;
        }
    }
"
772,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
553,"    public void sorter() {
        String inputLine1, inputLine2;
        String epiNames[] = new String[1000];
        String epiEpisodes[] = new String[1000];
        int lineCounter = 0;
        try {
            String pluginDir = pluginInterface.getPluginDirectoryName();
            String eplist_file = pluginDir + System.getProperty(""file.separator"") + ""EpisodeList.txt"";
            File episodeList = new File(eplist_file);
            if (!episodeList.isFile()) {
                episodeList.createNewFile();
            }
            final BufferedReader in = new BufferedReader(new FileReader(episodeList));
            while ((inputLine1 = in.readLine()) != null) {
                if ((inputLine2 = in.readLine()) != null) {
                    epiNames[lineCounter] = inputLine1;
                    epiEpisodes[lineCounter] = inputLine2;
                    lineCounter++;
                }
            }
            in.close();
            int epiLength = epiNames.length;
            for (int i = 0; i < (lineCounter); i++) {
                for (int j = 0; j < (lineCounter - 1); j++) {
                    if (epiNames[j].compareToIgnoreCase(epiNames[j + 1]) > 0) {
                        String temp = epiNames[j];
                        epiNames[j] = epiNames[j + 1];
                        epiNames[j + 1] = temp;
                        String temp2 = epiEpisodes[j];
                        epiEpisodes[j] = epiEpisodes[j + 1];
                        epiEpisodes[j + 1] = temp2;
                    }
                }
            }
            File episodeList2 = new File(eplist_file);
            BufferedWriter bufWriter = new BufferedWriter(new FileWriter(episodeList2));
            for (int i = 0; i <= lineCounter; i++) {
                if (epiNames[i] == null) {
                    break;
                }
                bufWriter.write(epiNames[i] + ""\n"");
                bufWriter.write(epiEpisodes[i] + ""\n"");
            }
            bufWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
"
6926,"    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
"
3537,"    public void init() {
        this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_ALWAYS);
        try {
            if (memeId < 0) {
            } else {
                conurl = new URL(ServerURL + ""?meme_id="" + memeId);
                java.io.InputStream xmlstr = conurl.openStream();
                this.removeAllWorkSheets();
                this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_EXPLICIT);
                this.setStringEncodingMode(WorkBookHandle.STRING_ENCODING_UNICODE);
                this.setDupeStringMode(WorkBookHandle.SHAREDUPES);
                ExtenXLS.parseNBind(this, xmlstr);
                this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_ALWAYS);
            }
        } catch (Exception ex) {
            throw new WorkBookException(""Error while connecting to: "" + ServerURL + "":"" + ex.toString(), WorkBookException.RUNTIME_ERROR);
        }
    }
"
5551,"    protected void logout() {
        Session session = getConnection().getSession();
        session.removeAttribute(""usercookie.object"");
        String urlIn = GeoNetworkContext.url + ""/"" + GeoNetworkContext.logoutService;
        Element results = null;
        String cookie = (String) session.getAttribute(""usercookie.object"");
        if (cookie != null) {
            try {
                URL url = new URL(urlIn);
                URLConnection conn = url.openConnection();
                conn.setConnectTimeout(1000);
                conn.setRequestProperty(""Cookie"", cookie);
                BufferedInputStream in = new BufferedInputStream(conn.getInputStream());
                try {
                    results = Xml.loadStream(in);
                    log.debug(""CheckLogout to GeoNetwork returned "" + Xml.getString(results));
                } finally {
                    in.close();
                }
            } catch (Exception e) {
                throw new RuntimeException(""User logout to GeoNetwork failed: "", e);
            }
        }
        log.debug(""GeoNetwork logout done"");
    }
"
7527,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
2408,"    public static void processString(String text) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance(MD5_DIGEST);
        md5.reset();
        md5.update(text.getBytes());
        displayResult(null, md5.digest());
    }
"
8374,"    public boolean check(String password) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(username.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(realm.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(password.getBytes(""ISO-8859-1""));
        byte[] ha1 = md.digest();
        String hexHa1 = new String(Hex.encodeHex(ha1));
        md.reset();
        md.update(method.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(uri.getBytes(""ISO-8859-1""));
        byte[] ha2 = md.digest();
        String hexHa2 = new String(Hex.encodeHex(ha2));
        md.reset();
        md.update(hexHa1.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(nonce.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(nc.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(cnonce.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(qop.getBytes(""ISO-8859-1""));
        md.update((byte) ':');
        md.update(hexHa2.getBytes(""ISO-8859-1""));
        byte[] digest = md.digest();
        String hexDigest = new String(Hex.encodeHex(digest));
        return (hexDigest.equalsIgnoreCase(response));
    }
"
8543,"    public static void main(String args[]) {
        org.apache.xml.security.Init.init();
        String signatureFileName = args[0];
        javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        dbf.setAttribute(""http://xml.org/sax/features/namespaces"", Boolean.TRUE);
        try {
            long start = System.currentTimeMillis();
            org.apache.xml.security.Init.init();
            File f = new File(signatureFileName);
            System.out.println(""Verifying "" + signatureFileName);
            javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder();
            org.w3c.dom.Document doc = db.parse(new java.io.FileInputStream(f));
            VerifyExampleTest vf = new VerifyExampleTest();
            vf.verify(doc);
            Constants.setSignatureSpecNSprefix(""dsig"");
            Element sigElement = null;
            NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, ""Signature"");
            if (nodes.getLength() != 0) {
                System.out.println(""Found "" + nodes.getLength() + "" Signature  elements."");
                for (int i = 0; i < nodes.getLength(); i++) {
                    sigElement = (Element) nodes.item(i);
                    XMLSignature signature = new XMLSignature(sigElement, """");
                    KeyInfo ki = signature.getKeyInfo();
                    signature.addResourceResolver(new OfflineResolver());
                    if (ki != null) {
                        if (ki.containsX509Data()) {
                            System.out.println(""Could find a X509Data element in the  KeyInfo"");
                        }
                        KeyInfo kinfo = signature.getKeyInfo();
                        X509Certificate cert = null;
                        if (kinfo.containsRetrievalMethod()) {
                            RetrievalMethod m = kinfo.itemRetrievalMethod(0);
                            URL url = new URL(m.getURI());
                            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                            cert = (X509Certificate) cf.generateCertificate(url.openStream());
                        } else {
                            cert = signature.getKeyInfo().getX509Certificate();
                        }
                        if (cert != null) {
                            System.out.println(""The XML signature is "" + (signature.checkSignatureValue(cert) ? ""valid (good)"" : ""invalid !!!!! (bad)""));
                        } else {
                            System.out.println(""Did not find a Certificate"");
                            PublicKey pk = signature.getKeyInfo().getPublicKey();
                            if (pk != null) {
                                System.out.println(""The XML signatur is "" + (signature.checkSignatureValue(pk) ? ""valid (good)"" : ""invalid !!!!! (bad)""));
                            } else {
                                System.out.println(""Did not find a public key, so I can't check the signature"");
                            }
                        }
                    } else {
                        System.out.println(""Did not find a KeyInfo"");
                    }
                }
            }
            long end = System.currentTimeMillis();
            double elapsed = end - start;
            System.out.println(""verified:"" + elapsed);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
8550,"    public Vector<String> getVoiceServersNames() {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(voiceaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[0]);
                }
                if (line.startsWith(""!VOICE SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
"
6367,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
"
6215,"    protected static String md5(String s) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(s.getBytes());
        byte digest[] = md.digest();
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            result.append(Integer.toHexString(0xFF & digest[i]));
        }
        return result.toString();
    }
"
